
STM32F105_CAN_HACK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000088f4  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000224  08008ad8  08008ad8  00009ad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008cfc  08008cfc  0000a1cc  2**0
                  CONTENTS
  4 .ARM          00000008  08008cfc  08008cfc  00009cfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d04  08008d04  0000a1cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d04  08008d04  00009d04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d08  08008d08  00009d08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001cc  20000000  08008d0c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001790  200001cc  08008ed8  0000a1cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000195c  08008ed8  0000a95c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a1cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013894  00000000  00000000  0000a1f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000377b  00000000  00000000  0001da89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001250  00000000  00000000  00021208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000de7  00000000  00000000  00022458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021a66  00000000  00000000  0002323f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016dc6  00000000  00000000  00044ca5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b777d  00000000  00000000  0005ba6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001131e8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051c4  00000000  00000000  0011322c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  001183f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	200001cc 	.word	0x200001cc
 8000200:	00000000 	.word	0x00000000
 8000204:	08008ac0 	.word	0x08008ac0

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	200001d0 	.word	0x200001d0
 8000220:	08008ac0 	.word	0x08008ac0

08000224 <__aeabi_uldivmod>:
 8000224:	b953      	cbnz	r3, 800023c <__aeabi_uldivmod+0x18>
 8000226:	b94a      	cbnz	r2, 800023c <__aeabi_uldivmod+0x18>
 8000228:	2900      	cmp	r1, #0
 800022a:	bf08      	it	eq
 800022c:	2800      	cmpeq	r0, #0
 800022e:	bf1c      	itt	ne
 8000230:	f04f 31ff 	movne.w	r1, #4294967295
 8000234:	f04f 30ff 	movne.w	r0, #4294967295
 8000238:	f000 b968 	b.w	800050c <__aeabi_idiv0>
 800023c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000240:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000244:	f000 f806 	bl	8000254 <__udivmoddi4>
 8000248:	f8dd e004 	ldr.w	lr, [sp, #4]
 800024c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000250:	b004      	add	sp, #16
 8000252:	4770      	bx	lr

08000254 <__udivmoddi4>:
 8000254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000258:	9d08      	ldr	r5, [sp, #32]
 800025a:	460c      	mov	r4, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14e      	bne.n	80002fe <__udivmoddi4+0xaa>
 8000260:	4694      	mov	ip, r2
 8000262:	458c      	cmp	ip, r1
 8000264:	4686      	mov	lr, r0
 8000266:	fab2 f282 	clz	r2, r2
 800026a:	d962      	bls.n	8000332 <__udivmoddi4+0xde>
 800026c:	b14a      	cbz	r2, 8000282 <__udivmoddi4+0x2e>
 800026e:	f1c2 0320 	rsb	r3, r2, #32
 8000272:	4091      	lsls	r1, r2
 8000274:	fa20 f303 	lsr.w	r3, r0, r3
 8000278:	fa0c fc02 	lsl.w	ip, ip, r2
 800027c:	4319      	orrs	r1, r3
 800027e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000282:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000286:	fbb1 f4f7 	udiv	r4, r1, r7
 800028a:	fb07 1114 	mls	r1, r7, r4, r1
 800028e:	fa1f f68c 	uxth.w	r6, ip
 8000292:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000296:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800029a:	fb04 f106 	mul.w	r1, r4, r6
 800029e:	4299      	cmp	r1, r3
 80002a0:	d90a      	bls.n	80002b8 <__udivmoddi4+0x64>
 80002a2:	eb1c 0303 	adds.w	r3, ip, r3
 80002a6:	f104 30ff 	add.w	r0, r4, #4294967295
 80002aa:	f080 8110 	bcs.w	80004ce <__udivmoddi4+0x27a>
 80002ae:	4299      	cmp	r1, r3
 80002b0:	f240 810d 	bls.w	80004ce <__udivmoddi4+0x27a>
 80002b4:	3c02      	subs	r4, #2
 80002b6:	4463      	add	r3, ip
 80002b8:	1a59      	subs	r1, r3, r1
 80002ba:	fbb1 f0f7 	udiv	r0, r1, r7
 80002be:	fb07 1110 	mls	r1, r7, r0, r1
 80002c2:	fb00 f606 	mul.w	r6, r0, r6
 80002c6:	fa1f f38e 	uxth.w	r3, lr
 80002ca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ce:	429e      	cmp	r6, r3
 80002d0:	d90a      	bls.n	80002e8 <__udivmoddi4+0x94>
 80002d2:	eb1c 0303 	adds.w	r3, ip, r3
 80002d6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002da:	f080 80fa 	bcs.w	80004d2 <__udivmoddi4+0x27e>
 80002de:	429e      	cmp	r6, r3
 80002e0:	f240 80f7 	bls.w	80004d2 <__udivmoddi4+0x27e>
 80002e4:	4463      	add	r3, ip
 80002e6:	3802      	subs	r0, #2
 80002e8:	2100      	movs	r1, #0
 80002ea:	1b9b      	subs	r3, r3, r6
 80002ec:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002f0:	b11d      	cbz	r5, 80002fa <__udivmoddi4+0xa6>
 80002f2:	40d3      	lsrs	r3, r2
 80002f4:	2200      	movs	r2, #0
 80002f6:	e9c5 3200 	strd	r3, r2, [r5]
 80002fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fe:	428b      	cmp	r3, r1
 8000300:	d905      	bls.n	800030e <__udivmoddi4+0xba>
 8000302:	b10d      	cbz	r5, 8000308 <__udivmoddi4+0xb4>
 8000304:	e9c5 0100 	strd	r0, r1, [r5]
 8000308:	2100      	movs	r1, #0
 800030a:	4608      	mov	r0, r1
 800030c:	e7f5      	b.n	80002fa <__udivmoddi4+0xa6>
 800030e:	fab3 f183 	clz	r1, r3
 8000312:	2900      	cmp	r1, #0
 8000314:	d146      	bne.n	80003a4 <__udivmoddi4+0x150>
 8000316:	42a3      	cmp	r3, r4
 8000318:	d302      	bcc.n	8000320 <__udivmoddi4+0xcc>
 800031a:	4290      	cmp	r0, r2
 800031c:	f0c0 80ee 	bcc.w	80004fc <__udivmoddi4+0x2a8>
 8000320:	1a86      	subs	r6, r0, r2
 8000322:	eb64 0303 	sbc.w	r3, r4, r3
 8000326:	2001      	movs	r0, #1
 8000328:	2d00      	cmp	r5, #0
 800032a:	d0e6      	beq.n	80002fa <__udivmoddi4+0xa6>
 800032c:	e9c5 6300 	strd	r6, r3, [r5]
 8000330:	e7e3      	b.n	80002fa <__udivmoddi4+0xa6>
 8000332:	2a00      	cmp	r2, #0
 8000334:	f040 808f 	bne.w	8000456 <__udivmoddi4+0x202>
 8000338:	eba1 040c 	sub.w	r4, r1, ip
 800033c:	2101      	movs	r1, #1
 800033e:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fbb4 f6f8 	udiv	r6, r4, r8
 800034a:	fb08 4416 	mls	r4, r8, r6, r4
 800034e:	fb07 f006 	mul.w	r0, r7, r6
 8000352:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000356:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800035a:	4298      	cmp	r0, r3
 800035c:	d908      	bls.n	8000370 <__udivmoddi4+0x11c>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 34ff 	add.w	r4, r6, #4294967295
 8000366:	d202      	bcs.n	800036e <__udivmoddi4+0x11a>
 8000368:	4298      	cmp	r0, r3
 800036a:	f200 80cb 	bhi.w	8000504 <__udivmoddi4+0x2b0>
 800036e:	4626      	mov	r6, r4
 8000370:	1a1c      	subs	r4, r3, r0
 8000372:	fbb4 f0f8 	udiv	r0, r4, r8
 8000376:	fb08 4410 	mls	r4, r8, r0, r4
 800037a:	fb00 f707 	mul.w	r7, r0, r7
 800037e:	fa1f f38e 	uxth.w	r3, lr
 8000382:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000386:	429f      	cmp	r7, r3
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0x148>
 800038a:	eb1c 0303 	adds.w	r3, ip, r3
 800038e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x146>
 8000394:	429f      	cmp	r7, r3
 8000396:	f200 80ae 	bhi.w	80004f6 <__udivmoddi4+0x2a2>
 800039a:	4620      	mov	r0, r4
 800039c:	1bdb      	subs	r3, r3, r7
 800039e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a2:	e7a5      	b.n	80002f0 <__udivmoddi4+0x9c>
 80003a4:	f1c1 0720 	rsb	r7, r1, #32
 80003a8:	408b      	lsls	r3, r1
 80003aa:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ae:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b2:	fa24 f607 	lsr.w	r6, r4, r7
 80003b6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ba:	fbb6 f8f9 	udiv	r8, r6, r9
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	fb09 6618 	mls	r6, r9, r8, r6
 80003c6:	fa20 f307 	lsr.w	r3, r0, r7
 80003ca:	408c      	lsls	r4, r1
 80003cc:	fa00 fa01 	lsl.w	sl, r0, r1
 80003d0:	fb08 f00e 	mul.w	r0, r8, lr
 80003d4:	431c      	orrs	r4, r3
 80003d6:	0c23      	lsrs	r3, r4, #16
 80003d8:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80003dc:	4298      	cmp	r0, r3
 80003de:	fa02 f201 	lsl.w	r2, r2, r1
 80003e2:	d90a      	bls.n	80003fa <__udivmoddi4+0x1a6>
 80003e4:	eb1c 0303 	adds.w	r3, ip, r3
 80003e8:	f108 36ff 	add.w	r6, r8, #4294967295
 80003ec:	f080 8081 	bcs.w	80004f2 <__udivmoddi4+0x29e>
 80003f0:	4298      	cmp	r0, r3
 80003f2:	d97e      	bls.n	80004f2 <__udivmoddi4+0x29e>
 80003f4:	f1a8 0802 	sub.w	r8, r8, #2
 80003f8:	4463      	add	r3, ip
 80003fa:	1a1e      	subs	r6, r3, r0
 80003fc:	fbb6 f3f9 	udiv	r3, r6, r9
 8000400:	fb09 6613 	mls	r6, r9, r3, r6
 8000404:	fb03 fe0e 	mul.w	lr, r3, lr
 8000408:	b2a4      	uxth	r4, r4
 800040a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 800040e:	45a6      	cmp	lr, r4
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x1d0>
 8000412:	eb1c 0404 	adds.w	r4, ip, r4
 8000416:	f103 30ff 	add.w	r0, r3, #4294967295
 800041a:	d266      	bcs.n	80004ea <__udivmoddi4+0x296>
 800041c:	45a6      	cmp	lr, r4
 800041e:	d964      	bls.n	80004ea <__udivmoddi4+0x296>
 8000420:	3b02      	subs	r3, #2
 8000422:	4464      	add	r4, ip
 8000424:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000428:	fba0 8302 	umull	r8, r3, r0, r2
 800042c:	eba4 040e 	sub.w	r4, r4, lr
 8000430:	429c      	cmp	r4, r3
 8000432:	46c6      	mov	lr, r8
 8000434:	461e      	mov	r6, r3
 8000436:	d350      	bcc.n	80004da <__udivmoddi4+0x286>
 8000438:	d04d      	beq.n	80004d6 <__udivmoddi4+0x282>
 800043a:	b155      	cbz	r5, 8000452 <__udivmoddi4+0x1fe>
 800043c:	ebba 030e 	subs.w	r3, sl, lr
 8000440:	eb64 0406 	sbc.w	r4, r4, r6
 8000444:	fa04 f707 	lsl.w	r7, r4, r7
 8000448:	40cb      	lsrs	r3, r1
 800044a:	431f      	orrs	r7, r3
 800044c:	40cc      	lsrs	r4, r1
 800044e:	e9c5 7400 	strd	r7, r4, [r5]
 8000452:	2100      	movs	r1, #0
 8000454:	e751      	b.n	80002fa <__udivmoddi4+0xa6>
 8000456:	fa0c fc02 	lsl.w	ip, ip, r2
 800045a:	f1c2 0320 	rsb	r3, r2, #32
 800045e:	40d9      	lsrs	r1, r3
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa20 f303 	lsr.w	r3, r0, r3
 8000468:	fa00 fe02 	lsl.w	lr, r0, r2
 800046c:	fbb1 f0f8 	udiv	r0, r1, r8
 8000470:	fb08 1110 	mls	r1, r8, r0, r1
 8000474:	4094      	lsls	r4, r2
 8000476:	431c      	orrs	r4, r3
 8000478:	fa1f f78c 	uxth.w	r7, ip
 800047c:	0c23      	lsrs	r3, r4, #16
 800047e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000482:	fb00 f107 	mul.w	r1, r0, r7
 8000486:	4299      	cmp	r1, r3
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0x248>
 800048a:	eb1c 0303 	adds.w	r3, ip, r3
 800048e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000492:	d22c      	bcs.n	80004ee <__udivmoddi4+0x29a>
 8000494:	4299      	cmp	r1, r3
 8000496:	d92a      	bls.n	80004ee <__udivmoddi4+0x29a>
 8000498:	3802      	subs	r0, #2
 800049a:	4463      	add	r3, ip
 800049c:	1a5b      	subs	r3, r3, r1
 800049e:	fbb3 f1f8 	udiv	r1, r3, r8
 80004a2:	fb08 3311 	mls	r3, r8, r1, r3
 80004a6:	b2a4      	uxth	r4, r4
 80004a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004ac:	fb01 f307 	mul.w	r3, r1, r7
 80004b0:	42a3      	cmp	r3, r4
 80004b2:	d908      	bls.n	80004c6 <__udivmoddi4+0x272>
 80004b4:	eb1c 0404 	adds.w	r4, ip, r4
 80004b8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004bc:	d213      	bcs.n	80004e6 <__udivmoddi4+0x292>
 80004be:	42a3      	cmp	r3, r4
 80004c0:	d911      	bls.n	80004e6 <__udivmoddi4+0x292>
 80004c2:	3902      	subs	r1, #2
 80004c4:	4464      	add	r4, ip
 80004c6:	1ae4      	subs	r4, r4, r3
 80004c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004cc:	e73b      	b.n	8000346 <__udivmoddi4+0xf2>
 80004ce:	4604      	mov	r4, r0
 80004d0:	e6f2      	b.n	80002b8 <__udivmoddi4+0x64>
 80004d2:	4608      	mov	r0, r1
 80004d4:	e708      	b.n	80002e8 <__udivmoddi4+0x94>
 80004d6:	45c2      	cmp	sl, r8
 80004d8:	d2af      	bcs.n	800043a <__udivmoddi4+0x1e6>
 80004da:	ebb8 0e02 	subs.w	lr, r8, r2
 80004de:	eb63 060c 	sbc.w	r6, r3, ip
 80004e2:	3801      	subs	r0, #1
 80004e4:	e7a9      	b.n	800043a <__udivmoddi4+0x1e6>
 80004e6:	4631      	mov	r1, r6
 80004e8:	e7ed      	b.n	80004c6 <__udivmoddi4+0x272>
 80004ea:	4603      	mov	r3, r0
 80004ec:	e79a      	b.n	8000424 <__udivmoddi4+0x1d0>
 80004ee:	4630      	mov	r0, r6
 80004f0:	e7d4      	b.n	800049c <__udivmoddi4+0x248>
 80004f2:	46b0      	mov	r8, r6
 80004f4:	e781      	b.n	80003fa <__udivmoddi4+0x1a6>
 80004f6:	4463      	add	r3, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e74f      	b.n	800039c <__udivmoddi4+0x148>
 80004fc:	4606      	mov	r6, r0
 80004fe:	4623      	mov	r3, r4
 8000500:	4608      	mov	r0, r1
 8000502:	e711      	b.n	8000328 <__udivmoddi4+0xd4>
 8000504:	3e02      	subs	r6, #2
 8000506:	4463      	add	r3, ip
 8000508:	e732      	b.n	8000370 <__udivmoddi4+0x11c>
 800050a:	bf00      	nop

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <CAN_Init>:
uint8_t bufferTextCan[256];

uint8_t alertValue = 0;

//********************************************************************************************************
void CAN_Init(){
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0

	// CAN1 Settings
	canfil1.FilterBank = 0;
 8000514:	4b34      	ldr	r3, [pc, #208]	@ (80005e8 <CAN_Init+0xd8>)
 8000516:	2200      	movs	r2, #0
 8000518:	615a      	str	r2, [r3, #20]
	canfil1.FilterMode = CAN_FILTERMODE_IDMASK;
 800051a:	4b33      	ldr	r3, [pc, #204]	@ (80005e8 <CAN_Init+0xd8>)
 800051c:	2200      	movs	r2, #0
 800051e:	619a      	str	r2, [r3, #24]
	canfil1.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000520:	4b31      	ldr	r3, [pc, #196]	@ (80005e8 <CAN_Init+0xd8>)
 8000522:	2200      	movs	r2, #0
 8000524:	611a      	str	r2, [r3, #16]
	canfil1.FilterIdHigh = 0;
 8000526:	4b30      	ldr	r3, [pc, #192]	@ (80005e8 <CAN_Init+0xd8>)
 8000528:	2200      	movs	r2, #0
 800052a:	601a      	str	r2, [r3, #0]
	canfil1.FilterIdLow = 0;
 800052c:	4b2e      	ldr	r3, [pc, #184]	@ (80005e8 <CAN_Init+0xd8>)
 800052e:	2200      	movs	r2, #0
 8000530:	605a      	str	r2, [r3, #4]
	canfil1.FilterMaskIdHigh = 0;
 8000532:	4b2d      	ldr	r3, [pc, #180]	@ (80005e8 <CAN_Init+0xd8>)
 8000534:	2200      	movs	r2, #0
 8000536:	609a      	str	r2, [r3, #8]
	canfil1.FilterMaskIdLow = 0;
 8000538:	4b2b      	ldr	r3, [pc, #172]	@ (80005e8 <CAN_Init+0xd8>)
 800053a:	2200      	movs	r2, #0
 800053c:	60da      	str	r2, [r3, #12]
	canfil1.FilterScale = CAN_FILTERSCALE_32BIT;
 800053e:	4b2a      	ldr	r3, [pc, #168]	@ (80005e8 <CAN_Init+0xd8>)
 8000540:	2201      	movs	r2, #1
 8000542:	61da      	str	r2, [r3, #28]
	canfil1.FilterActivation = ENABLE;
 8000544:	4b28      	ldr	r3, [pc, #160]	@ (80005e8 <CAN_Init+0xd8>)
 8000546:	2201      	movs	r2, #1
 8000548:	621a      	str	r2, [r3, #32]
	canfil1.SlaveStartFilterBank = 14;
 800054a:	4b27      	ldr	r3, [pc, #156]	@ (80005e8 <CAN_Init+0xd8>)
 800054c:	220e      	movs	r2, #14
 800054e:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_CAN_ConfigFilter(&hcan1,&canfil1);
 8000550:	4925      	ldr	r1, [pc, #148]	@ (80005e8 <CAN_Init+0xd8>)
 8000552:	4826      	ldr	r0, [pc, #152]	@ (80005ec <CAN_Init+0xdc>)
 8000554:	f001 fa40 	bl	80019d8 <HAL_CAN_ConfigFilter>

	TxHeader1.DLC = 8;
 8000558:	4b25      	ldr	r3, [pc, #148]	@ (80005f0 <CAN_Init+0xe0>)
 800055a:	2208      	movs	r2, #8
 800055c:	611a      	str	r2, [r3, #16]
    TxHeader1.IDE = CAN_ID_STD;
 800055e:	4b24      	ldr	r3, [pc, #144]	@ (80005f0 <CAN_Init+0xe0>)
 8000560:	2200      	movs	r2, #0
 8000562:	609a      	str	r2, [r3, #8]
    TxHeader1.RTR = CAN_RTR_DATA;
 8000564:	4b22      	ldr	r3, [pc, #136]	@ (80005f0 <CAN_Init+0xe0>)
 8000566:	2200      	movs	r2, #0
 8000568:	60da      	str	r2, [r3, #12]
    TxHeader1.StdId = 0x030;
 800056a:	4b21      	ldr	r3, [pc, #132]	@ (80005f0 <CAN_Init+0xe0>)
 800056c:	2230      	movs	r2, #48	@ 0x30
 800056e:	601a      	str	r2, [r3, #0]
	TxHeader1.ExtId = 0x02;
 8000570:	4b1f      	ldr	r3, [pc, #124]	@ (80005f0 <CAN_Init+0xe0>)
 8000572:	2202      	movs	r2, #2
 8000574:	605a      	str	r2, [r3, #4]
	TxHeader1.TransmitGlobalTime = DISABLE;
 8000576:	4b1e      	ldr	r3, [pc, #120]	@ (80005f0 <CAN_Init+0xe0>)
 8000578:	2200      	movs	r2, #0
 800057a:	751a      	strb	r2, [r3, #20]

	// CAN2 Settings
	canfil2.FilterBank = 14;
 800057c:	4b1d      	ldr	r3, [pc, #116]	@ (80005f4 <CAN_Init+0xe4>)
 800057e:	220e      	movs	r2, #14
 8000580:	615a      	str	r2, [r3, #20]
	canfil2.FilterMode = CAN_FILTERMODE_IDMASK;
 8000582:	4b1c      	ldr	r3, [pc, #112]	@ (80005f4 <CAN_Init+0xe4>)
 8000584:	2200      	movs	r2, #0
 8000586:	619a      	str	r2, [r3, #24]
	canfil2.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000588:	4b1a      	ldr	r3, [pc, #104]	@ (80005f4 <CAN_Init+0xe4>)
 800058a:	2200      	movs	r2, #0
 800058c:	611a      	str	r2, [r3, #16]
	canfil2.FilterIdHigh = 0;
 800058e:	4b19      	ldr	r3, [pc, #100]	@ (80005f4 <CAN_Init+0xe4>)
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
	canfil2.FilterIdLow = 0;
 8000594:	4b17      	ldr	r3, [pc, #92]	@ (80005f4 <CAN_Init+0xe4>)
 8000596:	2200      	movs	r2, #0
 8000598:	605a      	str	r2, [r3, #4]
	canfil2.FilterMaskIdHigh = 0;
 800059a:	4b16      	ldr	r3, [pc, #88]	@ (80005f4 <CAN_Init+0xe4>)
 800059c:	2200      	movs	r2, #0
 800059e:	609a      	str	r2, [r3, #8]
	canfil2.FilterMaskIdLow = 0;
 80005a0:	4b14      	ldr	r3, [pc, #80]	@ (80005f4 <CAN_Init+0xe4>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	60da      	str	r2, [r3, #12]
	canfil2.FilterScale = CAN_FILTERSCALE_32BIT;
 80005a6:	4b13      	ldr	r3, [pc, #76]	@ (80005f4 <CAN_Init+0xe4>)
 80005a8:	2201      	movs	r2, #1
 80005aa:	61da      	str	r2, [r3, #28]
	canfil2.FilterActivation = ENABLE;
 80005ac:	4b11      	ldr	r3, [pc, #68]	@ (80005f4 <CAN_Init+0xe4>)
 80005ae:	2201      	movs	r2, #1
 80005b0:	621a      	str	r2, [r3, #32]
	canfil2.SlaveStartFilterBank = 14;
 80005b2:	4b10      	ldr	r3, [pc, #64]	@ (80005f4 <CAN_Init+0xe4>)
 80005b4:	220e      	movs	r2, #14
 80005b6:	625a      	str	r2, [r3, #36]	@ 0x24
    HAL_CAN_ConfigFilter(&hcan2,&canfil2);
 80005b8:	490e      	ldr	r1, [pc, #56]	@ (80005f4 <CAN_Init+0xe4>)
 80005ba:	480f      	ldr	r0, [pc, #60]	@ (80005f8 <CAN_Init+0xe8>)
 80005bc:	f001 fa0c 	bl	80019d8 <HAL_CAN_ConfigFilter>

	TxHeader2.DLC = 8;
 80005c0:	4b0e      	ldr	r3, [pc, #56]	@ (80005fc <CAN_Init+0xec>)
 80005c2:	2208      	movs	r2, #8
 80005c4:	611a      	str	r2, [r3, #16]
	TxHeader2.IDE = CAN_ID_STD;
 80005c6:	4b0d      	ldr	r3, [pc, #52]	@ (80005fc <CAN_Init+0xec>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	609a      	str	r2, [r3, #8]
	TxHeader2.RTR = CAN_RTR_DATA;
 80005cc:	4b0b      	ldr	r3, [pc, #44]	@ (80005fc <CAN_Init+0xec>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	60da      	str	r2, [r3, #12]
	TxHeader2.StdId = 0x030;
 80005d2:	4b0a      	ldr	r3, [pc, #40]	@ (80005fc <CAN_Init+0xec>)
 80005d4:	2230      	movs	r2, #48	@ 0x30
 80005d6:	601a      	str	r2, [r3, #0]
	TxHeader2.ExtId = 0x02;
 80005d8:	4b08      	ldr	r3, [pc, #32]	@ (80005fc <CAN_Init+0xec>)
 80005da:	2202      	movs	r2, #2
 80005dc:	605a      	str	r2, [r3, #4]
	TxHeader2.TransmitGlobalTime = DISABLE;
 80005de:	4b07      	ldr	r3, [pc, #28]	@ (80005fc <CAN_Init+0xec>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	751a      	strb	r2, [r3, #20]
}
 80005e4:	bf00      	nop
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	20000250 	.word	0x20000250
 80005ec:	200003ac 	.word	0x200003ac
 80005f0:	200001e8 	.word	0x200001e8
 80005f4:	20000278 	.word	0x20000278
 80005f8:	200003d4 	.word	0x200003d4
 80005fc:	20000200 	.word	0x20000200

08000600 <CDC_Receive>:

//********************************************************************************************************
void CDC_Receive(uint8_t* Buf, uint32_t *Len){
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
 8000608:	6039      	str	r1, [r7, #0]

	if (Len && *Len > 0)
 800060a:	683b      	ldr	r3, [r7, #0]
 800060c:	2b00      	cmp	r3, #0
 800060e:	f000 80c0 	beq.w	8000792 <CDC_Receive+0x192>
 8000612:	683b      	ldr	r3, [r7, #0]
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	2b00      	cmp	r3, #0
 8000618:	f000 80bb 	beq.w	8000792 <CDC_Receive+0x192>
	    {
		switch(Buf[0])
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	3b4f      	subs	r3, #79	@ 0x4f
 8000622:	2b27      	cmp	r3, #39	@ 0x27
 8000624:	f200 80b5 	bhi.w	8000792 <CDC_Receive+0x192>
 8000628:	a201      	add	r2, pc, #4	@ (adr r2, 8000630 <CDC_Receive+0x30>)
 800062a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800062e:	bf00      	nop
 8000630:	0800074d 	.word	0x0800074d
 8000634:	08000793 	.word	0x08000793
 8000638:	08000793 	.word	0x08000793
 800063c:	08000793 	.word	0x08000793
 8000640:	080006ff 	.word	0x080006ff
 8000644:	08000739 	.word	0x08000739
 8000648:	08000793 	.word	0x08000793
 800064c:	080006d1 	.word	0x080006d1
 8000650:	08000793 	.word	0x08000793
 8000654:	08000793 	.word	0x08000793
 8000658:	08000793 	.word	0x08000793
 800065c:	08000793 	.word	0x08000793
 8000660:	08000793 	.word	0x08000793
 8000664:	08000793 	.word	0x08000793
 8000668:	08000793 	.word	0x08000793
 800066c:	08000793 	.word	0x08000793
 8000670:	08000793 	.word	0x08000793
 8000674:	08000793 	.word	0x08000793
 8000678:	08000793 	.word	0x08000793
 800067c:	08000793 	.word	0x08000793
 8000680:	08000793 	.word	0x08000793
 8000684:	08000793 	.word	0x08000793
 8000688:	08000793 	.word	0x08000793
 800068c:	08000793 	.word	0x08000793
 8000690:	08000793 	.word	0x08000793
 8000694:	08000793 	.word	0x08000793
 8000698:	08000793 	.word	0x08000793
 800069c:	08000793 	.word	0x08000793
 80006a0:	08000793 	.word	0x08000793
 80006a4:	08000793 	.word	0x08000793
 80006a8:	08000793 	.word	0x08000793
 80006ac:	08000793 	.word	0x08000793
 80006b0:	08000793 	.word	0x08000793
 80006b4:	08000793 	.word	0x08000793
 80006b8:	08000793 	.word	0x08000793
 80006bc:	08000793 	.word	0x08000793
 80006c0:	08000793 	.word	0x08000793
 80006c4:	08000743 	.word	0x08000743
 80006c8:	08000793 	.word	0x08000793
 80006cc:	080006ef 	.word	0x080006ef
		{
		   case 'V':

		     switch(Buf[1])
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	3301      	adds	r3, #1
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	2b53      	cmp	r3, #83	@ 0x53
 80006d8:	d104      	bne.n	80006e4 <CDC_Receive+0xe4>
		     {
				case 'S':
			    // Envia a resposta de volta ao PC
				CDC_Transmit_FS((uint8_t*)"SFFFFFFFFFFFFFFFF\r", 18);
 80006da:	2112      	movs	r1, #18
 80006dc:	482f      	ldr	r0, [pc, #188]	@ (800079c <CDC_Receive+0x19c>)
 80006de:	f007 f89f 	bl	8007820 <CDC_Transmit_FS>
				break;
 80006e2:	bf00      	nop
			 }

		     // Envia a resposta de volta ao PC
		     CDC_Transmit_FS((uint8_t*)"VF_26_03_2019\r", 15);
 80006e4:	210f      	movs	r1, #15
 80006e6:	482e      	ldr	r0, [pc, #184]	@ (80007a0 <CDC_Receive+0x1a0>)
 80006e8:	f007 f89a 	bl	8007820 <CDC_Transmit_FS>
		   break;
 80006ec:	e051      	b.n	8000792 <CDC_Receive+0x192>

		   case 'v':
		   // Envia a resposta de volta ao PC
		   alertValue = 0x07;
 80006ee:	4b2d      	ldr	r3, [pc, #180]	@ (80007a4 <CDC_Receive+0x1a4>)
 80006f0:	2207      	movs	r2, #7
 80006f2:	701a      	strb	r2, [r3, #0]
		   CDC_Transmit_FS(&alertValue, 1);
 80006f4:	2101      	movs	r1, #1
 80006f6:	482b      	ldr	r0, [pc, #172]	@ (80007a4 <CDC_Receive+0x1a4>)
 80006f8:	f007 f892 	bl	8007820 <CDC_Transmit_FS>
		   break;
 80006fc:	e049      	b.n	8000792 <CDC_Receive+0x192>

		   case 'S':

		   	   switch(Buf[1])
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	3301      	adds	r3, #1
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	2b31      	cmp	r3, #49	@ 0x31
 8000706:	d002      	beq.n	800070e <CDC_Receive+0x10e>
 8000708:	2b32      	cmp	r3, #50	@ 0x32
 800070a:	d008      	beq.n	800071e <CDC_Receive+0x11e>
 800070c:	e00f      	b.n	800072e <CDC_Receive+0x12e>
		   	   {
		   		   case '1':
		   		   CAN1_SetBaud (&hcan1,Buf[2]);
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	3302      	adds	r3, #2
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	4619      	mov	r1, r3
 8000716:	4824      	ldr	r0, [pc, #144]	@ (80007a8 <CDC_Receive+0x1a8>)
 8000718:	f000 f84c 	bl	80007b4 <CAN1_SetBaud>
		   		   break;
 800071c:	e007      	b.n	800072e <CDC_Receive+0x12e>

		   		   case '2':
		   		   CAN2_SetBaud (&hcan2,Buf[2]);
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	3302      	adds	r3, #2
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	4619      	mov	r1, r3
 8000726:	4821      	ldr	r0, [pc, #132]	@ (80007ac <CDC_Receive+0x1ac>)
 8000728:	f000 f94c 	bl	80009c4 <CAN2_SetBaud>
		   		   break;
 800072c:	bf00      	nop

		   	   }
		   // Transmite a resposta de confirmação
		   CDC_Transmit_FS((uint8_t*)"\r", 1);
 800072e:	2101      	movs	r1, #1
 8000730:	481f      	ldr	r0, [pc, #124]	@ (80007b0 <CDC_Receive+0x1b0>)
 8000732:	f007 f875 	bl	8007820 <CDC_Transmit_FS>
		   break;
 8000736:	e02c      	b.n	8000792 <CDC_Receive+0x192>

		   case 'T':
			   SendCANMessageEXT(Buf, Len);
 8000738:	6839      	ldr	r1, [r7, #0]
 800073a:	6878      	ldr	r0, [r7, #4]
 800073c:	f000 fa4a 	bl	8000bd4 <SendCANMessageEXT>
		   break;
 8000740:	e027      	b.n	8000792 <CDC_Receive+0x192>

		   case 't':
			   SendCANMessageSTD(Buf, Len);
 8000742:	6839      	ldr	r1, [r7, #0]
 8000744:	6878      	ldr	r0, [r7, #4]
 8000746:	f000 faf7 	bl	8000d38 <SendCANMessageSTD>
		   break;
 800074a:	e022      	b.n	8000792 <CDC_Receive+0x192>

		   case 'O':

			   switch(Buf[1])
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	3301      	adds	r3, #1
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	2b31      	cmp	r3, #49	@ 0x31
 8000754:	d002      	beq.n	800075c <CDC_Receive+0x15c>
 8000756:	2b32      	cmp	r3, #50	@ 0x32
 8000758:	d00b      	beq.n	8000772 <CDC_Receive+0x172>
 800075a:	e015      	b.n	8000788 <CDC_Receive+0x188>
			   {
			   		case '1':
		   	        //ticStartLog = HAL_GetTick();
			        HAL_CAN_Init(&hcan1);
 800075c:	4812      	ldr	r0, [pc, #72]	@ (80007a8 <CDC_Receive+0x1a8>)
 800075e:	f001 f83f 	bl	80017e0 <HAL_CAN_Init>
			        HAL_CAN_Start(&hcan1);
 8000762:	4811      	ldr	r0, [pc, #68]	@ (80007a8 <CDC_Receive+0x1a8>)
 8000764:	f001 fa18 	bl	8001b98 <HAL_CAN_Start>
                    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000768:	2102      	movs	r1, #2
 800076a:	480f      	ldr	r0, [pc, #60]	@ (80007a8 <CDC_Receive+0x1a8>)
 800076c:	f001 fcb8 	bl	80020e0 <HAL_CAN_ActivateNotification>
		   	        //htim5.Instance->CNT = 0;
		   	        //HAL_TIM_Base_Start(&htim5);
                    break;
 8000770:	e00a      	b.n	8000788 <CDC_Receive+0x188>

			   		case '2':
			   		//ticStartLog = HAL_GetTick();
			   		HAL_CAN_Init(&hcan2);
 8000772:	480e      	ldr	r0, [pc, #56]	@ (80007ac <CDC_Receive+0x1ac>)
 8000774:	f001 f834 	bl	80017e0 <HAL_CAN_Init>
			   		HAL_CAN_Start(&hcan2);
 8000778:	480c      	ldr	r0, [pc, #48]	@ (80007ac <CDC_Receive+0x1ac>)
 800077a:	f001 fa0d 	bl	8001b98 <HAL_CAN_Start>
			   		HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 800077e:	2102      	movs	r1, #2
 8000780:	480a      	ldr	r0, [pc, #40]	@ (80007ac <CDC_Receive+0x1ac>)
 8000782:	f001 fcad 	bl	80020e0 <HAL_CAN_ActivateNotification>
			   		//htim5.Instance->CNT = 0;
			   		//HAL_TIM_Base_Start(&htim5);
			   		break;
 8000786:	bf00      	nop
			   }
		   // Transmite a resposta de confirmação
		   CDC_Transmit_FS((uint8_t*)"\r", 1);
 8000788:	2101      	movs	r1, #1
 800078a:	4809      	ldr	r0, [pc, #36]	@ (80007b0 <CDC_Receive+0x1b0>)
 800078c:	f007 f848 	bl	8007820 <CDC_Transmit_FS>
		   break;
 8000790:	bf00      	nop
		   }
	    }
}
 8000792:	bf00      	nop
 8000794:	3708      	adds	r7, #8
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	08008ad8 	.word	0x08008ad8
 80007a0:	08008aec 	.word	0x08008aec
 80007a4:	200003a8 	.word	0x200003a8
 80007a8:	200003ac 	.word	0x200003ac
 80007ac:	200003d4 	.word	0x200003d4
 80007b0:	08008afc 	.word	0x08008afc

080007b4 <CAN1_SetBaud>:

//********************************************************************************************************
void CAN1_SetBaud(CAN_HandleTypeDef *hcan, uint8_t Buf) {
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
 80007bc:	460b      	mov	r3, r1
 80007be:	70fb      	strb	r3, [r7, #3]

    HAL_CAN_Stop(&hcan1);  // Para a interface CAN1
 80007c0:	487f      	ldr	r0, [pc, #508]	@ (80009c0 <CAN1_SetBaud+0x20c>)
 80007c2:	f001 fa2d 	bl	8001c20 <HAL_CAN_Stop>
   // HAL_CAN_Stop(&hcan2);  // Para a interface CAN2

    switch (Buf) {
 80007c6:	78fb      	ldrb	r3, [r7, #3]
 80007c8:	3b31      	subs	r3, #49	@ 0x31
 80007ca:	2b13      	cmp	r3, #19
 80007cc:	f200 80ec 	bhi.w	80009a8 <CAN1_SetBaud+0x1f4>
 80007d0:	a201      	add	r2, pc, #4	@ (adr r2, 80007d8 <CAN1_SetBaud+0x24>)
 80007d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007d6:	bf00      	nop
 80007d8:	08000829 	.word	0x08000829
 80007dc:	08000847 	.word	0x08000847
 80007e0:	08000865 	.word	0x08000865
 80007e4:	08000883 	.word	0x08000883
 80007e8:	0800089f 	.word	0x0800089f
 80007ec:	080008d7 	.word	0x080008d7
 80007f0:	080008f5 	.word	0x080008f5
 80007f4:	08000913 	.word	0x08000913
 80007f8:	08000931 	.word	0x08000931
 80007fc:	080009a9 	.word	0x080009a9
 8000800:	080009a9 	.word	0x080009a9
 8000804:	080009a9 	.word	0x080009a9
 8000808:	080009a9 	.word	0x080009a9
 800080c:	080009a9 	.word	0x080009a9
 8000810:	080009a9 	.word	0x080009a9
 8000814:	080009a9 	.word	0x080009a9
 8000818:	0800094f 	.word	0x0800094f
 800081c:	0800096d 	.word	0x0800096d
 8000820:	0800098b 	.word	0x0800098b
 8000824:	080008bb 	.word	0x080008bb
        // 10k
        case '1':
            hcan1.Init.Prescaler = 13;
 8000828:	4b65      	ldr	r3, [pc, #404]	@ (80009c0 <CAN1_SetBaud+0x20c>)
 800082a:	220d      	movs	r2, #13
 800082c:	605a      	str	r2, [r3, #4]
            hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800082e:	4b64      	ldr	r3, [pc, #400]	@ (80009c0 <CAN1_SetBaud+0x20c>)
 8000830:	2200      	movs	r2, #0
 8000832:	60da      	str	r2, [r3, #12]
            hcan1.Init.TimeSeg1 = CAN_BS1_16TQ;
 8000834:	4b62      	ldr	r3, [pc, #392]	@ (80009c0 <CAN1_SetBaud+0x20c>)
 8000836:	f44f 2270 	mov.w	r2, #983040	@ 0xf0000
 800083a:	611a      	str	r2, [r3, #16]
            hcan1.Init.TimeSeg2 = CAN_BS2_8TQ;
 800083c:	4b60      	ldr	r3, [pc, #384]	@ (80009c0 <CAN1_SetBaud+0x20c>)
 800083e:	f44f 02e0 	mov.w	r2, #7340032	@ 0x700000
 8000842:	615a      	str	r2, [r3, #20]
            break;
 8000844:	e0b0      	b.n	80009a8 <CAN1_SetBaud+0x1f4>

        // 33.333k
        case '2':
        	hcan1.Init.Prescaler = 72;
 8000846:	4b5e      	ldr	r3, [pc, #376]	@ (80009c0 <CAN1_SetBaud+0x20c>)
 8000848:	2248      	movs	r2, #72	@ 0x48
 800084a:	605a      	str	r2, [r3, #4]
        	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800084c:	4b5c      	ldr	r3, [pc, #368]	@ (80009c0 <CAN1_SetBaud+0x20c>)
 800084e:	2200      	movs	r2, #0
 8000850:	60da      	str	r2, [r3, #12]
        	hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 8000852:	4b5b      	ldr	r3, [pc, #364]	@ (80009c0 <CAN1_SetBaud+0x20c>)
 8000854:	f44f 22a0 	mov.w	r2, #327680	@ 0x50000
 8000858:	611a      	str	r2, [r3, #16]
        	hcan1.Init.TimeSeg2 = CAN_BS2_8TQ;
 800085a:	4b59      	ldr	r3, [pc, #356]	@ (80009c0 <CAN1_SetBaud+0x20c>)
 800085c:	f44f 02e0 	mov.w	r2, #7340032	@ 0x700000
 8000860:	615a      	str	r2, [r3, #20]
        break;
 8000862:	e0a1      	b.n	80009a8 <CAN1_SetBaud+0x1f4>

        // 50k
        case '3':
        	hcan1.Init.Prescaler = 72;
 8000864:	4b56      	ldr	r3, [pc, #344]	@ (80009c0 <CAN1_SetBaud+0x20c>)
 8000866:	2248      	movs	r2, #72	@ 0x48
 8000868:	605a      	str	r2, [r3, #4]
        	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800086a:	4b55      	ldr	r3, [pc, #340]	@ (80009c0 <CAN1_SetBaud+0x20c>)
 800086c:	2200      	movs	r2, #0
 800086e:	60da      	str	r2, [r3, #12]
        	hcan1.Init.TimeSeg1 = CAN_BS1_5TQ;
 8000870:	4b53      	ldr	r3, [pc, #332]	@ (80009c0 <CAN1_SetBaud+0x20c>)
 8000872:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000876:	611a      	str	r2, [r3, #16]
        	hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000878:	4b51      	ldr	r3, [pc, #324]	@ (80009c0 <CAN1_SetBaud+0x20c>)
 800087a:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 800087e:	615a      	str	r2, [r3, #20]
            break;
 8000880:	e092      	b.n	80009a8 <CAN1_SetBaud+0x1f4>

        // 62.500k
        case '4':
        	hcan1.Init.Prescaler = 144;
 8000882:	4b4f      	ldr	r3, [pc, #316]	@ (80009c0 <CAN1_SetBaud+0x20c>)
 8000884:	2290      	movs	r2, #144	@ 0x90
 8000886:	605a      	str	r2, [r3, #4]
        	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000888:	4b4d      	ldr	r3, [pc, #308]	@ (80009c0 <CAN1_SetBaud+0x20c>)
 800088a:	2200      	movs	r2, #0
 800088c:	60da      	str	r2, [r3, #12]
        	hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 800088e:	4b4c      	ldr	r3, [pc, #304]	@ (80009c0 <CAN1_SetBaud+0x20c>)
 8000890:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000894:	611a      	str	r2, [r3, #16]
        	hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000896:	4b4a      	ldr	r3, [pc, #296]	@ (80009c0 <CAN1_SetBaud+0x20c>)
 8000898:	2200      	movs	r2, #0
 800089a:	615a      	str	r2, [r3, #20]

        break;
 800089c:	e084      	b.n	80009a8 <CAN1_SetBaud+0x1f4>

        // 83.333k
        case '5':
        	hcan1.Init.Prescaler = 54;
 800089e:	4b48      	ldr	r3, [pc, #288]	@ (80009c0 <CAN1_SetBaud+0x20c>)
 80008a0:	2236      	movs	r2, #54	@ 0x36
 80008a2:	605a      	str	r2, [r3, #4]
        	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80008a4:	4b46      	ldr	r3, [pc, #280]	@ (80009c0 <CAN1_SetBaud+0x20c>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	60da      	str	r2, [r3, #12]
        	hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 80008aa:	4b45      	ldr	r3, [pc, #276]	@ (80009c0 <CAN1_SetBaud+0x20c>)
 80008ac:	f44f 22a0 	mov.w	r2, #327680	@ 0x50000
 80008b0:	611a      	str	r2, [r3, #16]
        	hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80008b2:	4b43      	ldr	r3, [pc, #268]	@ (80009c0 <CAN1_SetBaud+0x20c>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	615a      	str	r2, [r3, #20]
        break;
 80008b8:	e076      	b.n	80009a8 <CAN1_SetBaud+0x1f4>

        // 95.238k
        case 'D':
        	hcan1.Init.Prescaler = 42;
 80008ba:	4b41      	ldr	r3, [pc, #260]	@ (80009c0 <CAN1_SetBaud+0x20c>)
 80008bc:	222a      	movs	r2, #42	@ 0x2a
 80008be:	605a      	str	r2, [r3, #4]
        	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80008c0:	4b3f      	ldr	r3, [pc, #252]	@ (80009c0 <CAN1_SetBaud+0x20c>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	60da      	str	r2, [r3, #12]
        	hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 80008c6:	4b3e      	ldr	r3, [pc, #248]	@ (80009c0 <CAN1_SetBaud+0x20c>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	611a      	str	r2, [r3, #16]
        	hcan1.Init.TimeSeg2 = CAN_BS2_7TQ;
 80008cc:	4b3c      	ldr	r3, [pc, #240]	@ (80009c0 <CAN1_SetBaud+0x20c>)
 80008ce:	f44f 02c0 	mov.w	r2, #6291456	@ 0x600000
 80008d2:	615a      	str	r2, [r3, #20]
        break;
 80008d4:	e068      	b.n	80009a8 <CAN1_SetBaud+0x1f4>

        // 100k
        case '6':
        	hcan1.Init.Prescaler = 36;
 80008d6:	4b3a      	ldr	r3, [pc, #232]	@ (80009c0 <CAN1_SetBaud+0x20c>)
 80008d8:	2224      	movs	r2, #36	@ 0x24
 80008da:	605a      	str	r2, [r3, #4]
        	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80008dc:	4b38      	ldr	r3, [pc, #224]	@ (80009c0 <CAN1_SetBaud+0x20c>)
 80008de:	2200      	movs	r2, #0
 80008e0:	60da      	str	r2, [r3, #12]
        	hcan1.Init.TimeSeg1 = CAN_BS1_5TQ;
 80008e2:	4b37      	ldr	r3, [pc, #220]	@ (80009c0 <CAN1_SetBaud+0x20c>)
 80008e4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80008e8:	611a      	str	r2, [r3, #16]
        	hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 80008ea:	4b35      	ldr	r3, [pc, #212]	@ (80009c0 <CAN1_SetBaud+0x20c>)
 80008ec:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 80008f0:	615a      	str	r2, [r3, #20]
            break;
 80008f2:	e059      	b.n	80009a8 <CAN1_SetBaud+0x1f4>

        // 125k
        case '7':
        	hcan1.Init.Prescaler = 32;
 80008f4:	4b32      	ldr	r3, [pc, #200]	@ (80009c0 <CAN1_SetBaud+0x20c>)
 80008f6:	2220      	movs	r2, #32
 80008f8:	605a      	str	r2, [r3, #4]
        	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80008fa:	4b31      	ldr	r3, [pc, #196]	@ (80009c0 <CAN1_SetBaud+0x20c>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	60da      	str	r2, [r3, #12]
        	hcan1.Init.TimeSeg1 = CAN_BS1_4TQ;
 8000900:	4b2f      	ldr	r3, [pc, #188]	@ (80009c0 <CAN1_SetBaud+0x20c>)
 8000902:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000906:	611a      	str	r2, [r3, #16]
        	hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000908:	4b2d      	ldr	r3, [pc, #180]	@ (80009c0 <CAN1_SetBaud+0x20c>)
 800090a:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 800090e:	615a      	str	r2, [r3, #20]
            break;
 8000910:	e04a      	b.n	80009a8 <CAN1_SetBaud+0x1f4>

        // 250k
        case '8':
        	hcan1.Init.Prescaler = 16;
 8000912:	4b2b      	ldr	r3, [pc, #172]	@ (80009c0 <CAN1_SetBaud+0x20c>)
 8000914:	2210      	movs	r2, #16
 8000916:	605a      	str	r2, [r3, #4]
        	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000918:	4b29      	ldr	r3, [pc, #164]	@ (80009c0 <CAN1_SetBaud+0x20c>)
 800091a:	2200      	movs	r2, #0
 800091c:	60da      	str	r2, [r3, #12]
        	hcan1.Init.TimeSeg1 = CAN_BS1_4TQ;
 800091e:	4b28      	ldr	r3, [pc, #160]	@ (80009c0 <CAN1_SetBaud+0x20c>)
 8000920:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000924:	611a      	str	r2, [r3, #16]
        	hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000926:	4b26      	ldr	r3, [pc, #152]	@ (80009c0 <CAN1_SetBaud+0x20c>)
 8000928:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 800092c:	615a      	str	r2, [r3, #20]
            break;
 800092e:	e03b      	b.n	80009a8 <CAN1_SetBaud+0x1f4>

        // 400k
        case '9':
        	hcan1.Init.Prescaler = 18;
 8000930:	4b23      	ldr	r3, [pc, #140]	@ (80009c0 <CAN1_SetBaud+0x20c>)
 8000932:	2212      	movs	r2, #18
 8000934:	605a      	str	r2, [r3, #4]
        	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000936:	4b22      	ldr	r3, [pc, #136]	@ (80009c0 <CAN1_SetBaud+0x20c>)
 8000938:	2200      	movs	r2, #0
 800093a:	60da      	str	r2, [r3, #12]
        	hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 800093c:	4b20      	ldr	r3, [pc, #128]	@ (80009c0 <CAN1_SetBaud+0x20c>)
 800093e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000942:	611a      	str	r2, [r3, #16]
        	hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000944:	4b1e      	ldr	r3, [pc, #120]	@ (80009c0 <CAN1_SetBaud+0x20c>)
 8000946:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800094a:	615a      	str	r2, [r3, #20]
        break;
 800094c:	e02c      	b.n	80009a8 <CAN1_SetBaud+0x1f4>

        // 500k
        case 'A':
        	hcan1.Init.Prescaler = 8;
 800094e:	4b1c      	ldr	r3, [pc, #112]	@ (80009c0 <CAN1_SetBaud+0x20c>)
 8000950:	2208      	movs	r2, #8
 8000952:	605a      	str	r2, [r3, #4]
        	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000954:	4b1a      	ldr	r3, [pc, #104]	@ (80009c0 <CAN1_SetBaud+0x20c>)
 8000956:	2200      	movs	r2, #0
 8000958:	60da      	str	r2, [r3, #12]
        	hcan1.Init.TimeSeg1 = CAN_BS1_4TQ;
 800095a:	4b19      	ldr	r3, [pc, #100]	@ (80009c0 <CAN1_SetBaud+0x20c>)
 800095c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000960:	611a      	str	r2, [r3, #16]
        	hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000962:	4b17      	ldr	r3, [pc, #92]	@ (80009c0 <CAN1_SetBaud+0x20c>)
 8000964:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 8000968:	615a      	str	r2, [r3, #20]
            break;
 800096a:	e01d      	b.n	80009a8 <CAN1_SetBaud+0x1f4>

        // 800k
        case 'B':
        	hcan1.Init.Prescaler = 5;
 800096c:	4b14      	ldr	r3, [pc, #80]	@ (80009c0 <CAN1_SetBaud+0x20c>)
 800096e:	2205      	movs	r2, #5
 8000970:	605a      	str	r2, [r3, #4]
        	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000972:	4b13      	ldr	r3, [pc, #76]	@ (80009c0 <CAN1_SetBaud+0x20c>)
 8000974:	2200      	movs	r2, #0
 8000976:	60da      	str	r2, [r3, #12]
        	hcan1.Init.TimeSeg1 = CAN_BS1_4TQ;
 8000978:	4b11      	ldr	r3, [pc, #68]	@ (80009c0 <CAN1_SetBaud+0x20c>)
 800097a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800097e:	611a      	str	r2, [r3, #16]
        	hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000980:	4b0f      	ldr	r3, [pc, #60]	@ (80009c0 <CAN1_SetBaud+0x20c>)
 8000982:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 8000986:	615a      	str	r2, [r3, #20]
            break;
 8000988:	e00e      	b.n	80009a8 <CAN1_SetBaud+0x1f4>

        // 1000k
        case 'C':
        	hcan1.Init.Prescaler = 4;
 800098a:	4b0d      	ldr	r3, [pc, #52]	@ (80009c0 <CAN1_SetBaud+0x20c>)
 800098c:	2204      	movs	r2, #4
 800098e:	605a      	str	r2, [r3, #4]
        	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000990:	4b0b      	ldr	r3, [pc, #44]	@ (80009c0 <CAN1_SetBaud+0x20c>)
 8000992:	2200      	movs	r2, #0
 8000994:	60da      	str	r2, [r3, #12]
        	hcan1.Init.TimeSeg1 = CAN_BS1_4TQ;
 8000996:	4b0a      	ldr	r3, [pc, #40]	@ (80009c0 <CAN1_SetBaud+0x20c>)
 8000998:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800099c:	611a      	str	r2, [r3, #16]
        	hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 800099e:	4b08      	ldr	r3, [pc, #32]	@ (80009c0 <CAN1_SetBaud+0x20c>)
 80009a0:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 80009a4:	615a      	str	r2, [r3, #20]
            break;
 80009a6:	bf00      	nop
    }

    // Atualiza os novos parâmetros e reinicia a interface CAN
    HAL_CAN_Init(hcan);
 80009a8:	6878      	ldr	r0, [r7, #4]
 80009aa:	f000 ff19 	bl	80017e0 <HAL_CAN_Init>
    HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 80009ae:	2102      	movs	r1, #2
 80009b0:	6878      	ldr	r0, [r7, #4]
 80009b2:	f001 fb95 	bl	80020e0 <HAL_CAN_ActivateNotification>
}
 80009b6:	bf00      	nop
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	200003ac 	.word	0x200003ac

080009c4 <CAN2_SetBaud>:

//********************************************************************************************************
void CAN2_SetBaud(CAN_HandleTypeDef *hcan, uint8_t Buf) {
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
 80009cc:	460b      	mov	r3, r1
 80009ce:	70fb      	strb	r3, [r7, #3]

   // HAL_CAN_Stop(&hcan1);  // Para a interface CAN1
    HAL_CAN_Stop(&hcan2);  // Para a interface CAN2
 80009d0:	487f      	ldr	r0, [pc, #508]	@ (8000bd0 <CAN2_SetBaud+0x20c>)
 80009d2:	f001 f925 	bl	8001c20 <HAL_CAN_Stop>

    switch (Buf) {
 80009d6:	78fb      	ldrb	r3, [r7, #3]
 80009d8:	3b31      	subs	r3, #49	@ 0x31
 80009da:	2b13      	cmp	r3, #19
 80009dc:	f200 80ec 	bhi.w	8000bb8 <CAN2_SetBaud+0x1f4>
 80009e0:	a201      	add	r2, pc, #4	@ (adr r2, 80009e8 <CAN2_SetBaud+0x24>)
 80009e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009e6:	bf00      	nop
 80009e8:	08000a39 	.word	0x08000a39
 80009ec:	08000a57 	.word	0x08000a57
 80009f0:	08000a75 	.word	0x08000a75
 80009f4:	08000a93 	.word	0x08000a93
 80009f8:	08000aaf 	.word	0x08000aaf
 80009fc:	08000ae7 	.word	0x08000ae7
 8000a00:	08000b05 	.word	0x08000b05
 8000a04:	08000b23 	.word	0x08000b23
 8000a08:	08000b41 	.word	0x08000b41
 8000a0c:	08000bb9 	.word	0x08000bb9
 8000a10:	08000bb9 	.word	0x08000bb9
 8000a14:	08000bb9 	.word	0x08000bb9
 8000a18:	08000bb9 	.word	0x08000bb9
 8000a1c:	08000bb9 	.word	0x08000bb9
 8000a20:	08000bb9 	.word	0x08000bb9
 8000a24:	08000bb9 	.word	0x08000bb9
 8000a28:	08000b5f 	.word	0x08000b5f
 8000a2c:	08000b7d 	.word	0x08000b7d
 8000a30:	08000b9b 	.word	0x08000b9b
 8000a34:	08000acb 	.word	0x08000acb
        // 10k
        case '1':
            hcan2.Init.Prescaler = 13;
 8000a38:	4b65      	ldr	r3, [pc, #404]	@ (8000bd0 <CAN2_SetBaud+0x20c>)
 8000a3a:	220d      	movs	r2, #13
 8000a3c:	605a      	str	r2, [r3, #4]
            hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a3e:	4b64      	ldr	r3, [pc, #400]	@ (8000bd0 <CAN2_SetBaud+0x20c>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	60da      	str	r2, [r3, #12]
            hcan2.Init.TimeSeg1 = CAN_BS1_16TQ;
 8000a44:	4b62      	ldr	r3, [pc, #392]	@ (8000bd0 <CAN2_SetBaud+0x20c>)
 8000a46:	f44f 2270 	mov.w	r2, #983040	@ 0xf0000
 8000a4a:	611a      	str	r2, [r3, #16]
            hcan2.Init.TimeSeg2 = CAN_BS2_8TQ;
 8000a4c:	4b60      	ldr	r3, [pc, #384]	@ (8000bd0 <CAN2_SetBaud+0x20c>)
 8000a4e:	f44f 02e0 	mov.w	r2, #7340032	@ 0x700000
 8000a52:	615a      	str	r2, [r3, #20]
            break;
 8000a54:	e0b0      	b.n	8000bb8 <CAN2_SetBaud+0x1f4>

        // 33.333k
        case '2':
        	hcan2.Init.Prescaler = 72;
 8000a56:	4b5e      	ldr	r3, [pc, #376]	@ (8000bd0 <CAN2_SetBaud+0x20c>)
 8000a58:	2248      	movs	r2, #72	@ 0x48
 8000a5a:	605a      	str	r2, [r3, #4]
        	hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a5c:	4b5c      	ldr	r3, [pc, #368]	@ (8000bd0 <CAN2_SetBaud+0x20c>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	60da      	str	r2, [r3, #12]
        	hcan2.Init.TimeSeg1 = CAN_BS1_6TQ;
 8000a62:	4b5b      	ldr	r3, [pc, #364]	@ (8000bd0 <CAN2_SetBaud+0x20c>)
 8000a64:	f44f 22a0 	mov.w	r2, #327680	@ 0x50000
 8000a68:	611a      	str	r2, [r3, #16]
            hcan2.Init.TimeSeg2 = CAN_BS2_8TQ;
 8000a6a:	4b59      	ldr	r3, [pc, #356]	@ (8000bd0 <CAN2_SetBaud+0x20c>)
 8000a6c:	f44f 02e0 	mov.w	r2, #7340032	@ 0x700000
 8000a70:	615a      	str	r2, [r3, #20]
        break;
 8000a72:	e0a1      	b.n	8000bb8 <CAN2_SetBaud+0x1f4>

        // 50k
        case '3':
        	hcan2.Init.Prescaler = 72;
 8000a74:	4b56      	ldr	r3, [pc, #344]	@ (8000bd0 <CAN2_SetBaud+0x20c>)
 8000a76:	2248      	movs	r2, #72	@ 0x48
 8000a78:	605a      	str	r2, [r3, #4]
        	hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a7a:	4b55      	ldr	r3, [pc, #340]	@ (8000bd0 <CAN2_SetBaud+0x20c>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	60da      	str	r2, [r3, #12]
        	hcan2.Init.TimeSeg1 = CAN_BS1_5TQ;
 8000a80:	4b53      	ldr	r3, [pc, #332]	@ (8000bd0 <CAN2_SetBaud+0x20c>)
 8000a82:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000a86:	611a      	str	r2, [r3, #16]
        	hcan2.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000a88:	4b51      	ldr	r3, [pc, #324]	@ (8000bd0 <CAN2_SetBaud+0x20c>)
 8000a8a:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 8000a8e:	615a      	str	r2, [r3, #20]
            break;
 8000a90:	e092      	b.n	8000bb8 <CAN2_SetBaud+0x1f4>

        // 62.500k
        case '4':
        	hcan2.Init.Prescaler = 144;
 8000a92:	4b4f      	ldr	r3, [pc, #316]	@ (8000bd0 <CAN2_SetBaud+0x20c>)
 8000a94:	2290      	movs	r2, #144	@ 0x90
 8000a96:	605a      	str	r2, [r3, #4]
        	hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a98:	4b4d      	ldr	r3, [pc, #308]	@ (8000bd0 <CAN2_SetBaud+0x20c>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	60da      	str	r2, [r3, #12]
        	hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000a9e:	4b4c      	ldr	r3, [pc, #304]	@ (8000bd0 <CAN2_SetBaud+0x20c>)
 8000aa0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000aa4:	611a      	str	r2, [r3, #16]
        	hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000aa6:	4b4a      	ldr	r3, [pc, #296]	@ (8000bd0 <CAN2_SetBaud+0x20c>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	615a      	str	r2, [r3, #20]
        break;
 8000aac:	e084      	b.n	8000bb8 <CAN2_SetBaud+0x1f4>

        // 83.333k
        case '5':
        	hcan2.Init.Prescaler = 54;
 8000aae:	4b48      	ldr	r3, [pc, #288]	@ (8000bd0 <CAN2_SetBaud+0x20c>)
 8000ab0:	2236      	movs	r2, #54	@ 0x36
 8000ab2:	605a      	str	r2, [r3, #4]
        	hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000ab4:	4b46      	ldr	r3, [pc, #280]	@ (8000bd0 <CAN2_SetBaud+0x20c>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	60da      	str	r2, [r3, #12]
        	hcan2.Init.TimeSeg1 = CAN_BS1_6TQ;
 8000aba:	4b45      	ldr	r3, [pc, #276]	@ (8000bd0 <CAN2_SetBaud+0x20c>)
 8000abc:	f44f 22a0 	mov.w	r2, #327680	@ 0x50000
 8000ac0:	611a      	str	r2, [r3, #16]
        	hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000ac2:	4b43      	ldr	r3, [pc, #268]	@ (8000bd0 <CAN2_SetBaud+0x20c>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	615a      	str	r2, [r3, #20]
        break;
 8000ac8:	e076      	b.n	8000bb8 <CAN2_SetBaud+0x1f4>

        // 95.238k
        case 'D':
        	hcan2.Init.Prescaler = 42;
 8000aca:	4b41      	ldr	r3, [pc, #260]	@ (8000bd0 <CAN2_SetBaud+0x20c>)
 8000acc:	222a      	movs	r2, #42	@ 0x2a
 8000ace:	605a      	str	r2, [r3, #4]
        	hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000ad0:	4b3f      	ldr	r3, [pc, #252]	@ (8000bd0 <CAN2_SetBaud+0x20c>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	60da      	str	r2, [r3, #12]
        	hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000ad6:	4b3e      	ldr	r3, [pc, #248]	@ (8000bd0 <CAN2_SetBaud+0x20c>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	611a      	str	r2, [r3, #16]
        	hcan2.Init.TimeSeg2 = CAN_BS2_7TQ;
 8000adc:	4b3c      	ldr	r3, [pc, #240]	@ (8000bd0 <CAN2_SetBaud+0x20c>)
 8000ade:	f44f 02c0 	mov.w	r2, #6291456	@ 0x600000
 8000ae2:	615a      	str	r2, [r3, #20]
        break;
 8000ae4:	e068      	b.n	8000bb8 <CAN2_SetBaud+0x1f4>

        // 100k
        case '6':
        	hcan2.Init.Prescaler = 36;
 8000ae6:	4b3a      	ldr	r3, [pc, #232]	@ (8000bd0 <CAN2_SetBaud+0x20c>)
 8000ae8:	2224      	movs	r2, #36	@ 0x24
 8000aea:	605a      	str	r2, [r3, #4]
        	hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000aec:	4b38      	ldr	r3, [pc, #224]	@ (8000bd0 <CAN2_SetBaud+0x20c>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	60da      	str	r2, [r3, #12]
        	hcan2.Init.TimeSeg1 = CAN_BS1_5TQ;
 8000af2:	4b37      	ldr	r3, [pc, #220]	@ (8000bd0 <CAN2_SetBaud+0x20c>)
 8000af4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000af8:	611a      	str	r2, [r3, #16]
        	hcan2.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000afa:	4b35      	ldr	r3, [pc, #212]	@ (8000bd0 <CAN2_SetBaud+0x20c>)
 8000afc:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 8000b00:	615a      	str	r2, [r3, #20]
            break;
 8000b02:	e059      	b.n	8000bb8 <CAN2_SetBaud+0x1f4>

        // 125k
        case '7':
        	hcan2.Init.Prescaler = 32;
 8000b04:	4b32      	ldr	r3, [pc, #200]	@ (8000bd0 <CAN2_SetBaud+0x20c>)
 8000b06:	2220      	movs	r2, #32
 8000b08:	605a      	str	r2, [r3, #4]
        	hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000b0a:	4b31      	ldr	r3, [pc, #196]	@ (8000bd0 <CAN2_SetBaud+0x20c>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	60da      	str	r2, [r3, #12]
        	hcan2.Init.TimeSeg1 = CAN_BS1_4TQ;
 8000b10:	4b2f      	ldr	r3, [pc, #188]	@ (8000bd0 <CAN2_SetBaud+0x20c>)
 8000b12:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000b16:	611a      	str	r2, [r3, #16]
        	hcan2.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000b18:	4b2d      	ldr	r3, [pc, #180]	@ (8000bd0 <CAN2_SetBaud+0x20c>)
 8000b1a:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 8000b1e:	615a      	str	r2, [r3, #20]
            break;
 8000b20:	e04a      	b.n	8000bb8 <CAN2_SetBaud+0x1f4>

        // 250k
        case '8':
        	hcan2.Init.Prescaler = 16;
 8000b22:	4b2b      	ldr	r3, [pc, #172]	@ (8000bd0 <CAN2_SetBaud+0x20c>)
 8000b24:	2210      	movs	r2, #16
 8000b26:	605a      	str	r2, [r3, #4]
        	hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000b28:	4b29      	ldr	r3, [pc, #164]	@ (8000bd0 <CAN2_SetBaud+0x20c>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	60da      	str	r2, [r3, #12]
        	hcan2.Init.TimeSeg1 = CAN_BS1_4TQ;
 8000b2e:	4b28      	ldr	r3, [pc, #160]	@ (8000bd0 <CAN2_SetBaud+0x20c>)
 8000b30:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000b34:	611a      	str	r2, [r3, #16]
        	hcan2.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000b36:	4b26      	ldr	r3, [pc, #152]	@ (8000bd0 <CAN2_SetBaud+0x20c>)
 8000b38:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 8000b3c:	615a      	str	r2, [r3, #20]
            break;
 8000b3e:	e03b      	b.n	8000bb8 <CAN2_SetBaud+0x1f4>

        // 400k
        case '9':
        	hcan2.Init.Prescaler = 18;
 8000b40:	4b23      	ldr	r3, [pc, #140]	@ (8000bd0 <CAN2_SetBaud+0x20c>)
 8000b42:	2212      	movs	r2, #18
 8000b44:	605a      	str	r2, [r3, #4]
        	hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000b46:	4b22      	ldr	r3, [pc, #136]	@ (8000bd0 <CAN2_SetBaud+0x20c>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	60da      	str	r2, [r3, #12]
        	hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000b4c:	4b20      	ldr	r3, [pc, #128]	@ (8000bd0 <CAN2_SetBaud+0x20c>)
 8000b4e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000b52:	611a      	str	r2, [r3, #16]
        	hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000b54:	4b1e      	ldr	r3, [pc, #120]	@ (8000bd0 <CAN2_SetBaud+0x20c>)
 8000b56:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000b5a:	615a      	str	r2, [r3, #20]
        break;
 8000b5c:	e02c      	b.n	8000bb8 <CAN2_SetBaud+0x1f4>

        // 500k
        case 'A':
        	hcan2.Init.Prescaler = 8;
 8000b5e:	4b1c      	ldr	r3, [pc, #112]	@ (8000bd0 <CAN2_SetBaud+0x20c>)
 8000b60:	2208      	movs	r2, #8
 8000b62:	605a      	str	r2, [r3, #4]
        	hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000b64:	4b1a      	ldr	r3, [pc, #104]	@ (8000bd0 <CAN2_SetBaud+0x20c>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	60da      	str	r2, [r3, #12]
        	hcan2.Init.TimeSeg1 = CAN_BS1_4TQ;
 8000b6a:	4b19      	ldr	r3, [pc, #100]	@ (8000bd0 <CAN2_SetBaud+0x20c>)
 8000b6c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000b70:	611a      	str	r2, [r3, #16]
        	hcan2.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000b72:	4b17      	ldr	r3, [pc, #92]	@ (8000bd0 <CAN2_SetBaud+0x20c>)
 8000b74:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 8000b78:	615a      	str	r2, [r3, #20]
            break;
 8000b7a:	e01d      	b.n	8000bb8 <CAN2_SetBaud+0x1f4>

        // 800k
        case 'B':
        	hcan2.Init.Prescaler = 5;
 8000b7c:	4b14      	ldr	r3, [pc, #80]	@ (8000bd0 <CAN2_SetBaud+0x20c>)
 8000b7e:	2205      	movs	r2, #5
 8000b80:	605a      	str	r2, [r3, #4]
        	hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000b82:	4b13      	ldr	r3, [pc, #76]	@ (8000bd0 <CAN2_SetBaud+0x20c>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	60da      	str	r2, [r3, #12]
        	hcan2.Init.TimeSeg1 = CAN_BS1_4TQ;
 8000b88:	4b11      	ldr	r3, [pc, #68]	@ (8000bd0 <CAN2_SetBaud+0x20c>)
 8000b8a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000b8e:	611a      	str	r2, [r3, #16]
        	hcan2.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000b90:	4b0f      	ldr	r3, [pc, #60]	@ (8000bd0 <CAN2_SetBaud+0x20c>)
 8000b92:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 8000b96:	615a      	str	r2, [r3, #20]
            break;
 8000b98:	e00e      	b.n	8000bb8 <CAN2_SetBaud+0x1f4>

        // 1000k
        case 'C':
        	hcan2.Init.Prescaler = 4;
 8000b9a:	4b0d      	ldr	r3, [pc, #52]	@ (8000bd0 <CAN2_SetBaud+0x20c>)
 8000b9c:	2204      	movs	r2, #4
 8000b9e:	605a      	str	r2, [r3, #4]
        	hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000ba0:	4b0b      	ldr	r3, [pc, #44]	@ (8000bd0 <CAN2_SetBaud+0x20c>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	60da      	str	r2, [r3, #12]
        	hcan2.Init.TimeSeg1 = CAN_BS1_4TQ;
 8000ba6:	4b0a      	ldr	r3, [pc, #40]	@ (8000bd0 <CAN2_SetBaud+0x20c>)
 8000ba8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000bac:	611a      	str	r2, [r3, #16]
        	hcan2.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000bae:	4b08      	ldr	r3, [pc, #32]	@ (8000bd0 <CAN2_SetBaud+0x20c>)
 8000bb0:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 8000bb4:	615a      	str	r2, [r3, #20]
            break;
 8000bb6:	bf00      	nop
    }

    // Atualiza os novos parâmetros e reinicia a interface CAN
    HAL_CAN_Init(&hcan2);
 8000bb8:	4805      	ldr	r0, [pc, #20]	@ (8000bd0 <CAN2_SetBaud+0x20c>)
 8000bba:	f000 fe11 	bl	80017e0 <HAL_CAN_Init>
    HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000bbe:	2102      	movs	r1, #2
 8000bc0:	4803      	ldr	r0, [pc, #12]	@ (8000bd0 <CAN2_SetBaud+0x20c>)
 8000bc2:	f001 fa8d 	bl	80020e0 <HAL_CAN_ActivateNotification>
}
 8000bc6:	bf00      	nop
 8000bc8:	3708      	adds	r7, #8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	200003d4 	.word	0x200003d4

08000bd4 <SendCANMessageEXT>:

//********************************************************************************************************
void SendCANMessageEXT(uint8_t* Buf, uint32_t *Len) {
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b098      	sub	sp, #96	@ 0x60
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
 8000bdc:	6039      	str	r1, [r7, #0]

	 LED_TX_ON;
 8000bde:	2201      	movs	r2, #1
 8000be0:	2140      	movs	r1, #64	@ 0x40
 8000be2:	4852      	ldr	r0, [pc, #328]	@ (8000d2c <SendCANMessageEXT+0x158>)
 8000be4:	f001 fd34 	bl	8002650 <HAL_GPIO_WritePin>
	 // Valida o comprimento da mensagem
	 if (*Len < 24) {
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	2b17      	cmp	r3, #23
 8000bee:	f240 8099 	bls.w	8000d24 <SendCANMessageEXT+0x150>
	 // Mensagem inválida, encerra
		 return;
	 }

	 // Indentifica se é canal 1 ou 2
	 uint8_t canal = Buf[1] - '0'; // 1 para CAN1 e 2 para CAN2
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	3301      	adds	r3, #1
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	3b30      	subs	r3, #48	@ 0x30
 8000bfa:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

	 // Extrai o ID
	 char idStr[9];
	 strncpy(idStr, (char*)(Buf + 2), 8);
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	1c99      	adds	r1, r3, #2
 8000c02:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000c06:	2208      	movs	r2, #8
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f007 fabd 	bl	8008188 <strncpy>
	 idStr[8] = '\0';
 8000c0e:	2300      	movs	r3, #0
 8000c10:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
	 uint32_t id = (uint32_t)strtol(idStr, NULL, 16); // Converte para hexadecimal
 8000c14:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000c18:	2210      	movs	r2, #16
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f007 fa81 	bl	8008124 <strtol>
 8000c22:	4603      	mov	r3, r0
 8000c24:	657b      	str	r3, [r7, #84]	@ 0x54

	 // Extrai o DLC
	 uint8_t dlc = Buf[10] - '0';
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	330a      	adds	r3, #10
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	3b30      	subs	r3, #48	@ 0x30
 8000c2e:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53

	 // Extrai os dados
	 uint8_t TxData[8] = {0}; // Inicializa o array para evitar valores indesejados
 8000c32:	2300      	movs	r3, #0
 8000c34:	643b      	str	r3, [r7, #64]	@ 0x40
 8000c36:	2300      	movs	r3, #0
 8000c38:	647b      	str	r3, [r7, #68]	@ 0x44
	 for (int i = 0; i < dlc; i++) {
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000c3e:	e023      	b.n	8000c88 <SendCANMessageEXT+0xb4>
	 char dataStr[3] = { Buf[11 + i*2], Buf[12 + i*2], '\0' };
 8000c40:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000c42:	005b      	lsls	r3, r3, #1
 8000c44:	330b      	adds	r3, #11
 8000c46:	461a      	mov	r2, r3
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	4413      	add	r3, r2
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	723b      	strb	r3, [r7, #8]
 8000c50:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000c52:	3306      	adds	r3, #6
 8000c54:	005b      	lsls	r3, r3, #1
 8000c56:	461a      	mov	r2, r3
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	4413      	add	r3, r2
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	727b      	strb	r3, [r7, #9]
 8000c60:	2300      	movs	r3, #0
 8000c62:	72bb      	strb	r3, [r7, #10]
	 TxData[i] = (uint8_t)strtol(dataStr, NULL, 16); // Converte cada byte de dados
 8000c64:	f107 0308 	add.w	r3, r7, #8
 8000c68:	2210      	movs	r2, #16
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f007 fa59 	bl	8008124 <strtol>
 8000c72:	4603      	mov	r3, r0
 8000c74:	b2d9      	uxtb	r1, r3
 8000c76:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8000c7a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000c7c:	4413      	add	r3, r2
 8000c7e:	460a      	mov	r2, r1
 8000c80:	701a      	strb	r2, [r3, #0]
	 for (int i = 0; i < dlc; i++) {
 8000c82:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000c84:	3301      	adds	r3, #1
 8000c86:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000c88:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8000c8c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8000c8e:	429a      	cmp	r2, r3
 8000c90:	dbd6      	blt.n	8000c40 <SendCANMessageEXT+0x6c>
	 }

	  // Configuração do cabeçalho CAN
	  CAN_TxHeaderTypeDef TxHeader1;
	  uint32_t TxMailbox;
	  TxHeader1.StdId = id;
 8000c92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000c94:	62bb      	str	r3, [r7, #40]	@ 0x28
	  TxHeader1.ExtId = id;
 8000c96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000c98:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  TxHeader1.RTR = CAN_RTR_DATA;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	637b      	str	r3, [r7, #52]	@ 0x34
	  TxHeader1.IDE = CAN_ID_EXT; // Para IDs de 29 bits
 8000c9e:	2304      	movs	r3, #4
 8000ca0:	633b      	str	r3, [r7, #48]	@ 0x30
	  TxHeader1.DLC = dlc;
 8000ca2:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8000ca6:	63bb      	str	r3, [r7, #56]	@ 0x38
	  TxHeader1.TransmitGlobalTime = DISABLE;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c

	  CAN_TxHeaderTypeDef TxHeader2;
	  //uint32_t TxMailbox;
	  TxHeader2.StdId = id;
 8000cae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000cb0:	60fb      	str	r3, [r7, #12]
	  TxHeader2.ExtId = id;
 8000cb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000cb4:	613b      	str	r3, [r7, #16]
	  TxHeader2.RTR = CAN_RTR_DATA;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	61bb      	str	r3, [r7, #24]
	  TxHeader2.IDE = CAN_ID_EXT; // Para IDs de 29 bits
 8000cba:	2304      	movs	r3, #4
 8000cbc:	617b      	str	r3, [r7, #20]
	  TxHeader2.DLC = dlc;
 8000cbe:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8000cc2:	61fb      	str	r3, [r7, #28]
	  TxHeader2.TransmitGlobalTime = DISABLE;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	f887 3020 	strb.w	r3, [r7, #32]

	  // Envia pelo canal selecionado
	  if (canal == 1) {
 8000cca:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8000cce:	2b01      	cmp	r3, #1
 8000cd0:	d10f      	bne.n	8000cf2 <SendCANMessageEXT+0x11e>
		 HAL_CAN_Stop(&hcan1);
 8000cd2:	4817      	ldr	r0, [pc, #92]	@ (8000d30 <SendCANMessageEXT+0x15c>)
 8000cd4:	f000 ffa4 	bl	8001c20 <HAL_CAN_Stop>
		 HAL_CAN_Start(&hcan1);
 8000cd8:	4815      	ldr	r0, [pc, #84]	@ (8000d30 <SendCANMessageEXT+0x15c>)
 8000cda:	f000 ff5d 	bl	8001b98 <HAL_CAN_Start>
		 HAL_CAN_AddTxMessage(&hcan1, &TxHeader1, TxData, &TxMailbox);
 8000cde:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ce2:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8000ce6:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8000cea:	4811      	ldr	r0, [pc, #68]	@ (8000d30 <SendCANMessageEXT+0x15c>)
 8000cec:	f000 ffe1 	bl	8001cb2 <HAL_CAN_AddTxMessage>
 8000cf0:	e012      	b.n	8000d18 <SendCANMessageEXT+0x144>

	  } else if (canal == 2) {
 8000cf2:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8000cf6:	2b02      	cmp	r3, #2
 8000cf8:	d10e      	bne.n	8000d18 <SendCANMessageEXT+0x144>
		 HAL_CAN_Stop(&hcan2);
 8000cfa:	480e      	ldr	r0, [pc, #56]	@ (8000d34 <SendCANMessageEXT+0x160>)
 8000cfc:	f000 ff90 	bl	8001c20 <HAL_CAN_Stop>
		 HAL_CAN_Start(&hcan2);
 8000d00:	480c      	ldr	r0, [pc, #48]	@ (8000d34 <SendCANMessageEXT+0x160>)
 8000d02:	f000 ff49 	bl	8001b98 <HAL_CAN_Start>
	     HAL_CAN_AddTxMessage(&hcan2, &TxHeader2, TxData, &TxMailbox);
 8000d06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d0a:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8000d0e:	f107 010c 	add.w	r1, r7, #12
 8000d12:	4808      	ldr	r0, [pc, #32]	@ (8000d34 <SendCANMessageEXT+0x160>)
 8000d14:	f000 ffcd 	bl	8001cb2 <HAL_CAN_AddTxMessage>

	  }

	  LED_TX_OFF;
 8000d18:	2200      	movs	r2, #0
 8000d1a:	2140      	movs	r1, #64	@ 0x40
 8000d1c:	4803      	ldr	r0, [pc, #12]	@ (8000d2c <SendCANMessageEXT+0x158>)
 8000d1e:	f001 fc97 	bl	8002650 <HAL_GPIO_WritePin>
 8000d22:	e000      	b.n	8000d26 <SendCANMessageEXT+0x152>
		 return;
 8000d24:	bf00      	nop
}
 8000d26:	3760      	adds	r7, #96	@ 0x60
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	40010800 	.word	0x40010800
 8000d30:	200003ac 	.word	0x200003ac
 8000d34:	200003d4 	.word	0x200003d4

08000d38 <SendCANMessageSTD>:

//********************************************************************************************************
void SendCANMessageSTD(uint8_t* Buf, uint32_t *Len) {
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b092      	sub	sp, #72	@ 0x48
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
 8000d40:	6039      	str	r1, [r7, #0]

    LED_TX_ON;
 8000d42:	2201      	movs	r2, #1
 8000d44:	2140      	movs	r1, #64	@ 0x40
 8000d46:	484b      	ldr	r0, [pc, #300]	@ (8000e74 <SendCANMessageSTD+0x13c>)
 8000d48:	f001 fc82 	bl	8002650 <HAL_GPIO_WritePin>
    // Valida o comprimento da mensagem
    if (*Len < 16) {
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	2b0f      	cmp	r3, #15
 8000d52:	f240 808b 	bls.w	8000e6c <SendCANMessageSTD+0x134>
        // Mensagem inválida, encerra
        return;
    }

    // Identifica se é canal 1 ou 2
    uint8_t canal = Buf[1] - '0'; // 1 para CAN1 e 2 para CAN2
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	3301      	adds	r3, #1
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	3b30      	subs	r3, #48	@ 0x30
 8000d5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

    // Extrai o ID (deve ter até 3 dígitos hexadecimais para ID de 11 bits)
    char idStr[4];
    strncpy(idStr, (char*)(Buf + 2), 3);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	1c99      	adds	r1, r3, #2
 8000d66:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000d6a:	2203      	movs	r2, #3
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f007 fa0b 	bl	8008188 <strncpy>
    idStr[3] = '\0';
 8000d72:	2300      	movs	r3, #0
 8000d74:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    uint32_t id = (uint32_t)strtol(idStr, NULL, 16); // Converte para hexadecimal
 8000d78:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000d7c:	2210      	movs	r2, #16
 8000d7e:	2100      	movs	r1, #0
 8000d80:	4618      	mov	r0, r3
 8000d82:	f007 f9cf 	bl	8008124 <strtol>
 8000d86:	4603      	mov	r3, r0
 8000d88:	63fb      	str	r3, [r7, #60]	@ 0x3c

    // Extrai o DLC
    uint8_t dlc = Buf[5] - '0';
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	3305      	adds	r3, #5
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	3b30      	subs	r3, #48	@ 0x30
 8000d92:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

    // Extrai os dados
    uint8_t TxData[8] = {0}; // Inicializa o array para evitar valores indesejados
 8000d96:	2300      	movs	r3, #0
 8000d98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	633b      	str	r3, [r7, #48]	@ 0x30
    for (int i = 0; i < dlc; i++) {
 8000d9e:	2300      	movs	r3, #0
 8000da0:	647b      	str	r3, [r7, #68]	@ 0x44
 8000da2:	e023      	b.n	8000dec <SendCANMessageSTD+0xb4>
        char dataStr[3] = { Buf[6 + i*2], Buf[7 + i*2], '\0' };
 8000da4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000da6:	3303      	adds	r3, #3
 8000da8:	005b      	lsls	r3, r3, #1
 8000daa:	461a      	mov	r2, r3
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	4413      	add	r3, r2
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	733b      	strb	r3, [r7, #12]
 8000db4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000db6:	005b      	lsls	r3, r3, #1
 8000db8:	3307      	adds	r3, #7
 8000dba:	461a      	mov	r2, r3
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	4413      	add	r3, r2
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	737b      	strb	r3, [r7, #13]
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	73bb      	strb	r3, [r7, #14]
        TxData[i] = (uint8_t)strtol(dataStr, NULL, 16); // Converte cada byte de dados
 8000dc8:	f107 030c 	add.w	r3, r7, #12
 8000dcc:	2210      	movs	r2, #16
 8000dce:	2100      	movs	r1, #0
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f007 f9a7 	bl	8008124 <strtol>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	b2d9      	uxtb	r1, r3
 8000dda:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8000dde:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000de0:	4413      	add	r3, r2
 8000de2:	460a      	mov	r2, r1
 8000de4:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < dlc; i++) {
 8000de6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000de8:	3301      	adds	r3, #1
 8000dea:	647b      	str	r3, [r7, #68]	@ 0x44
 8000dec:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8000df0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000df2:	429a      	cmp	r2, r3
 8000df4:	dbd6      	blt.n	8000da4 <SendCANMessageSTD+0x6c>
    }

    // Configuração do cabeçalho CAN para ID padrão
    CAN_TxHeaderTypeDef TxHeader;
    uint32_t TxMailbox;
    TxHeader.StdId = id;         // ID padrão (não estendido)
 8000df6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000df8:	617b      	str	r3, [r7, #20]
    TxHeader.ExtId = 0;          // Não usado para IDs de 11 bits
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	61bb      	str	r3, [r7, #24]
    TxHeader.RTR = CAN_RTR_DATA;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	623b      	str	r3, [r7, #32]
    TxHeader.IDE = CAN_ID_STD;   // Para IDs de 11 bits
 8000e02:	2300      	movs	r3, #0
 8000e04:	61fb      	str	r3, [r7, #28]
    TxHeader.DLC = dlc;
 8000e06:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8000e0a:	627b      	str	r3, [r7, #36]	@ 0x24
    TxHeader.TransmitGlobalTime = DISABLE;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28

    // Envia pelo canal selecionado
    if (canal == 1) {
 8000e12:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8000e16:	2b01      	cmp	r3, #1
 8000e18:	d10f      	bne.n	8000e3a <SendCANMessageSTD+0x102>
        HAL_CAN_Stop(&hcan1);
 8000e1a:	4817      	ldr	r0, [pc, #92]	@ (8000e78 <SendCANMessageSTD+0x140>)
 8000e1c:	f000 ff00 	bl	8001c20 <HAL_CAN_Stop>
        HAL_CAN_Start(&hcan1);
 8000e20:	4815      	ldr	r0, [pc, #84]	@ (8000e78 <SendCANMessageSTD+0x140>)
 8000e22:	f000 feb9 	bl	8001b98 <HAL_CAN_Start>
        HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8000e26:	f107 0310 	add.w	r3, r7, #16
 8000e2a:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8000e2e:	f107 0114 	add.w	r1, r7, #20
 8000e32:	4811      	ldr	r0, [pc, #68]	@ (8000e78 <SendCANMessageSTD+0x140>)
 8000e34:	f000 ff3d 	bl	8001cb2 <HAL_CAN_AddTxMessage>
 8000e38:	e012      	b.n	8000e60 <SendCANMessageSTD+0x128>
    } else if (canal == 2) {
 8000e3a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8000e3e:	2b02      	cmp	r3, #2
 8000e40:	d10e      	bne.n	8000e60 <SendCANMessageSTD+0x128>
        HAL_CAN_Stop(&hcan2);
 8000e42:	480e      	ldr	r0, [pc, #56]	@ (8000e7c <SendCANMessageSTD+0x144>)
 8000e44:	f000 feec 	bl	8001c20 <HAL_CAN_Stop>
        HAL_CAN_Start(&hcan2);
 8000e48:	480c      	ldr	r0, [pc, #48]	@ (8000e7c <SendCANMessageSTD+0x144>)
 8000e4a:	f000 fea5 	bl	8001b98 <HAL_CAN_Start>
        HAL_CAN_AddTxMessage(&hcan2, &TxHeader, TxData, &TxMailbox);
 8000e4e:	f107 0310 	add.w	r3, r7, #16
 8000e52:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8000e56:	f107 0114 	add.w	r1, r7, #20
 8000e5a:	4808      	ldr	r0, [pc, #32]	@ (8000e7c <SendCANMessageSTD+0x144>)
 8000e5c:	f000 ff29 	bl	8001cb2 <HAL_CAN_AddTxMessage>
    }

    LED_TX_OFF;
 8000e60:	2200      	movs	r2, #0
 8000e62:	2140      	movs	r1, #64	@ 0x40
 8000e64:	4803      	ldr	r0, [pc, #12]	@ (8000e74 <SendCANMessageSTD+0x13c>)
 8000e66:	f001 fbf3 	bl	8002650 <HAL_GPIO_WritePin>
 8000e6a:	e000      	b.n	8000e6e <SendCANMessageSTD+0x136>
        return;
 8000e6c:	bf00      	nop
}
 8000e6e:	3748      	adds	r7, #72	@ 0x48
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	40010800 	.word	0x40010800
 8000e78:	200003ac 	.word	0x200003ac
 8000e7c:	200003d4 	.word	0x200003d4

08000e80 <CAN_Run>:

//********************************************************************************************************
void CAN_Run(){
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0

	uint8_t sendLen;

	// CAN1
	if (HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) > 0){
 8000e86:	2100      	movs	r1, #0
 8000e88:	4863      	ldr	r0, [pc, #396]	@ (8001018 <CAN_Run+0x198>)
 8000e8a:	f001 f902 	bl	8002092 <HAL_CAN_GetRxFifoFillLevel>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d05a      	beq.n	8000f4a <CAN_Run+0xca>
		LED_RX_ON;
 8000e94:	2201      	movs	r2, #1
 8000e96:	2120      	movs	r1, #32
 8000e98:	4860      	ldr	r0, [pc, #384]	@ (800101c <CAN_Run+0x19c>)
 8000e9a:	f001 fbd9 	bl	8002650 <HAL_GPIO_WritePin>
	    if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader1, RxData) == HAL_OK){
 8000e9e:	4b60      	ldr	r3, [pc, #384]	@ (8001020 <CAN_Run+0x1a0>)
 8000ea0:	4a60      	ldr	r2, [pc, #384]	@ (8001024 <CAN_Run+0x1a4>)
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	485c      	ldr	r0, [pc, #368]	@ (8001018 <CAN_Run+0x198>)
 8000ea6:	f000 ffd3 	bl	8001e50 <HAL_CAN_GetRxMessage>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d147      	bne.n	8000f40 <CAN_Run+0xc0>
	    	if (RxHeader1.IDE == CAN_ID_EXT){
 8000eb0:	4b5c      	ldr	r3, [pc, #368]	@ (8001024 <CAN_Run+0x1a4>)
 8000eb2:	689b      	ldr	r3, [r3, #8]
 8000eb4:	2b04      	cmp	r3, #4
 8000eb6:	d10a      	bne.n	8000ece <CAN_Run+0x4e>
	    		sendLen = sprintf((char*)bufferTextCan, "T1%8.8X%1.1X", \
		        (unsigned int)RxHeader1.ExtId, \
 8000eb8:	4b5a      	ldr	r3, [pc, #360]	@ (8001024 <CAN_Run+0x1a4>)
 8000eba:	685a      	ldr	r2, [r3, #4]
		        (unsigned int)RxHeader1.DLC);
 8000ebc:	4b59      	ldr	r3, [pc, #356]	@ (8001024 <CAN_Run+0x1a4>)
 8000ebe:	691b      	ldr	r3, [r3, #16]
	    		sendLen = sprintf((char*)bufferTextCan, "T1%8.8X%1.1X", \
 8000ec0:	4959      	ldr	r1, [pc, #356]	@ (8001028 <CAN_Run+0x1a8>)
 8000ec2:	485a      	ldr	r0, [pc, #360]	@ (800102c <CAN_Run+0x1ac>)
 8000ec4:	f007 f938 	bl	8008138 <siprintf>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	71fb      	strb	r3, [r7, #7]
 8000ecc:	e009      	b.n	8000ee2 <CAN_Run+0x62>
		    }
		    else{
		        sendLen = sprintf((char*)bufferTextCan, "t1%3.3X%1.1X", \
		        (unsigned int)RxHeader1.StdId, \
 8000ece:	4b55      	ldr	r3, [pc, #340]	@ (8001024 <CAN_Run+0x1a4>)
 8000ed0:	681a      	ldr	r2, [r3, #0]
		        (unsigned int)RxHeader1.DLC);
 8000ed2:	4b54      	ldr	r3, [pc, #336]	@ (8001024 <CAN_Run+0x1a4>)
 8000ed4:	691b      	ldr	r3, [r3, #16]
		        sendLen = sprintf((char*)bufferTextCan, "t1%3.3X%1.1X", \
 8000ed6:	4956      	ldr	r1, [pc, #344]	@ (8001030 <CAN_Run+0x1b0>)
 8000ed8:	4854      	ldr	r0, [pc, #336]	@ (800102c <CAN_Run+0x1ac>)
 8000eda:	f007 f92d 	bl	8008138 <siprintf>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	71fb      	strb	r3, [r7, #7]
		    }

		    for (uint8_t cnt = 0; cnt < RxHeader1.DLC; cnt ++){
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	71bb      	strb	r3, [r7, #6]
 8000ee6:	e011      	b.n	8000f0c <CAN_Run+0x8c>
		    	sendLen += sprintf((char*)bufferTextCan + sendLen, "%2.2X", RxData[cnt]);
 8000ee8:	79fb      	ldrb	r3, [r7, #7]
 8000eea:	4a50      	ldr	r2, [pc, #320]	@ (800102c <CAN_Run+0x1ac>)
 8000eec:	1898      	adds	r0, r3, r2
 8000eee:	79bb      	ldrb	r3, [r7, #6]
 8000ef0:	4a4b      	ldr	r2, [pc, #300]	@ (8001020 <CAN_Run+0x1a0>)
 8000ef2:	5cd3      	ldrb	r3, [r2, r3]
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	494f      	ldr	r1, [pc, #316]	@ (8001034 <CAN_Run+0x1b4>)
 8000ef8:	f007 f91e 	bl	8008138 <siprintf>
 8000efc:	4603      	mov	r3, r0
 8000efe:	b2da      	uxtb	r2, r3
 8000f00:	79fb      	ldrb	r3, [r7, #7]
 8000f02:	4413      	add	r3, r2
 8000f04:	71fb      	strb	r3, [r7, #7]
		    for (uint8_t cnt = 0; cnt < RxHeader1.DLC; cnt ++){
 8000f06:	79bb      	ldrb	r3, [r7, #6]
 8000f08:	3301      	adds	r3, #1
 8000f0a:	71bb      	strb	r3, [r7, #6]
 8000f0c:	79ba      	ldrb	r2, [r7, #6]
 8000f0e:	4b45      	ldr	r3, [pc, #276]	@ (8001024 <CAN_Run+0x1a4>)
 8000f10:	691b      	ldr	r3, [r3, #16]
 8000f12:	429a      	cmp	r2, r3
 8000f14:	d3e8      	bcc.n	8000ee8 <CAN_Run+0x68>
		    }

		    sendLen += sprintf((char*)bufferTextCan + sendLen, "%4.4X\r", (unsigned int)htim5.Instance->CNT);
 8000f16:	79fb      	ldrb	r3, [r7, #7]
 8000f18:	4a44      	ldr	r2, [pc, #272]	@ (800102c <CAN_Run+0x1ac>)
 8000f1a:	1898      	adds	r0, r3, r2
 8000f1c:	4b46      	ldr	r3, [pc, #280]	@ (8001038 <CAN_Run+0x1b8>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f22:	461a      	mov	r2, r3
 8000f24:	4945      	ldr	r1, [pc, #276]	@ (800103c <CAN_Run+0x1bc>)
 8000f26:	f007 f907 	bl	8008138 <siprintf>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	b2da      	uxtb	r2, r3
 8000f2e:	79fb      	ldrb	r3, [r7, #7]
 8000f30:	4413      	add	r3, r2
 8000f32:	71fb      	strb	r3, [r7, #7]
		    //sendLen += sprintf((char*)bufferTextCan + sendLen, "%4.4X\r", 200);
		    //tim5cnt = htim5.Instance->CNT;
		    CDC_Transmit_FS(bufferTextCan, sendLen);
 8000f34:	79fb      	ldrb	r3, [r7, #7]
 8000f36:	b29b      	uxth	r3, r3
 8000f38:	4619      	mov	r1, r3
 8000f3a:	483c      	ldr	r0, [pc, #240]	@ (800102c <CAN_Run+0x1ac>)
 8000f3c:	f006 fc70 	bl	8007820 <CDC_Transmit_FS>
	    }
	    LED_RX_OFF;
 8000f40:	2200      	movs	r2, #0
 8000f42:	2120      	movs	r1, #32
 8000f44:	4835      	ldr	r0, [pc, #212]	@ (800101c <CAN_Run+0x19c>)
 8000f46:	f001 fb83 	bl	8002650 <HAL_GPIO_WritePin>
	}
    // CAN2
	if (HAL_CAN_GetRxFifoFillLevel(&hcan2, CAN_RX_FIFO0) > 0){
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	483c      	ldr	r0, [pc, #240]	@ (8001040 <CAN_Run+0x1c0>)
 8000f4e:	f001 f8a0 	bl	8002092 <HAL_CAN_GetRxFifoFillLevel>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d05a      	beq.n	800100e <CAN_Run+0x18e>
		LED_RX_ON;
 8000f58:	2201      	movs	r2, #1
 8000f5a:	2120      	movs	r1, #32
 8000f5c:	482f      	ldr	r0, [pc, #188]	@ (800101c <CAN_Run+0x19c>)
 8000f5e:	f001 fb77 	bl	8002650 <HAL_GPIO_WritePin>
		if (HAL_CAN_GetRxMessage(&hcan2, CAN_RX_FIFO0, &RxHeader2, RxData) == HAL_OK){
 8000f62:	4b2f      	ldr	r3, [pc, #188]	@ (8001020 <CAN_Run+0x1a0>)
 8000f64:	4a37      	ldr	r2, [pc, #220]	@ (8001044 <CAN_Run+0x1c4>)
 8000f66:	2100      	movs	r1, #0
 8000f68:	4835      	ldr	r0, [pc, #212]	@ (8001040 <CAN_Run+0x1c0>)
 8000f6a:	f000 ff71 	bl	8001e50 <HAL_CAN_GetRxMessage>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d147      	bne.n	8001004 <CAN_Run+0x184>
			if (RxHeader2.IDE == CAN_ID_EXT){
 8000f74:	4b33      	ldr	r3, [pc, #204]	@ (8001044 <CAN_Run+0x1c4>)
 8000f76:	689b      	ldr	r3, [r3, #8]
 8000f78:	2b04      	cmp	r3, #4
 8000f7a:	d10a      	bne.n	8000f92 <CAN_Run+0x112>
			    sendLen = sprintf((char*)bufferTextCan, "T2%8.8X%1.1X", \
			    (unsigned int)RxHeader2.ExtId, \
 8000f7c:	4b31      	ldr	r3, [pc, #196]	@ (8001044 <CAN_Run+0x1c4>)
 8000f7e:	685a      	ldr	r2, [r3, #4]
			    (unsigned int)RxHeader2.DLC);
 8000f80:	4b30      	ldr	r3, [pc, #192]	@ (8001044 <CAN_Run+0x1c4>)
 8000f82:	691b      	ldr	r3, [r3, #16]
			    sendLen = sprintf((char*)bufferTextCan, "T2%8.8X%1.1X", \
 8000f84:	4930      	ldr	r1, [pc, #192]	@ (8001048 <CAN_Run+0x1c8>)
 8000f86:	4829      	ldr	r0, [pc, #164]	@ (800102c <CAN_Run+0x1ac>)
 8000f88:	f007 f8d6 	bl	8008138 <siprintf>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	71fb      	strb	r3, [r7, #7]
 8000f90:	e009      	b.n	8000fa6 <CAN_Run+0x126>
			}
			else{
			     sendLen = sprintf((char*)bufferTextCan, "t2%3.3X%1.1X", \
			     (unsigned int)RxHeader2.StdId, \
 8000f92:	4b2c      	ldr	r3, [pc, #176]	@ (8001044 <CAN_Run+0x1c4>)
 8000f94:	681a      	ldr	r2, [r3, #0]
			     (unsigned int)RxHeader2.DLC);
 8000f96:	4b2b      	ldr	r3, [pc, #172]	@ (8001044 <CAN_Run+0x1c4>)
 8000f98:	691b      	ldr	r3, [r3, #16]
			     sendLen = sprintf((char*)bufferTextCan, "t2%3.3X%1.1X", \
 8000f9a:	492c      	ldr	r1, [pc, #176]	@ (800104c <CAN_Run+0x1cc>)
 8000f9c:	4823      	ldr	r0, [pc, #140]	@ (800102c <CAN_Run+0x1ac>)
 8000f9e:	f007 f8cb 	bl	8008138 <siprintf>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	71fb      	strb	r3, [r7, #7]
			}

		for (uint8_t cnt = 0; cnt < RxHeader2.DLC; cnt ++){
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	717b      	strb	r3, [r7, #5]
 8000faa:	e011      	b.n	8000fd0 <CAN_Run+0x150>
			sendLen += sprintf((char*)bufferTextCan + sendLen, "%2.2X", RxData[cnt]);
 8000fac:	79fb      	ldrb	r3, [r7, #7]
 8000fae:	4a1f      	ldr	r2, [pc, #124]	@ (800102c <CAN_Run+0x1ac>)
 8000fb0:	1898      	adds	r0, r3, r2
 8000fb2:	797b      	ldrb	r3, [r7, #5]
 8000fb4:	4a1a      	ldr	r2, [pc, #104]	@ (8001020 <CAN_Run+0x1a0>)
 8000fb6:	5cd3      	ldrb	r3, [r2, r3]
 8000fb8:	461a      	mov	r2, r3
 8000fba:	491e      	ldr	r1, [pc, #120]	@ (8001034 <CAN_Run+0x1b4>)
 8000fbc:	f007 f8bc 	bl	8008138 <siprintf>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	b2da      	uxtb	r2, r3
 8000fc4:	79fb      	ldrb	r3, [r7, #7]
 8000fc6:	4413      	add	r3, r2
 8000fc8:	71fb      	strb	r3, [r7, #7]
		for (uint8_t cnt = 0; cnt < RxHeader2.DLC; cnt ++){
 8000fca:	797b      	ldrb	r3, [r7, #5]
 8000fcc:	3301      	adds	r3, #1
 8000fce:	717b      	strb	r3, [r7, #5]
 8000fd0:	797a      	ldrb	r2, [r7, #5]
 8000fd2:	4b1c      	ldr	r3, [pc, #112]	@ (8001044 <CAN_Run+0x1c4>)
 8000fd4:	691b      	ldr	r3, [r3, #16]
 8000fd6:	429a      	cmp	r2, r3
 8000fd8:	d3e8      	bcc.n	8000fac <CAN_Run+0x12c>
		}

		sendLen += sprintf((char*)bufferTextCan + sendLen, "%4.4X\r", (unsigned int)htim5.Instance->CNT);
 8000fda:	79fb      	ldrb	r3, [r7, #7]
 8000fdc:	4a13      	ldr	r2, [pc, #76]	@ (800102c <CAN_Run+0x1ac>)
 8000fde:	1898      	adds	r0, r3, r2
 8000fe0:	4b15      	ldr	r3, [pc, #84]	@ (8001038 <CAN_Run+0x1b8>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	4914      	ldr	r1, [pc, #80]	@ (800103c <CAN_Run+0x1bc>)
 8000fea:	f007 f8a5 	bl	8008138 <siprintf>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	b2da      	uxtb	r2, r3
 8000ff2:	79fb      	ldrb	r3, [r7, #7]
 8000ff4:	4413      	add	r3, r2
 8000ff6:	71fb      	strb	r3, [r7, #7]
		//sendLen += sprintf((char*)bufferTextCan + sendLen, "%4.4X\r", 200);
		//tim5cnt = htim5.Instance->CNT;
		CDC_Transmit_FS(bufferTextCan, sendLen);
 8000ff8:	79fb      	ldrb	r3, [r7, #7]
 8000ffa:	b29b      	uxth	r3, r3
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	480b      	ldr	r0, [pc, #44]	@ (800102c <CAN_Run+0x1ac>)
 8001000:	f006 fc0e 	bl	8007820 <CDC_Transmit_FS>
		}
		LED_RX_OFF;
 8001004:	2200      	movs	r2, #0
 8001006:	2120      	movs	r1, #32
 8001008:	4804      	ldr	r0, [pc, #16]	@ (800101c <CAN_Run+0x19c>)
 800100a:	f001 fb21 	bl	8002650 <HAL_GPIO_WritePin>
	}


}
 800100e:	bf00      	nop
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	200003ac 	.word	0x200003ac
 800101c:	40010800 	.word	0x40010800
 8001020:	200002a0 	.word	0x200002a0
 8001024:	20000218 	.word	0x20000218
 8001028:	08008b00 	.word	0x08008b00
 800102c:	200002a8 	.word	0x200002a8
 8001030:	08008b10 	.word	0x08008b10
 8001034:	08008b20 	.word	0x08008b20
 8001038:	200003fc 	.word	0x200003fc
 800103c:	08008b28 	.word	0x08008b28
 8001040:	200003d4 	.word	0x200003d4
 8001044:	20000234 	.word	0x20000234
 8001048:	08008b30 	.word	0x08008b30
 800104c:	08008b40 	.word	0x08008b40

08001050 <main>:
    }
}


int main(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001054:	f000 fb3e 	bl	80016d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001058:	f000 f820 	bl	800109c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800105c:	f000 f93c 	bl	80012d8 <MX_GPIO_Init>
  MX_CAN1_Init();
 8001060:	f000 f880 	bl	8001164 <MX_CAN1_Init>
  MX_CAN2_Init();
 8001064:	f000 f8b4 	bl	80011d0 <MX_CAN2_Init>
  MX_TIM5_Init();
 8001068:	f000 f8e8 	bl	800123c <MX_TIM5_Init>
  HAL_Delay(1000);
 800106c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001070:	f000 fb92 	bl	8001798 <HAL_Delay>
  MX_USB_DEVICE_Init();
 8001074:	f006 fb12 	bl	800769c <MX_USB_DEVICE_Init>
  HAL_TIM_Base_Start(&htim5);  // Inicia o timer para contar de 0 até 0xFFFF
 8001078:	4806      	ldr	r0, [pc, #24]	@ (8001094 <main+0x44>)
 800107a:	f003 fabd 	bl	80045f8 <HAL_TIM_Base_Start>
  /* USER CODE BEGIN 2 */
  CAN_Init();
 800107e:	f7ff fa47 	bl	8000510 <CAN_Init>
  HAL_GPIO_WritePin(GPIOA, SYS_Pin, GPIO_PIN_SET);
 8001082:	2201      	movs	r2, #1
 8001084:	2110      	movs	r1, #16
 8001086:	4804      	ldr	r0, [pc, #16]	@ (8001098 <main+0x48>)
 8001088:	f001 fae2 	bl	8002650 <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    CAN_Run();
 800108c:	f7ff fef8 	bl	8000e80 <CAN_Run>
  {
 8001090:	bf00      	nop
 8001092:	e7fb      	b.n	800108c <main+0x3c>
 8001094:	200003fc 	.word	0x200003fc
 8001098:	40010800 	.word	0x40010800

0800109c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b09c      	sub	sp, #112	@ 0x70
 80010a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010a2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80010a6:	2238      	movs	r2, #56	@ 0x38
 80010a8:	2100      	movs	r1, #0
 80010aa:	4618      	mov	r0, r3
 80010ac:	f007 f864 	bl	8008178 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
 80010bc:	60da      	str	r2, [r3, #12]
 80010be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010c0:	1d3b      	adds	r3, r7, #4
 80010c2:	2220      	movs	r2, #32
 80010c4:	2100      	movs	r1, #0
 80010c6:	4618      	mov	r0, r3
 80010c8:	f007 f856 	bl	8008178 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010cc:	2301      	movs	r3, #1
 80010ce:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010d0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010d4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80010d6:	2300      	movs	r3, #0
 80010d8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010da:	2301      	movs	r3, #1
 80010dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 80010de:	2300      	movs	r3, #0
 80010e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010e2:	2302      	movs	r3, #2
 80010e4:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010e6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80010ec:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80010f0:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 80010f2:	2300      	movs	r3, #0
 80010f4:	667b      	str	r3, [r7, #100]	@ 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010f6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80010fa:	4618      	mov	r0, r3
 80010fc:	f002 fbde 	bl	80038bc <HAL_RCC_OscConfig>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001106:	f000 f931 	bl	800136c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800110a:	230f      	movs	r3, #15
 800110c:	627b      	str	r3, [r7, #36]	@ 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800110e:	2302      	movs	r3, #2
 8001110:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001112:	2300      	movs	r3, #0
 8001114:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001116:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800111a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800111c:	2300      	movs	r3, #0
 800111e:	637b      	str	r3, [r7, #52]	@ 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001120:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001124:	2102      	movs	r1, #2
 8001126:	4618      	mov	r0, r3
 8001128:	f002 fede 	bl	8003ee8 <HAL_RCC_ClockConfig>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001132:	f000 f91b 	bl	800136c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001136:	2310      	movs	r3, #16
 8001138:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV3;
 800113a:	2300      	movs	r3, #0
 800113c:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800113e:	1d3b      	adds	r3, r7, #4
 8001140:	4618      	mov	r0, r3
 8001142:	f003 f8d7 	bl	80042f4 <HAL_RCCEx_PeriphCLKConfig>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800114c:	f000 f90e 	bl	800136c <Error_Handler>
  }

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 8001150:	4b03      	ldr	r3, [pc, #12]	@ (8001160 <SystemClock_Config+0xc4>)
 8001152:	2201      	movs	r2, #1
 8001154:	601a      	str	r2, [r3, #0]
}
 8001156:	bf00      	nop
 8001158:	3770      	adds	r7, #112	@ 0x70
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	42420070 	.word	0x42420070

08001164 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001168:	4b17      	ldr	r3, [pc, #92]	@ (80011c8 <MX_CAN1_Init+0x64>)
 800116a:	4a18      	ldr	r2, [pc, #96]	@ (80011cc <MX_CAN1_Init+0x68>)
 800116c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800116e:	4b16      	ldr	r3, [pc, #88]	@ (80011c8 <MX_CAN1_Init+0x64>)
 8001170:	2210      	movs	r2, #16
 8001172:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001174:	4b14      	ldr	r3, [pc, #80]	@ (80011c8 <MX_CAN1_Init+0x64>)
 8001176:	2200      	movs	r2, #0
 8001178:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800117a:	4b13      	ldr	r3, [pc, #76]	@ (80011c8 <MX_CAN1_Init+0x64>)
 800117c:	2200      	movs	r2, #0
 800117e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_4TQ;
 8001180:	4b11      	ldr	r3, [pc, #68]	@ (80011c8 <MX_CAN1_Init+0x64>)
 8001182:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001186:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8001188:	4b0f      	ldr	r3, [pc, #60]	@ (80011c8 <MX_CAN1_Init+0x64>)
 800118a:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 800118e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001190:	4b0d      	ldr	r3, [pc, #52]	@ (80011c8 <MX_CAN1_Init+0x64>)
 8001192:	2200      	movs	r2, #0
 8001194:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001196:	4b0c      	ldr	r3, [pc, #48]	@ (80011c8 <MX_CAN1_Init+0x64>)
 8001198:	2200      	movs	r2, #0
 800119a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800119c:	4b0a      	ldr	r3, [pc, #40]	@ (80011c8 <MX_CAN1_Init+0x64>)
 800119e:	2200      	movs	r2, #0
 80011a0:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80011a2:	4b09      	ldr	r3, [pc, #36]	@ (80011c8 <MX_CAN1_Init+0x64>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80011a8:	4b07      	ldr	r3, [pc, #28]	@ (80011c8 <MX_CAN1_Init+0x64>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80011ae:	4b06      	ldr	r3, [pc, #24]	@ (80011c8 <MX_CAN1_Init+0x64>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80011b4:	4804      	ldr	r0, [pc, #16]	@ (80011c8 <MX_CAN1_Init+0x64>)
 80011b6:	f000 fb13 	bl	80017e0 <HAL_CAN_Init>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80011c0:	f000 f8d4 	bl	800136c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80011c4:	bf00      	nop
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	200003ac 	.word	0x200003ac
 80011cc:	40006400 	.word	0x40006400

080011d0 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80011d4:	4b17      	ldr	r3, [pc, #92]	@ (8001234 <MX_CAN2_Init+0x64>)
 80011d6:	4a18      	ldr	r2, [pc, #96]	@ (8001238 <MX_CAN2_Init+0x68>)
 80011d8:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 80011da:	4b16      	ldr	r3, [pc, #88]	@ (8001234 <MX_CAN2_Init+0x64>)
 80011dc:	2210      	movs	r2, #16
 80011de:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80011e0:	4b14      	ldr	r3, [pc, #80]	@ (8001234 <MX_CAN2_Init+0x64>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80011e6:	4b13      	ldr	r3, [pc, #76]	@ (8001234 <MX_CAN2_Init+0x64>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_4TQ;
 80011ec:	4b11      	ldr	r3, [pc, #68]	@ (8001234 <MX_CAN2_Init+0x64>)
 80011ee:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80011f2:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_4TQ;
 80011f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001234 <MX_CAN2_Init+0x64>)
 80011f6:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 80011fa:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80011fc:	4b0d      	ldr	r3, [pc, #52]	@ (8001234 <MX_CAN2_Init+0x64>)
 80011fe:	2200      	movs	r2, #0
 8001200:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8001202:	4b0c      	ldr	r3, [pc, #48]	@ (8001234 <MX_CAN2_Init+0x64>)
 8001204:	2200      	movs	r2, #0
 8001206:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8001208:	4b0a      	ldr	r3, [pc, #40]	@ (8001234 <MX_CAN2_Init+0x64>)
 800120a:	2200      	movs	r2, #0
 800120c:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 800120e:	4b09      	ldr	r3, [pc, #36]	@ (8001234 <MX_CAN2_Init+0x64>)
 8001210:	2200      	movs	r2, #0
 8001212:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8001214:	4b07      	ldr	r3, [pc, #28]	@ (8001234 <MX_CAN2_Init+0x64>)
 8001216:	2200      	movs	r2, #0
 8001218:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 800121a:	4b06      	ldr	r3, [pc, #24]	@ (8001234 <MX_CAN2_Init+0x64>)
 800121c:	2200      	movs	r2, #0
 800121e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8001220:	4804      	ldr	r0, [pc, #16]	@ (8001234 <MX_CAN2_Init+0x64>)
 8001222:	f000 fadd 	bl	80017e0 <HAL_CAN_Init>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 800122c:	f000 f89e 	bl	800136c <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8001230:	bf00      	nop
 8001232:	bd80      	pop	{r7, pc}
 8001234:	200003d4 	.word	0x200003d4
 8001238:	40006800 	.word	0x40006800

0800123c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b086      	sub	sp, #24
 8001240:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001242:	f107 0308 	add.w	r3, r7, #8
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]
 800124a:	605a      	str	r2, [r3, #4]
 800124c:	609a      	str	r2, [r3, #8]
 800124e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001250:	463b      	mov	r3, r7
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001258:	4b1d      	ldr	r3, [pc, #116]	@ (80012d0 <MX_TIM5_Init+0x94>)
 800125a:	4a1e      	ldr	r2, [pc, #120]	@ (80012d4 <MX_TIM5_Init+0x98>)
 800125c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 71999 / 1.13; //71999 * 10.01;
 800125e:	4b1c      	ldr	r3, [pc, #112]	@ (80012d0 <MX_TIM5_Init+0x94>)
 8001260:	f64f 02e3 	movw	r2, #63715	@ 0xf8e3
 8001264:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001266:	4b1a      	ldr	r3, [pc, #104]	@ (80012d0 <MX_TIM5_Init+0x94>)
 8001268:	2200      	movs	r2, #0
 800126a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0xFFFF;
 800126c:	4b18      	ldr	r3, [pc, #96]	@ (80012d0 <MX_TIM5_Init+0x94>)
 800126e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001272:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001274:	4b16      	ldr	r3, [pc, #88]	@ (80012d0 <MX_TIM5_Init+0x94>)
 8001276:	2200      	movs	r2, #0
 8001278:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800127a:	4b15      	ldr	r3, [pc, #84]	@ (80012d0 <MX_TIM5_Init+0x94>)
 800127c:	2200      	movs	r2, #0
 800127e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001280:	4813      	ldr	r0, [pc, #76]	@ (80012d0 <MX_TIM5_Init+0x94>)
 8001282:	f003 f969 	bl	8004558 <HAL_TIM_Base_Init>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 800128c:	f000 f86e 	bl	800136c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001290:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001294:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001296:	f107 0308 	add.w	r3, r7, #8
 800129a:	4619      	mov	r1, r3
 800129c:	480c      	ldr	r0, [pc, #48]	@ (80012d0 <MX_TIM5_Init+0x94>)
 800129e:	f003 f9fd 	bl	800469c <HAL_TIM_ConfigClockSource>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80012a8:	f000 f860 	bl	800136c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ac:	2300      	movs	r3, #0
 80012ae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012b0:	2300      	movs	r3, #0
 80012b2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80012b4:	463b      	mov	r3, r7
 80012b6:	4619      	mov	r1, r3
 80012b8:	4805      	ldr	r0, [pc, #20]	@ (80012d0 <MX_TIM5_Init+0x94>)
 80012ba:	f003 fbc5 	bl	8004a48 <HAL_TIMEx_MasterConfigSynchronization>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80012c4:	f000 f852 	bl	800136c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80012c8:	bf00      	nop
 80012ca:	3718      	adds	r7, #24
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	200003fc 	.word	0x200003fc
 80012d4:	40000c00 	.word	0x40000c00

080012d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b088      	sub	sp, #32
 80012dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012de:	f107 0310 	add.w	r3, r7, #16
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	605a      	str	r2, [r3, #4]
 80012e8:	609a      	str	r2, [r3, #8]
 80012ea:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012ec:	4b1d      	ldr	r3, [pc, #116]	@ (8001364 <MX_GPIO_Init+0x8c>)
 80012ee:	699b      	ldr	r3, [r3, #24]
 80012f0:	4a1c      	ldr	r2, [pc, #112]	@ (8001364 <MX_GPIO_Init+0x8c>)
 80012f2:	f043 0320 	orr.w	r3, r3, #32
 80012f6:	6193      	str	r3, [r2, #24]
 80012f8:	4b1a      	ldr	r3, [pc, #104]	@ (8001364 <MX_GPIO_Init+0x8c>)
 80012fa:	699b      	ldr	r3, [r3, #24]
 80012fc:	f003 0320 	and.w	r3, r3, #32
 8001300:	60fb      	str	r3, [r7, #12]
 8001302:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001304:	4b17      	ldr	r3, [pc, #92]	@ (8001364 <MX_GPIO_Init+0x8c>)
 8001306:	699b      	ldr	r3, [r3, #24]
 8001308:	4a16      	ldr	r2, [pc, #88]	@ (8001364 <MX_GPIO_Init+0x8c>)
 800130a:	f043 0304 	orr.w	r3, r3, #4
 800130e:	6193      	str	r3, [r2, #24]
 8001310:	4b14      	ldr	r3, [pc, #80]	@ (8001364 <MX_GPIO_Init+0x8c>)
 8001312:	699b      	ldr	r3, [r3, #24]
 8001314:	f003 0304 	and.w	r3, r3, #4
 8001318:	60bb      	str	r3, [r7, #8]
 800131a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800131c:	4b11      	ldr	r3, [pc, #68]	@ (8001364 <MX_GPIO_Init+0x8c>)
 800131e:	699b      	ldr	r3, [r3, #24]
 8001320:	4a10      	ldr	r2, [pc, #64]	@ (8001364 <MX_GPIO_Init+0x8c>)
 8001322:	f043 0308 	orr.w	r3, r3, #8
 8001326:	6193      	str	r3, [r2, #24]
 8001328:	4b0e      	ldr	r3, [pc, #56]	@ (8001364 <MX_GPIO_Init+0x8c>)
 800132a:	699b      	ldr	r3, [r3, #24]
 800132c:	f003 0308 	and.w	r3, r3, #8
 8001330:	607b      	str	r3, [r7, #4]
 8001332:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SYS_Pin|RX_Pin|TX_Pin, GPIO_PIN_RESET);
 8001334:	2200      	movs	r2, #0
 8001336:	2170      	movs	r1, #112	@ 0x70
 8001338:	480b      	ldr	r0, [pc, #44]	@ (8001368 <MX_GPIO_Init+0x90>)
 800133a:	f001 f989 	bl	8002650 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SYS_Pin RX_Pin TX_Pin */
  GPIO_InitStruct.Pin = SYS_Pin|RX_Pin|TX_Pin;
 800133e:	2370      	movs	r3, #112	@ 0x70
 8001340:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001342:	2301      	movs	r3, #1
 8001344:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001346:	2300      	movs	r3, #0
 8001348:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134a:	2302      	movs	r3, #2
 800134c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800134e:	f107 0310 	add.w	r3, r7, #16
 8001352:	4619      	mov	r1, r3
 8001354:	4804      	ldr	r0, [pc, #16]	@ (8001368 <MX_GPIO_Init+0x90>)
 8001356:	f000 fff7 	bl	8002348 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800135a:	bf00      	nop
 800135c:	3720      	adds	r7, #32
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	40021000 	.word	0x40021000
 8001368:	40010800 	.word	0x40010800

0800136c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001370:	b672      	cpsid	i
}
 8001372:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001374:	bf00      	nop
 8001376:	e7fd      	b.n	8001374 <Error_Handler+0x8>

08001378 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001378:	b480      	push	{r7}
 800137a:	b085      	sub	sp, #20
 800137c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800137e:	4b15      	ldr	r3, [pc, #84]	@ (80013d4 <HAL_MspInit+0x5c>)
 8001380:	699b      	ldr	r3, [r3, #24]
 8001382:	4a14      	ldr	r2, [pc, #80]	@ (80013d4 <HAL_MspInit+0x5c>)
 8001384:	f043 0301 	orr.w	r3, r3, #1
 8001388:	6193      	str	r3, [r2, #24]
 800138a:	4b12      	ldr	r3, [pc, #72]	@ (80013d4 <HAL_MspInit+0x5c>)
 800138c:	699b      	ldr	r3, [r3, #24]
 800138e:	f003 0301 	and.w	r3, r3, #1
 8001392:	60bb      	str	r3, [r7, #8]
 8001394:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001396:	4b0f      	ldr	r3, [pc, #60]	@ (80013d4 <HAL_MspInit+0x5c>)
 8001398:	69db      	ldr	r3, [r3, #28]
 800139a:	4a0e      	ldr	r2, [pc, #56]	@ (80013d4 <HAL_MspInit+0x5c>)
 800139c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013a0:	61d3      	str	r3, [r2, #28]
 80013a2:	4b0c      	ldr	r3, [pc, #48]	@ (80013d4 <HAL_MspInit+0x5c>)
 80013a4:	69db      	ldr	r3, [r3, #28]
 80013a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013aa:	607b      	str	r3, [r7, #4]
 80013ac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80013ae:	4b0a      	ldr	r3, [pc, #40]	@ (80013d8 <HAL_MspInit+0x60>)
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	60fb      	str	r3, [r7, #12]
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80013ba:	60fb      	str	r3, [r7, #12]
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80013c2:	60fb      	str	r3, [r7, #12]
 80013c4:	4a04      	ldr	r2, [pc, #16]	@ (80013d8 <HAL_MspInit+0x60>)
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ca:	bf00      	nop
 80013cc:	3714      	adds	r7, #20
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bc80      	pop	{r7}
 80013d2:	4770      	bx	lr
 80013d4:	40021000 	.word	0x40021000
 80013d8:	40010000 	.word	0x40010000

080013dc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b08e      	sub	sp, #56	@ 0x38
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e4:	f107 0320 	add.w	r3, r7, #32
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	605a      	str	r2, [r3, #4]
 80013ee:	609a      	str	r2, [r3, #8]
 80013f0:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a56      	ldr	r2, [pc, #344]	@ (8001550 <HAL_CAN_MspInit+0x174>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d14d      	bne.n	8001498 <HAL_CAN_MspInit+0xbc>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80013fc:	4b55      	ldr	r3, [pc, #340]	@ (8001554 <HAL_CAN_MspInit+0x178>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	3301      	adds	r3, #1
 8001402:	4a54      	ldr	r2, [pc, #336]	@ (8001554 <HAL_CAN_MspInit+0x178>)
 8001404:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001406:	4b53      	ldr	r3, [pc, #332]	@ (8001554 <HAL_CAN_MspInit+0x178>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	2b01      	cmp	r3, #1
 800140c:	d10b      	bne.n	8001426 <HAL_CAN_MspInit+0x4a>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800140e:	4b52      	ldr	r3, [pc, #328]	@ (8001558 <HAL_CAN_MspInit+0x17c>)
 8001410:	69db      	ldr	r3, [r3, #28]
 8001412:	4a51      	ldr	r2, [pc, #324]	@ (8001558 <HAL_CAN_MspInit+0x17c>)
 8001414:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001418:	61d3      	str	r3, [r2, #28]
 800141a:	4b4f      	ldr	r3, [pc, #316]	@ (8001558 <HAL_CAN_MspInit+0x17c>)
 800141c:	69db      	ldr	r3, [r3, #28]
 800141e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001422:	61fb      	str	r3, [r7, #28]
 8001424:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001426:	4b4c      	ldr	r3, [pc, #304]	@ (8001558 <HAL_CAN_MspInit+0x17c>)
 8001428:	699b      	ldr	r3, [r3, #24]
 800142a:	4a4b      	ldr	r2, [pc, #300]	@ (8001558 <HAL_CAN_MspInit+0x17c>)
 800142c:	f043 0308 	orr.w	r3, r3, #8
 8001430:	6193      	str	r3, [r2, #24]
 8001432:	4b49      	ldr	r3, [pc, #292]	@ (8001558 <HAL_CAN_MspInit+0x17c>)
 8001434:	699b      	ldr	r3, [r3, #24]
 8001436:	f003 0308 	and.w	r3, r3, #8
 800143a:	61bb      	str	r3, [r7, #24]
 800143c:	69bb      	ldr	r3, [r7, #24]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800143e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001442:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001444:	2300      	movs	r3, #0
 8001446:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001448:	2300      	movs	r3, #0
 800144a:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800144c:	f107 0320 	add.w	r3, r7, #32
 8001450:	4619      	mov	r1, r3
 8001452:	4842      	ldr	r0, [pc, #264]	@ (800155c <HAL_CAN_MspInit+0x180>)
 8001454:	f000 ff78 	bl	8002348 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001458:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800145c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145e:	2302      	movs	r3, #2
 8001460:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001462:	2303      	movs	r3, #3
 8001464:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001466:	f107 0320 	add.w	r3, r7, #32
 800146a:	4619      	mov	r1, r3
 800146c:	483b      	ldr	r0, [pc, #236]	@ (800155c <HAL_CAN_MspInit+0x180>)
 800146e:	f000 ff6b 	bl	8002348 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8001472:	4b3b      	ldr	r3, [pc, #236]	@ (8001560 <HAL_CAN_MspInit+0x184>)
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	633b      	str	r3, [r7, #48]	@ 0x30
 8001478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800147a:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 800147e:	633b      	str	r3, [r7, #48]	@ 0x30
 8001480:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001482:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001486:	633b      	str	r3, [r7, #48]	@ 0x30
 8001488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800148a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800148e:	633b      	str	r3, [r7, #48]	@ 0x30
 8001490:	4a33      	ldr	r2, [pc, #204]	@ (8001560 <HAL_CAN_MspInit+0x184>)
 8001492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001494:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8001496:	e057      	b.n	8001548 <HAL_CAN_MspInit+0x16c>
  else if(hcan->Instance==CAN2)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a31      	ldr	r2, [pc, #196]	@ (8001564 <HAL_CAN_MspInit+0x188>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d152      	bne.n	8001548 <HAL_CAN_MspInit+0x16c>
    __HAL_RCC_CAN2_CLK_ENABLE();
 80014a2:	4b2d      	ldr	r3, [pc, #180]	@ (8001558 <HAL_CAN_MspInit+0x17c>)
 80014a4:	69db      	ldr	r3, [r3, #28]
 80014a6:	4a2c      	ldr	r2, [pc, #176]	@ (8001558 <HAL_CAN_MspInit+0x17c>)
 80014a8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80014ac:	61d3      	str	r3, [r2, #28]
 80014ae:	4b2a      	ldr	r3, [pc, #168]	@ (8001558 <HAL_CAN_MspInit+0x17c>)
 80014b0:	69db      	ldr	r3, [r3, #28]
 80014b2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80014b6:	617b      	str	r3, [r7, #20]
 80014b8:	697b      	ldr	r3, [r7, #20]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80014ba:	4b26      	ldr	r3, [pc, #152]	@ (8001554 <HAL_CAN_MspInit+0x178>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	3301      	adds	r3, #1
 80014c0:	4a24      	ldr	r2, [pc, #144]	@ (8001554 <HAL_CAN_MspInit+0x178>)
 80014c2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80014c4:	4b23      	ldr	r3, [pc, #140]	@ (8001554 <HAL_CAN_MspInit+0x178>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d10b      	bne.n	80014e4 <HAL_CAN_MspInit+0x108>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80014cc:	4b22      	ldr	r3, [pc, #136]	@ (8001558 <HAL_CAN_MspInit+0x17c>)
 80014ce:	69db      	ldr	r3, [r3, #28]
 80014d0:	4a21      	ldr	r2, [pc, #132]	@ (8001558 <HAL_CAN_MspInit+0x17c>)
 80014d2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80014d6:	61d3      	str	r3, [r2, #28]
 80014d8:	4b1f      	ldr	r3, [pc, #124]	@ (8001558 <HAL_CAN_MspInit+0x17c>)
 80014da:	69db      	ldr	r3, [r3, #28]
 80014dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014e0:	613b      	str	r3, [r7, #16]
 80014e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014e4:	4b1c      	ldr	r3, [pc, #112]	@ (8001558 <HAL_CAN_MspInit+0x17c>)
 80014e6:	699b      	ldr	r3, [r3, #24]
 80014e8:	4a1b      	ldr	r2, [pc, #108]	@ (8001558 <HAL_CAN_MspInit+0x17c>)
 80014ea:	f043 0308 	orr.w	r3, r3, #8
 80014ee:	6193      	str	r3, [r2, #24]
 80014f0:	4b19      	ldr	r3, [pc, #100]	@ (8001558 <HAL_CAN_MspInit+0x17c>)
 80014f2:	699b      	ldr	r3, [r3, #24]
 80014f4:	f003 0308 	and.w	r3, r3, #8
 80014f8:	60fb      	str	r3, [r7, #12]
 80014fa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80014fc:	2320      	movs	r3, #32
 80014fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001500:	2300      	movs	r3, #0
 8001502:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001504:	2300      	movs	r3, #0
 8001506:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001508:	f107 0320 	add.w	r3, r7, #32
 800150c:	4619      	mov	r1, r3
 800150e:	4813      	ldr	r0, [pc, #76]	@ (800155c <HAL_CAN_MspInit+0x180>)
 8001510:	f000 ff1a 	bl	8002348 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001514:	2340      	movs	r3, #64	@ 0x40
 8001516:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001518:	2302      	movs	r3, #2
 800151a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800151c:	2303      	movs	r3, #3
 800151e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001520:	f107 0320 	add.w	r3, r7, #32
 8001524:	4619      	mov	r1, r3
 8001526:	480d      	ldr	r0, [pc, #52]	@ (800155c <HAL_CAN_MspInit+0x180>)
 8001528:	f000 ff0e 	bl	8002348 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_CAN2_ENABLE();
 800152c:	4b0c      	ldr	r3, [pc, #48]	@ (8001560 <HAL_CAN_MspInit+0x184>)
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	637b      	str	r3, [r7, #52]	@ 0x34
 8001532:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001534:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001538:	637b      	str	r3, [r7, #52]	@ 0x34
 800153a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800153c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001540:	637b      	str	r3, [r7, #52]	@ 0x34
 8001542:	4a07      	ldr	r2, [pc, #28]	@ (8001560 <HAL_CAN_MspInit+0x184>)
 8001544:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001546:	6053      	str	r3, [r2, #4]
}
 8001548:	bf00      	nop
 800154a:	3738      	adds	r7, #56	@ 0x38
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	40006400 	.word	0x40006400
 8001554:	20000444 	.word	0x20000444
 8001558:	40021000 	.word	0x40021000
 800155c:	40010c00 	.word	0x40010c00
 8001560:	40010000 	.word	0x40010000
 8001564:	40006800 	.word	0x40006800

08001568 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001568:	b480      	push	{r7}
 800156a:	b085      	sub	sp, #20
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a09      	ldr	r2, [pc, #36]	@ (800159c <HAL_TIM_Base_MspInit+0x34>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d10b      	bne.n	8001592 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800157a:	4b09      	ldr	r3, [pc, #36]	@ (80015a0 <HAL_TIM_Base_MspInit+0x38>)
 800157c:	69db      	ldr	r3, [r3, #28]
 800157e:	4a08      	ldr	r2, [pc, #32]	@ (80015a0 <HAL_TIM_Base_MspInit+0x38>)
 8001580:	f043 0308 	orr.w	r3, r3, #8
 8001584:	61d3      	str	r3, [r2, #28]
 8001586:	4b06      	ldr	r3, [pc, #24]	@ (80015a0 <HAL_TIM_Base_MspInit+0x38>)
 8001588:	69db      	ldr	r3, [r3, #28]
 800158a:	f003 0308 	and.w	r3, r3, #8
 800158e:	60fb      	str	r3, [r7, #12]
 8001590:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001592:	bf00      	nop
 8001594:	3714      	adds	r7, #20
 8001596:	46bd      	mov	sp, r7
 8001598:	bc80      	pop	{r7}
 800159a:	4770      	bx	lr
 800159c:	40000c00 	.word	0x40000c00
 80015a0:	40021000 	.word	0x40021000

080015a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015a8:	bf00      	nop
 80015aa:	e7fd      	b.n	80015a8 <NMI_Handler+0x4>

080015ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015b0:	bf00      	nop
 80015b2:	e7fd      	b.n	80015b0 <HardFault_Handler+0x4>

080015b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015b8:	bf00      	nop
 80015ba:	e7fd      	b.n	80015b8 <MemManage_Handler+0x4>

080015bc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015c0:	bf00      	nop
 80015c2:	e7fd      	b.n	80015c0 <BusFault_Handler+0x4>

080015c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015c8:	bf00      	nop
 80015ca:	e7fd      	b.n	80015c8 <UsageFault_Handler+0x4>

080015cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015d0:	bf00      	nop
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bc80      	pop	{r7}
 80015d6:	4770      	bx	lr

080015d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015dc:	bf00      	nop
 80015de:	46bd      	mov	sp, r7
 80015e0:	bc80      	pop	{r7}
 80015e2:	4770      	bx	lr

080015e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015e8:	bf00      	nop
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bc80      	pop	{r7}
 80015ee:	4770      	bx	lr

080015f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015f4:	f000 f8b4 	bl	8001760 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015f8:	bf00      	nop
 80015fa:	bd80      	pop	{r7, pc}

080015fc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001600:	4802      	ldr	r0, [pc, #8]	@ (800160c <OTG_FS_IRQHandler+0x10>)
 8001602:	f001 f967 	bl	80028d4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001606:	bf00      	nop
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	20001118 	.word	0x20001118

08001610 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b086      	sub	sp, #24
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001618:	4a14      	ldr	r2, [pc, #80]	@ (800166c <_sbrk+0x5c>)
 800161a:	4b15      	ldr	r3, [pc, #84]	@ (8001670 <_sbrk+0x60>)
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001624:	4b13      	ldr	r3, [pc, #76]	@ (8001674 <_sbrk+0x64>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d102      	bne.n	8001632 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800162c:	4b11      	ldr	r3, [pc, #68]	@ (8001674 <_sbrk+0x64>)
 800162e:	4a12      	ldr	r2, [pc, #72]	@ (8001678 <_sbrk+0x68>)
 8001630:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001632:	4b10      	ldr	r3, [pc, #64]	@ (8001674 <_sbrk+0x64>)
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4413      	add	r3, r2
 800163a:	693a      	ldr	r2, [r7, #16]
 800163c:	429a      	cmp	r2, r3
 800163e:	d207      	bcs.n	8001650 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001640:	f006 fdb6 	bl	80081b0 <__errno>
 8001644:	4603      	mov	r3, r0
 8001646:	220c      	movs	r2, #12
 8001648:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800164a:	f04f 33ff 	mov.w	r3, #4294967295
 800164e:	e009      	b.n	8001664 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001650:	4b08      	ldr	r3, [pc, #32]	@ (8001674 <_sbrk+0x64>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001656:	4b07      	ldr	r3, [pc, #28]	@ (8001674 <_sbrk+0x64>)
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4413      	add	r3, r2
 800165e:	4a05      	ldr	r2, [pc, #20]	@ (8001674 <_sbrk+0x64>)
 8001660:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001662:	68fb      	ldr	r3, [r7, #12]
}
 8001664:	4618      	mov	r0, r3
 8001666:	3718      	adds	r7, #24
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	20010000 	.word	0x20010000
 8001670:	00000400 	.word	0x00000400
 8001674:	20000448 	.word	0x20000448
 8001678:	20001960 	.word	0x20001960

0800167c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001680:	bf00      	nop
 8001682:	46bd      	mov	sp, r7
 8001684:	bc80      	pop	{r7}
 8001686:	4770      	bx	lr

08001688 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001688:	f7ff fff8 	bl	800167c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800168c:	480b      	ldr	r0, [pc, #44]	@ (80016bc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800168e:	490c      	ldr	r1, [pc, #48]	@ (80016c0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001690:	4a0c      	ldr	r2, [pc, #48]	@ (80016c4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001692:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001694:	e002      	b.n	800169c <LoopCopyDataInit>

08001696 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001696:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001698:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800169a:	3304      	adds	r3, #4

0800169c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800169c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800169e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016a0:	d3f9      	bcc.n	8001696 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016a2:	4a09      	ldr	r2, [pc, #36]	@ (80016c8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80016a4:	4c09      	ldr	r4, [pc, #36]	@ (80016cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016a8:	e001      	b.n	80016ae <LoopFillZerobss>

080016aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016ac:	3204      	adds	r2, #4

080016ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016b0:	d3fb      	bcc.n	80016aa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80016b2:	f006 fd83 	bl	80081bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80016b6:	f7ff fccb 	bl	8001050 <main>
  bx lr
 80016ba:	4770      	bx	lr
  ldr r0, =_sdata
 80016bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016c0:	200001cc 	.word	0x200001cc
  ldr r2, =_sidata
 80016c4:	08008d0c 	.word	0x08008d0c
  ldr r2, =_sbss
 80016c8:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 80016cc:	2000195c 	.word	0x2000195c

080016d0 <ADC1_2_IRQHandler>:
 * @retval None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016d0:	e7fe      	b.n	80016d0 <ADC1_2_IRQHandler>
	...

080016d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016d8:	4b08      	ldr	r3, [pc, #32]	@ (80016fc <HAL_Init+0x28>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a07      	ldr	r2, [pc, #28]	@ (80016fc <HAL_Init+0x28>)
 80016de:	f043 0310 	orr.w	r3, r3, #16
 80016e2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016e4:	2003      	movs	r0, #3
 80016e6:	f000 fded 	bl	80022c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016ea:	200f      	movs	r0, #15
 80016ec:	f000 f808 	bl	8001700 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016f0:	f7ff fe42 	bl	8001378 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016f4:	2300      	movs	r3, #0
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	40022000 	.word	0x40022000

08001700 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001708:	4b12      	ldr	r3, [pc, #72]	@ (8001754 <HAL_InitTick+0x54>)
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	4b12      	ldr	r3, [pc, #72]	@ (8001758 <HAL_InitTick+0x58>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	4619      	mov	r1, r3
 8001712:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001716:	fbb3 f3f1 	udiv	r3, r3, r1
 800171a:	fbb2 f3f3 	udiv	r3, r2, r3
 800171e:	4618      	mov	r0, r3
 8001720:	f000 fe05 	bl	800232e <HAL_SYSTICK_Config>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e00e      	b.n	800174c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2b0f      	cmp	r3, #15
 8001732:	d80a      	bhi.n	800174a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001734:	2200      	movs	r2, #0
 8001736:	6879      	ldr	r1, [r7, #4]
 8001738:	f04f 30ff 	mov.w	r0, #4294967295
 800173c:	f000 fdcd 	bl	80022da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001740:	4a06      	ldr	r2, [pc, #24]	@ (800175c <HAL_InitTick+0x5c>)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001746:	2300      	movs	r3, #0
 8001748:	e000      	b.n	800174c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
}
 800174c:	4618      	mov	r0, r3
 800174e:	3708      	adds	r7, #8
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	20000000 	.word	0x20000000
 8001758:	20000008 	.word	0x20000008
 800175c:	20000004 	.word	0x20000004

08001760 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001764:	4b05      	ldr	r3, [pc, #20]	@ (800177c <HAL_IncTick+0x1c>)
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	461a      	mov	r2, r3
 800176a:	4b05      	ldr	r3, [pc, #20]	@ (8001780 <HAL_IncTick+0x20>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4413      	add	r3, r2
 8001770:	4a03      	ldr	r2, [pc, #12]	@ (8001780 <HAL_IncTick+0x20>)
 8001772:	6013      	str	r3, [r2, #0]
}
 8001774:	bf00      	nop
 8001776:	46bd      	mov	sp, r7
 8001778:	bc80      	pop	{r7}
 800177a:	4770      	bx	lr
 800177c:	20000008 	.word	0x20000008
 8001780:	2000044c 	.word	0x2000044c

08001784 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  return uwTick;
 8001788:	4b02      	ldr	r3, [pc, #8]	@ (8001794 <HAL_GetTick+0x10>)
 800178a:	681b      	ldr	r3, [r3, #0]
}
 800178c:	4618      	mov	r0, r3
 800178e:	46bd      	mov	sp, r7
 8001790:	bc80      	pop	{r7}
 8001792:	4770      	bx	lr
 8001794:	2000044c 	.word	0x2000044c

08001798 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017a0:	f7ff fff0 	bl	8001784 <HAL_GetTick>
 80017a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017b0:	d005      	beq.n	80017be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017b2:	4b0a      	ldr	r3, [pc, #40]	@ (80017dc <HAL_Delay+0x44>)
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	461a      	mov	r2, r3
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	4413      	add	r3, r2
 80017bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017be:	bf00      	nop
 80017c0:	f7ff ffe0 	bl	8001784 <HAL_GetTick>
 80017c4:	4602      	mov	r2, r0
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	68fa      	ldr	r2, [r7, #12]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d8f7      	bhi.n	80017c0 <HAL_Delay+0x28>
  {
  }
}
 80017d0:	bf00      	nop
 80017d2:	bf00      	nop
 80017d4:	3710      	adds	r7, #16
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	20000008 	.word	0x20000008

080017e0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d101      	bne.n	80017f2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e0ed      	b.n	80019ce <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d102      	bne.n	8001804 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f7ff fdec 	bl	80013dc <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f042 0201 	orr.w	r2, r2, #1
 8001812:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001814:	f7ff ffb6 	bl	8001784 <HAL_GetTick>
 8001818:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800181a:	e012      	b.n	8001842 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800181c:	f7ff ffb2 	bl	8001784 <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	2b0a      	cmp	r3, #10
 8001828:	d90b      	bls.n	8001842 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800182e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2205      	movs	r2, #5
 800183a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e0c5      	b.n	80019ce <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f003 0301 	and.w	r3, r3, #1
 800184c:	2b00      	cmp	r3, #0
 800184e:	d0e5      	beq.n	800181c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f022 0202 	bic.w	r2, r2, #2
 800185e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001860:	f7ff ff90 	bl	8001784 <HAL_GetTick>
 8001864:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001866:	e012      	b.n	800188e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001868:	f7ff ff8c 	bl	8001784 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	2b0a      	cmp	r3, #10
 8001874:	d90b      	bls.n	800188e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800187a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2205      	movs	r2, #5
 8001886:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e09f      	b.n	80019ce <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f003 0302 	and.w	r3, r3, #2
 8001898:	2b00      	cmp	r3, #0
 800189a:	d1e5      	bne.n	8001868 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	7e1b      	ldrb	r3, [r3, #24]
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d108      	bne.n	80018b6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	e007      	b.n	80018c6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80018c4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	7e5b      	ldrb	r3, [r3, #25]
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d108      	bne.n	80018e0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80018dc:	601a      	str	r2, [r3, #0]
 80018de:	e007      	b.n	80018f0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80018ee:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	7e9b      	ldrb	r3, [r3, #26]
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d108      	bne.n	800190a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f042 0220 	orr.w	r2, r2, #32
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	e007      	b.n	800191a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f022 0220 	bic.w	r2, r2, #32
 8001918:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	7edb      	ldrb	r3, [r3, #27]
 800191e:	2b01      	cmp	r3, #1
 8001920:	d108      	bne.n	8001934 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f022 0210 	bic.w	r2, r2, #16
 8001930:	601a      	str	r2, [r3, #0]
 8001932:	e007      	b.n	8001944 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f042 0210 	orr.w	r2, r2, #16
 8001942:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	7f1b      	ldrb	r3, [r3, #28]
 8001948:	2b01      	cmp	r3, #1
 800194a:	d108      	bne.n	800195e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f042 0208 	orr.w	r2, r2, #8
 800195a:	601a      	str	r2, [r3, #0]
 800195c:	e007      	b.n	800196e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f022 0208 	bic.w	r2, r2, #8
 800196c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	7f5b      	ldrb	r3, [r3, #29]
 8001972:	2b01      	cmp	r3, #1
 8001974:	d108      	bne.n	8001988 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f042 0204 	orr.w	r2, r2, #4
 8001984:	601a      	str	r2, [r3, #0]
 8001986:	e007      	b.n	8001998 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f022 0204 	bic.w	r2, r2, #4
 8001996:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	689a      	ldr	r2, [r3, #8]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	431a      	orrs	r2, r3
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	691b      	ldr	r3, [r3, #16]
 80019a6:	431a      	orrs	r2, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	695b      	ldr	r3, [r3, #20]
 80019ac:	ea42 0103 	orr.w	r1, r2, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	1e5a      	subs	r2, r3, #1
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	430a      	orrs	r2, r1
 80019bc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2200      	movs	r2, #0
 80019c2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2201      	movs	r2, #1
 80019c8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80019cc:	2300      	movs	r3, #0
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3710      	adds	r7, #16
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
	...

080019d8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80019d8:	b480      	push	{r7}
 80019da:	b087      	sub	sp, #28
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019ee:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80019f0:	7cfb      	ldrb	r3, [r7, #19]
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d003      	beq.n	80019fe <HAL_CAN_ConfigFilter+0x26>
 80019f6:	7cfb      	ldrb	r3, [r7, #19]
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	f040 80be 	bne.w	8001b7a <HAL_CAN_ConfigFilter+0x1a2>
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if   defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80019fe:	4b65      	ldr	r3, [pc, #404]	@ (8001b94 <HAL_CAN_ConfigFilter+0x1bc>)
 8001a00:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001a08:	f043 0201 	orr.w	r2, r3, #1
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#if   defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001a18:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a2c:	021b      	lsls	r3, r3, #8
 8001a2e:	431a      	orrs	r2, r3
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	695b      	ldr	r3, [r3, #20]
 8001a3a:	f003 031f 	and.w	r3, r3, #31
 8001a3e:	2201      	movs	r2, #1
 8001a40:	fa02 f303 	lsl.w	r3, r2, r3
 8001a44:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	43db      	mvns	r3, r3
 8001a50:	401a      	ands	r2, r3
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	69db      	ldr	r3, [r3, #28]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d123      	bne.n	8001aa8 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	401a      	ands	r2, r3
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	68db      	ldr	r3, [r3, #12]
 8001a76:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001a7e:	683a      	ldr	r2, [r7, #0]
 8001a80:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001a82:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	3248      	adds	r2, #72	@ 0x48
 8001a88:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001a9c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001a9e:	6979      	ldr	r1, [r7, #20]
 8001aa0:	3348      	adds	r3, #72	@ 0x48
 8001aa2:	00db      	lsls	r3, r3, #3
 8001aa4:	440b      	add	r3, r1
 8001aa6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	69db      	ldr	r3, [r3, #28]
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d122      	bne.n	8001af6 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	431a      	orrs	r2, r3
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001acc:	683a      	ldr	r2, [r7, #0]
 8001ace:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001ad0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	3248      	adds	r2, #72	@ 0x48
 8001ad6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001aea:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001aec:	6979      	ldr	r1, [r7, #20]
 8001aee:	3348      	adds	r3, #72	@ 0x48
 8001af0:	00db      	lsls	r3, r3, #3
 8001af2:	440b      	add	r3, r1
 8001af4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	699b      	ldr	r3, [r3, #24]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d109      	bne.n	8001b12 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	43db      	mvns	r3, r3
 8001b08:	401a      	ands	r2, r3
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001b10:	e007      	b.n	8001b22 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	431a      	orrs	r2, r3
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	691b      	ldr	r3, [r3, #16]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d109      	bne.n	8001b3e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	43db      	mvns	r3, r3
 8001b34:	401a      	ands	r2, r3
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001b3c:	e007      	b.n	8001b4e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	431a      	orrs	r2, r3
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	6a1b      	ldr	r3, [r3, #32]
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d107      	bne.n	8001b66 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	431a      	orrs	r2, r3
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001b6c:	f023 0201 	bic.w	r2, r3, #1
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001b76:	2300      	movs	r3, #0
 8001b78:	e006      	b.n	8001b88 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b7e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
  }
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	371c      	adds	r7, #28
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bc80      	pop	{r7}
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	40006400 	.word	0x40006400

08001b98 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d12e      	bne.n	8001c0a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2202      	movs	r2, #2
 8001bb0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f022 0201 	bic.w	r2, r2, #1
 8001bc2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001bc4:	f7ff fdde 	bl	8001784 <HAL_GetTick>
 8001bc8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001bca:	e012      	b.n	8001bf2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001bcc:	f7ff fdda 	bl	8001784 <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b0a      	cmp	r3, #10
 8001bd8:	d90b      	bls.n	8001bf2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bde:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2205      	movs	r2, #5
 8001bea:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e012      	b.n	8001c18 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f003 0301 	and.w	r3, r3, #1
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d1e5      	bne.n	8001bcc <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2200      	movs	r2, #0
 8001c04:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001c06:	2300      	movs	r3, #0
 8001c08:	e006      	b.n	8001c18 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c0e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
  }
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3710      	adds	r7, #16
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	d133      	bne.n	8001c9c <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f042 0201 	orr.w	r2, r2, #1
 8001c42:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001c44:	f7ff fd9e 	bl	8001784 <HAL_GetTick>
 8001c48:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001c4a:	e012      	b.n	8001c72 <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001c4c:	f7ff fd9a 	bl	8001784 <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	2b0a      	cmp	r3, #10
 8001c58:	d90b      	bls.n	8001c72 <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c5e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2205      	movs	r2, #5
 8001c6a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e01b      	b.n	8001caa <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f003 0301 	and.w	r3, r3, #1
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d0e5      	beq.n	8001c4c <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f022 0202 	bic.w	r2, r2, #2
 8001c8e:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2201      	movs	r2, #1
 8001c94:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	e006      	b.n	8001caa <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ca0:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
  }
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3710      	adds	r7, #16
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	b089      	sub	sp, #36	@ 0x24
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	60f8      	str	r0, [r7, #12]
 8001cba:	60b9      	str	r1, [r7, #8]
 8001cbc:	607a      	str	r2, [r7, #4]
 8001cbe:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cc6:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001cd0:	7ffb      	ldrb	r3, [r7, #31]
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d003      	beq.n	8001cde <HAL_CAN_AddTxMessage+0x2c>
 8001cd6:	7ffb      	ldrb	r3, [r7, #31]
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	f040 80ad 	bne.w	8001e38 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d10a      	bne.n	8001cfe <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001ce8:	69bb      	ldr	r3, [r7, #24]
 8001cea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d105      	bne.n	8001cfe <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001cf2:	69bb      	ldr	r3, [r7, #24]
 8001cf4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	f000 8095 	beq.w	8001e28 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001cfe:	69bb      	ldr	r3, [r7, #24]
 8001d00:	0e1b      	lsrs	r3, r3, #24
 8001d02:	f003 0303 	and.w	r3, r3, #3
 8001d06:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001d08:	2201      	movs	r2, #1
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	409a      	lsls	r2, r3
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d10d      	bne.n	8001d36 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001d24:	68f9      	ldr	r1, [r7, #12]
 8001d26:	6809      	ldr	r1, [r1, #0]
 8001d28:	431a      	orrs	r2, r3
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	3318      	adds	r3, #24
 8001d2e:	011b      	lsls	r3, r3, #4
 8001d30:	440b      	add	r3, r1
 8001d32:	601a      	str	r2, [r3, #0]
 8001d34:	e00f      	b.n	8001d56 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001d40:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001d46:	68f9      	ldr	r1, [r7, #12]
 8001d48:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001d4a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	3318      	adds	r3, #24
 8001d50:	011b      	lsls	r3, r3, #4
 8001d52:	440b      	add	r3, r1
 8001d54:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	6819      	ldr	r1, [r3, #0]
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	691a      	ldr	r2, [r3, #16]
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	3318      	adds	r3, #24
 8001d62:	011b      	lsls	r3, r3, #4
 8001d64:	440b      	add	r3, r1
 8001d66:	3304      	adds	r3, #4
 8001d68:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	7d1b      	ldrb	r3, [r3, #20]
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d111      	bne.n	8001d96 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	3318      	adds	r3, #24
 8001d7a:	011b      	lsls	r3, r3, #4
 8001d7c:	4413      	add	r3, r2
 8001d7e:	3304      	adds	r3, #4
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	68fa      	ldr	r2, [r7, #12]
 8001d84:	6811      	ldr	r1, [r2, #0]
 8001d86:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	3318      	adds	r3, #24
 8001d8e:	011b      	lsls	r3, r3, #4
 8001d90:	440b      	add	r3, r1
 8001d92:	3304      	adds	r3, #4
 8001d94:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	3307      	adds	r3, #7
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	061a      	lsls	r2, r3, #24
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	3306      	adds	r3, #6
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	041b      	lsls	r3, r3, #16
 8001da6:	431a      	orrs	r2, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	3305      	adds	r3, #5
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	021b      	lsls	r3, r3, #8
 8001db0:	4313      	orrs	r3, r2
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	3204      	adds	r2, #4
 8001db6:	7812      	ldrb	r2, [r2, #0]
 8001db8:	4610      	mov	r0, r2
 8001dba:	68fa      	ldr	r2, [r7, #12]
 8001dbc:	6811      	ldr	r1, [r2, #0]
 8001dbe:	ea43 0200 	orr.w	r2, r3, r0
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	011b      	lsls	r3, r3, #4
 8001dc6:	440b      	add	r3, r1
 8001dc8:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001dcc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	3303      	adds	r3, #3
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	061a      	lsls	r2, r3, #24
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	3302      	adds	r3, #2
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	041b      	lsls	r3, r3, #16
 8001dde:	431a      	orrs	r2, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	3301      	adds	r3, #1
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	021b      	lsls	r3, r3, #8
 8001de8:	4313      	orrs	r3, r2
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	7812      	ldrb	r2, [r2, #0]
 8001dee:	4610      	mov	r0, r2
 8001df0:	68fa      	ldr	r2, [r7, #12]
 8001df2:	6811      	ldr	r1, [r2, #0]
 8001df4:	ea43 0200 	orr.w	r2, r3, r0
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	011b      	lsls	r3, r3, #4
 8001dfc:	440b      	add	r3, r1
 8001dfe:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001e02:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	3318      	adds	r3, #24
 8001e0c:	011b      	lsls	r3, r3, #4
 8001e0e:	4413      	add	r3, r2
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	68fa      	ldr	r2, [r7, #12]
 8001e14:	6811      	ldr	r1, [r2, #0]
 8001e16:	f043 0201 	orr.w	r2, r3, #1
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	3318      	adds	r3, #24
 8001e1e:	011b      	lsls	r3, r3, #4
 8001e20:	440b      	add	r3, r1
 8001e22:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001e24:	2300      	movs	r3, #0
 8001e26:	e00e      	b.n	8001e46 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e2c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e006      	b.n	8001e46 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e3c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
  }
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3724      	adds	r7, #36	@ 0x24
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bc80      	pop	{r7}
 8001e4e:	4770      	bx	lr

08001e50 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001e50:	b480      	push	{r7}
 8001e52:	b087      	sub	sp, #28
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	60f8      	str	r0, [r7, #12]
 8001e58:	60b9      	str	r1, [r7, #8]
 8001e5a:	607a      	str	r2, [r7, #4]
 8001e5c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e64:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001e66:	7dfb      	ldrb	r3, [r7, #23]
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d003      	beq.n	8001e74 <HAL_CAN_GetRxMessage+0x24>
 8001e6c:	7dfb      	ldrb	r3, [r7, #23]
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	f040 8103 	bne.w	800207a <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d10e      	bne.n	8001e98 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	f003 0303 	and.w	r3, r3, #3
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d116      	bne.n	8001eb6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e8c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e0f7      	b.n	8002088 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	691b      	ldr	r3, [r3, #16]
 8001e9e:	f003 0303 	and.w	r3, r3, #3
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d107      	bne.n	8001eb6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eaa:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e0e8      	b.n	8002088 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	331b      	adds	r3, #27
 8001ebe:	011b      	lsls	r3, r3, #4
 8001ec0:	4413      	add	r3, r2
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0204 	and.w	r2, r3, #4
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d10c      	bne.n	8001eee <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	331b      	adds	r3, #27
 8001edc:	011b      	lsls	r3, r3, #4
 8001ede:	4413      	add	r3, r2
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	0d5b      	lsrs	r3, r3, #21
 8001ee4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	601a      	str	r2, [r3, #0]
 8001eec:	e00b      	b.n	8001f06 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	331b      	adds	r3, #27
 8001ef6:	011b      	lsls	r3, r3, #4
 8001ef8:	4413      	add	r3, r2
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	08db      	lsrs	r3, r3, #3
 8001efe:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	331b      	adds	r3, #27
 8001f0e:	011b      	lsls	r3, r3, #4
 8001f10:	4413      	add	r3, r2
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0202 	and.w	r2, r3, #2
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	331b      	adds	r3, #27
 8001f24:	011b      	lsls	r3, r3, #4
 8001f26:	4413      	add	r3, r2
 8001f28:	3304      	adds	r3, #4
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 0308 	and.w	r3, r3, #8
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d003      	beq.n	8001f3c <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2208      	movs	r2, #8
 8001f38:	611a      	str	r2, [r3, #16]
 8001f3a:	e00b      	b.n	8001f54 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	331b      	adds	r3, #27
 8001f44:	011b      	lsls	r3, r3, #4
 8001f46:	4413      	add	r3, r2
 8001f48:	3304      	adds	r3, #4
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 020f 	and.w	r2, r3, #15
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	331b      	adds	r3, #27
 8001f5c:	011b      	lsls	r3, r3, #4
 8001f5e:	4413      	add	r3, r2
 8001f60:	3304      	adds	r3, #4
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	0a1b      	lsrs	r3, r3, #8
 8001f66:	b2da      	uxtb	r2, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	331b      	adds	r3, #27
 8001f74:	011b      	lsls	r3, r3, #4
 8001f76:	4413      	add	r3, r2
 8001f78:	3304      	adds	r3, #4
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	0c1b      	lsrs	r3, r3, #16
 8001f7e:	b29a      	uxth	r2, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	011b      	lsls	r3, r3, #4
 8001f8c:	4413      	add	r3, r2
 8001f8e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	b2da      	uxtb	r2, r3
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	011b      	lsls	r3, r3, #4
 8001fa2:	4413      	add	r3, r2
 8001fa4:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	0a1a      	lsrs	r2, r3, #8
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	3301      	adds	r3, #1
 8001fb0:	b2d2      	uxtb	r2, r2
 8001fb2:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	011b      	lsls	r3, r3, #4
 8001fbc:	4413      	add	r3, r2
 8001fbe:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	0c1a      	lsrs	r2, r3, #16
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	3302      	adds	r3, #2
 8001fca:	b2d2      	uxtb	r2, r2
 8001fcc:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	011b      	lsls	r3, r3, #4
 8001fd6:	4413      	add	r3, r2
 8001fd8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	0e1a      	lsrs	r2, r3, #24
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	3303      	adds	r3, #3
 8001fe4:	b2d2      	uxtb	r2, r2
 8001fe6:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	011b      	lsls	r3, r3, #4
 8001ff0:	4413      	add	r3, r2
 8001ff2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	3304      	adds	r3, #4
 8001ffc:	b2d2      	uxtb	r2, r2
 8001ffe:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	011b      	lsls	r3, r3, #4
 8002008:	4413      	add	r3, r2
 800200a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	0a1a      	lsrs	r2, r3, #8
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	3305      	adds	r3, #5
 8002016:	b2d2      	uxtb	r2, r2
 8002018:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	011b      	lsls	r3, r3, #4
 8002022:	4413      	add	r3, r2
 8002024:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	0c1a      	lsrs	r2, r3, #16
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	3306      	adds	r3, #6
 8002030:	b2d2      	uxtb	r2, r2
 8002032:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	011b      	lsls	r3, r3, #4
 800203c:	4413      	add	r3, r2
 800203e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	0e1a      	lsrs	r2, r3, #24
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	3307      	adds	r3, #7
 800204a:	b2d2      	uxtb	r2, r2
 800204c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d108      	bne.n	8002066 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	68da      	ldr	r2, [r3, #12]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f042 0220 	orr.w	r2, r2, #32
 8002062:	60da      	str	r2, [r3, #12]
 8002064:	e007      	b.n	8002076 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	691a      	ldr	r2, [r3, #16]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f042 0220 	orr.w	r2, r2, #32
 8002074:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002076:	2300      	movs	r3, #0
 8002078:	e006      	b.n	8002088 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800207e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
  }
}
 8002088:	4618      	mov	r0, r3
 800208a:	371c      	adds	r7, #28
 800208c:	46bd      	mov	sp, r7
 800208e:	bc80      	pop	{r7}
 8002090:	4770      	bx	lr

08002092 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8002092:	b480      	push	{r7}
 8002094:	b085      	sub	sp, #20
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
 800209a:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 800209c:	2300      	movs	r3, #0
 800209e:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020a6:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80020a8:	7afb      	ldrb	r3, [r7, #11]
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d002      	beq.n	80020b4 <HAL_CAN_GetRxFifoFillLevel+0x22>
 80020ae:	7afb      	ldrb	r3, [r7, #11]
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d10f      	bne.n	80020d4 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d106      	bne.n	80020c8 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	f003 0303 	and.w	r3, r3, #3
 80020c4:	60fb      	str	r3, [r7, #12]
 80020c6:	e005      	b.n	80020d4 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	691b      	ldr	r3, [r3, #16]
 80020ce:	f003 0303 	and.w	r3, r3, #3
 80020d2:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 80020d4:	68fb      	ldr	r3, [r7, #12]
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3714      	adds	r7, #20
 80020da:	46bd      	mov	sp, r7
 80020dc:	bc80      	pop	{r7}
 80020de:	4770      	bx	lr

080020e0 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b085      	sub	sp, #20
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020f0:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80020f2:	7bfb      	ldrb	r3, [r7, #15]
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d002      	beq.n	80020fe <HAL_CAN_ActivateNotification+0x1e>
 80020f8:	7bfb      	ldrb	r3, [r7, #15]
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d109      	bne.n	8002112 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	6959      	ldr	r1, [r3, #20]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	683a      	ldr	r2, [r7, #0]
 800210a:	430a      	orrs	r2, r1
 800210c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800210e:	2300      	movs	r3, #0
 8002110:	e006      	b.n	8002120 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002116:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
  }
}
 8002120:	4618      	mov	r0, r3
 8002122:	3714      	adds	r7, #20
 8002124:	46bd      	mov	sp, r7
 8002126:	bc80      	pop	{r7}
 8002128:	4770      	bx	lr
	...

0800212c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800212c:	b480      	push	{r7}
 800212e:	b085      	sub	sp, #20
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f003 0307 	and.w	r3, r3, #7
 800213a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800213c:	4b0c      	ldr	r3, [pc, #48]	@ (8002170 <__NVIC_SetPriorityGrouping+0x44>)
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002142:	68ba      	ldr	r2, [r7, #8]
 8002144:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002148:	4013      	ands	r3, r2
 800214a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002154:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002158:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800215c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800215e:	4a04      	ldr	r2, [pc, #16]	@ (8002170 <__NVIC_SetPriorityGrouping+0x44>)
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	60d3      	str	r3, [r2, #12]
}
 8002164:	bf00      	nop
 8002166:	3714      	adds	r7, #20
 8002168:	46bd      	mov	sp, r7
 800216a:	bc80      	pop	{r7}
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	e000ed00 	.word	0xe000ed00

08002174 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002178:	4b04      	ldr	r3, [pc, #16]	@ (800218c <__NVIC_GetPriorityGrouping+0x18>)
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	0a1b      	lsrs	r3, r3, #8
 800217e:	f003 0307 	and.w	r3, r3, #7
}
 8002182:	4618      	mov	r0, r3
 8002184:	46bd      	mov	sp, r7
 8002186:	bc80      	pop	{r7}
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	e000ed00 	.word	0xe000ed00

08002190 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	4603      	mov	r3, r0
 8002198:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800219a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	db0b      	blt.n	80021ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021a2:	79fb      	ldrb	r3, [r7, #7]
 80021a4:	f003 021f 	and.w	r2, r3, #31
 80021a8:	4906      	ldr	r1, [pc, #24]	@ (80021c4 <__NVIC_EnableIRQ+0x34>)
 80021aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ae:	095b      	lsrs	r3, r3, #5
 80021b0:	2001      	movs	r0, #1
 80021b2:	fa00 f202 	lsl.w	r2, r0, r2
 80021b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021ba:	bf00      	nop
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	bc80      	pop	{r7}
 80021c2:	4770      	bx	lr
 80021c4:	e000e100 	.word	0xe000e100

080021c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	4603      	mov	r3, r0
 80021d0:	6039      	str	r1, [r7, #0]
 80021d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	db0a      	blt.n	80021f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	b2da      	uxtb	r2, r3
 80021e0:	490c      	ldr	r1, [pc, #48]	@ (8002214 <__NVIC_SetPriority+0x4c>)
 80021e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e6:	0112      	lsls	r2, r2, #4
 80021e8:	b2d2      	uxtb	r2, r2
 80021ea:	440b      	add	r3, r1
 80021ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021f0:	e00a      	b.n	8002208 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	b2da      	uxtb	r2, r3
 80021f6:	4908      	ldr	r1, [pc, #32]	@ (8002218 <__NVIC_SetPriority+0x50>)
 80021f8:	79fb      	ldrb	r3, [r7, #7]
 80021fa:	f003 030f 	and.w	r3, r3, #15
 80021fe:	3b04      	subs	r3, #4
 8002200:	0112      	lsls	r2, r2, #4
 8002202:	b2d2      	uxtb	r2, r2
 8002204:	440b      	add	r3, r1
 8002206:	761a      	strb	r2, [r3, #24]
}
 8002208:	bf00      	nop
 800220a:	370c      	adds	r7, #12
 800220c:	46bd      	mov	sp, r7
 800220e:	bc80      	pop	{r7}
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	e000e100 	.word	0xe000e100
 8002218:	e000ed00 	.word	0xe000ed00

0800221c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800221c:	b480      	push	{r7}
 800221e:	b089      	sub	sp, #36	@ 0x24
 8002220:	af00      	add	r7, sp, #0
 8002222:	60f8      	str	r0, [r7, #12]
 8002224:	60b9      	str	r1, [r7, #8]
 8002226:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	f003 0307 	and.w	r3, r3, #7
 800222e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	f1c3 0307 	rsb	r3, r3, #7
 8002236:	2b04      	cmp	r3, #4
 8002238:	bf28      	it	cs
 800223a:	2304      	movcs	r3, #4
 800223c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	3304      	adds	r3, #4
 8002242:	2b06      	cmp	r3, #6
 8002244:	d902      	bls.n	800224c <NVIC_EncodePriority+0x30>
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	3b03      	subs	r3, #3
 800224a:	e000      	b.n	800224e <NVIC_EncodePriority+0x32>
 800224c:	2300      	movs	r3, #0
 800224e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002250:	f04f 32ff 	mov.w	r2, #4294967295
 8002254:	69bb      	ldr	r3, [r7, #24]
 8002256:	fa02 f303 	lsl.w	r3, r2, r3
 800225a:	43da      	mvns	r2, r3
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	401a      	ands	r2, r3
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002264:	f04f 31ff 	mov.w	r1, #4294967295
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	fa01 f303 	lsl.w	r3, r1, r3
 800226e:	43d9      	mvns	r1, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002274:	4313      	orrs	r3, r2
         );
}
 8002276:	4618      	mov	r0, r3
 8002278:	3724      	adds	r7, #36	@ 0x24
 800227a:	46bd      	mov	sp, r7
 800227c:	bc80      	pop	{r7}
 800227e:	4770      	bx	lr

08002280 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	3b01      	subs	r3, #1
 800228c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002290:	d301      	bcc.n	8002296 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002292:	2301      	movs	r3, #1
 8002294:	e00f      	b.n	80022b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002296:	4a0a      	ldr	r2, [pc, #40]	@ (80022c0 <SysTick_Config+0x40>)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	3b01      	subs	r3, #1
 800229c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800229e:	210f      	movs	r1, #15
 80022a0:	f04f 30ff 	mov.w	r0, #4294967295
 80022a4:	f7ff ff90 	bl	80021c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022a8:	4b05      	ldr	r3, [pc, #20]	@ (80022c0 <SysTick_Config+0x40>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022ae:	4b04      	ldr	r3, [pc, #16]	@ (80022c0 <SysTick_Config+0x40>)
 80022b0:	2207      	movs	r2, #7
 80022b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	e000e010 	.word	0xe000e010

080022c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	f7ff ff2d 	bl	800212c <__NVIC_SetPriorityGrouping>
}
 80022d2:	bf00      	nop
 80022d4:	3708      	adds	r7, #8
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022da:	b580      	push	{r7, lr}
 80022dc:	b086      	sub	sp, #24
 80022de:	af00      	add	r7, sp, #0
 80022e0:	4603      	mov	r3, r0
 80022e2:	60b9      	str	r1, [r7, #8]
 80022e4:	607a      	str	r2, [r7, #4]
 80022e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022e8:	2300      	movs	r3, #0
 80022ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022ec:	f7ff ff42 	bl	8002174 <__NVIC_GetPriorityGrouping>
 80022f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	68b9      	ldr	r1, [r7, #8]
 80022f6:	6978      	ldr	r0, [r7, #20]
 80022f8:	f7ff ff90 	bl	800221c <NVIC_EncodePriority>
 80022fc:	4602      	mov	r2, r0
 80022fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002302:	4611      	mov	r1, r2
 8002304:	4618      	mov	r0, r3
 8002306:	f7ff ff5f 	bl	80021c8 <__NVIC_SetPriority>
}
 800230a:	bf00      	nop
 800230c:	3718      	adds	r7, #24
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}

08002312 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002312:	b580      	push	{r7, lr}
 8002314:	b082      	sub	sp, #8
 8002316:	af00      	add	r7, sp, #0
 8002318:	4603      	mov	r3, r0
 800231a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800231c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002320:	4618      	mov	r0, r3
 8002322:	f7ff ff35 	bl	8002190 <__NVIC_EnableIRQ>
}
 8002326:	bf00      	nop
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}

0800232e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800232e:	b580      	push	{r7, lr}
 8002330:	b082      	sub	sp, #8
 8002332:	af00      	add	r7, sp, #0
 8002334:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f7ff ffa2 	bl	8002280 <SysTick_Config>
 800233c:	4603      	mov	r3, r0
}
 800233e:	4618      	mov	r0, r3
 8002340:	3708      	adds	r7, #8
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
	...

08002348 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002348:	b480      	push	{r7}
 800234a:	b08b      	sub	sp, #44	@ 0x2c
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002352:	2300      	movs	r3, #0
 8002354:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002356:	2300      	movs	r3, #0
 8002358:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800235a:	e169      	b.n	8002630 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800235c:	2201      	movs	r2, #1
 800235e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002360:	fa02 f303 	lsl.w	r3, r2, r3
 8002364:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	69fa      	ldr	r2, [r7, #28]
 800236c:	4013      	ands	r3, r2
 800236e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002370:	69ba      	ldr	r2, [r7, #24]
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	429a      	cmp	r2, r3
 8002376:	f040 8158 	bne.w	800262a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	4a9a      	ldr	r2, [pc, #616]	@ (80025e8 <HAL_GPIO_Init+0x2a0>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d05e      	beq.n	8002442 <HAL_GPIO_Init+0xfa>
 8002384:	4a98      	ldr	r2, [pc, #608]	@ (80025e8 <HAL_GPIO_Init+0x2a0>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d875      	bhi.n	8002476 <HAL_GPIO_Init+0x12e>
 800238a:	4a98      	ldr	r2, [pc, #608]	@ (80025ec <HAL_GPIO_Init+0x2a4>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d058      	beq.n	8002442 <HAL_GPIO_Init+0xfa>
 8002390:	4a96      	ldr	r2, [pc, #600]	@ (80025ec <HAL_GPIO_Init+0x2a4>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d86f      	bhi.n	8002476 <HAL_GPIO_Init+0x12e>
 8002396:	4a96      	ldr	r2, [pc, #600]	@ (80025f0 <HAL_GPIO_Init+0x2a8>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d052      	beq.n	8002442 <HAL_GPIO_Init+0xfa>
 800239c:	4a94      	ldr	r2, [pc, #592]	@ (80025f0 <HAL_GPIO_Init+0x2a8>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d869      	bhi.n	8002476 <HAL_GPIO_Init+0x12e>
 80023a2:	4a94      	ldr	r2, [pc, #592]	@ (80025f4 <HAL_GPIO_Init+0x2ac>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d04c      	beq.n	8002442 <HAL_GPIO_Init+0xfa>
 80023a8:	4a92      	ldr	r2, [pc, #584]	@ (80025f4 <HAL_GPIO_Init+0x2ac>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d863      	bhi.n	8002476 <HAL_GPIO_Init+0x12e>
 80023ae:	4a92      	ldr	r2, [pc, #584]	@ (80025f8 <HAL_GPIO_Init+0x2b0>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d046      	beq.n	8002442 <HAL_GPIO_Init+0xfa>
 80023b4:	4a90      	ldr	r2, [pc, #576]	@ (80025f8 <HAL_GPIO_Init+0x2b0>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d85d      	bhi.n	8002476 <HAL_GPIO_Init+0x12e>
 80023ba:	2b12      	cmp	r3, #18
 80023bc:	d82a      	bhi.n	8002414 <HAL_GPIO_Init+0xcc>
 80023be:	2b12      	cmp	r3, #18
 80023c0:	d859      	bhi.n	8002476 <HAL_GPIO_Init+0x12e>
 80023c2:	a201      	add	r2, pc, #4	@ (adr r2, 80023c8 <HAL_GPIO_Init+0x80>)
 80023c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023c8:	08002443 	.word	0x08002443
 80023cc:	0800241d 	.word	0x0800241d
 80023d0:	0800242f 	.word	0x0800242f
 80023d4:	08002471 	.word	0x08002471
 80023d8:	08002477 	.word	0x08002477
 80023dc:	08002477 	.word	0x08002477
 80023e0:	08002477 	.word	0x08002477
 80023e4:	08002477 	.word	0x08002477
 80023e8:	08002477 	.word	0x08002477
 80023ec:	08002477 	.word	0x08002477
 80023f0:	08002477 	.word	0x08002477
 80023f4:	08002477 	.word	0x08002477
 80023f8:	08002477 	.word	0x08002477
 80023fc:	08002477 	.word	0x08002477
 8002400:	08002477 	.word	0x08002477
 8002404:	08002477 	.word	0x08002477
 8002408:	08002477 	.word	0x08002477
 800240c:	08002425 	.word	0x08002425
 8002410:	08002439 	.word	0x08002439
 8002414:	4a79      	ldr	r2, [pc, #484]	@ (80025fc <HAL_GPIO_Init+0x2b4>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d013      	beq.n	8002442 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800241a:	e02c      	b.n	8002476 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	623b      	str	r3, [r7, #32]
          break;
 8002422:	e029      	b.n	8002478 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	3304      	adds	r3, #4
 800242a:	623b      	str	r3, [r7, #32]
          break;
 800242c:	e024      	b.n	8002478 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	3308      	adds	r3, #8
 8002434:	623b      	str	r3, [r7, #32]
          break;
 8002436:	e01f      	b.n	8002478 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	330c      	adds	r3, #12
 800243e:	623b      	str	r3, [r7, #32]
          break;
 8002440:	e01a      	b.n	8002478 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d102      	bne.n	8002450 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800244a:	2304      	movs	r3, #4
 800244c:	623b      	str	r3, [r7, #32]
          break;
 800244e:	e013      	b.n	8002478 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	2b01      	cmp	r3, #1
 8002456:	d105      	bne.n	8002464 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002458:	2308      	movs	r3, #8
 800245a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	69fa      	ldr	r2, [r7, #28]
 8002460:	611a      	str	r2, [r3, #16]
          break;
 8002462:	e009      	b.n	8002478 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002464:	2308      	movs	r3, #8
 8002466:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	69fa      	ldr	r2, [r7, #28]
 800246c:	615a      	str	r2, [r3, #20]
          break;
 800246e:	e003      	b.n	8002478 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002470:	2300      	movs	r3, #0
 8002472:	623b      	str	r3, [r7, #32]
          break;
 8002474:	e000      	b.n	8002478 <HAL_GPIO_Init+0x130>
          break;
 8002476:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	2bff      	cmp	r3, #255	@ 0xff
 800247c:	d801      	bhi.n	8002482 <HAL_GPIO_Init+0x13a>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	e001      	b.n	8002486 <HAL_GPIO_Init+0x13e>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	3304      	adds	r3, #4
 8002486:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002488:	69bb      	ldr	r3, [r7, #24]
 800248a:	2bff      	cmp	r3, #255	@ 0xff
 800248c:	d802      	bhi.n	8002494 <HAL_GPIO_Init+0x14c>
 800248e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	e002      	b.n	800249a <HAL_GPIO_Init+0x152>
 8002494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002496:	3b08      	subs	r3, #8
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	210f      	movs	r1, #15
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	fa01 f303 	lsl.w	r3, r1, r3
 80024a8:	43db      	mvns	r3, r3
 80024aa:	401a      	ands	r2, r3
 80024ac:	6a39      	ldr	r1, [r7, #32]
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	fa01 f303 	lsl.w	r3, r1, r3
 80024b4:	431a      	orrs	r2, r3
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	f000 80b1 	beq.w	800262a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80024c8:	4b4d      	ldr	r3, [pc, #308]	@ (8002600 <HAL_GPIO_Init+0x2b8>)
 80024ca:	699b      	ldr	r3, [r3, #24]
 80024cc:	4a4c      	ldr	r2, [pc, #304]	@ (8002600 <HAL_GPIO_Init+0x2b8>)
 80024ce:	f043 0301 	orr.w	r3, r3, #1
 80024d2:	6193      	str	r3, [r2, #24]
 80024d4:	4b4a      	ldr	r3, [pc, #296]	@ (8002600 <HAL_GPIO_Init+0x2b8>)
 80024d6:	699b      	ldr	r3, [r3, #24]
 80024d8:	f003 0301 	and.w	r3, r3, #1
 80024dc:	60bb      	str	r3, [r7, #8]
 80024de:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80024e0:	4a48      	ldr	r2, [pc, #288]	@ (8002604 <HAL_GPIO_Init+0x2bc>)
 80024e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024e4:	089b      	lsrs	r3, r3, #2
 80024e6:	3302      	adds	r3, #2
 80024e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024ec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80024ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024f0:	f003 0303 	and.w	r3, r3, #3
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	220f      	movs	r2, #15
 80024f8:	fa02 f303 	lsl.w	r3, r2, r3
 80024fc:	43db      	mvns	r3, r3
 80024fe:	68fa      	ldr	r2, [r7, #12]
 8002500:	4013      	ands	r3, r2
 8002502:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	4a40      	ldr	r2, [pc, #256]	@ (8002608 <HAL_GPIO_Init+0x2c0>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d013      	beq.n	8002534 <HAL_GPIO_Init+0x1ec>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	4a3f      	ldr	r2, [pc, #252]	@ (800260c <HAL_GPIO_Init+0x2c4>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d00d      	beq.n	8002530 <HAL_GPIO_Init+0x1e8>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	4a3e      	ldr	r2, [pc, #248]	@ (8002610 <HAL_GPIO_Init+0x2c8>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d007      	beq.n	800252c <HAL_GPIO_Init+0x1e4>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	4a3d      	ldr	r2, [pc, #244]	@ (8002614 <HAL_GPIO_Init+0x2cc>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d101      	bne.n	8002528 <HAL_GPIO_Init+0x1e0>
 8002524:	2303      	movs	r3, #3
 8002526:	e006      	b.n	8002536 <HAL_GPIO_Init+0x1ee>
 8002528:	2304      	movs	r3, #4
 800252a:	e004      	b.n	8002536 <HAL_GPIO_Init+0x1ee>
 800252c:	2302      	movs	r3, #2
 800252e:	e002      	b.n	8002536 <HAL_GPIO_Init+0x1ee>
 8002530:	2301      	movs	r3, #1
 8002532:	e000      	b.n	8002536 <HAL_GPIO_Init+0x1ee>
 8002534:	2300      	movs	r3, #0
 8002536:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002538:	f002 0203 	and.w	r2, r2, #3
 800253c:	0092      	lsls	r2, r2, #2
 800253e:	4093      	lsls	r3, r2
 8002540:	68fa      	ldr	r2, [r7, #12]
 8002542:	4313      	orrs	r3, r2
 8002544:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002546:	492f      	ldr	r1, [pc, #188]	@ (8002604 <HAL_GPIO_Init+0x2bc>)
 8002548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800254a:	089b      	lsrs	r3, r3, #2
 800254c:	3302      	adds	r3, #2
 800254e:	68fa      	ldr	r2, [r7, #12]
 8002550:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d006      	beq.n	800256e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002560:	4b2d      	ldr	r3, [pc, #180]	@ (8002618 <HAL_GPIO_Init+0x2d0>)
 8002562:	689a      	ldr	r2, [r3, #8]
 8002564:	492c      	ldr	r1, [pc, #176]	@ (8002618 <HAL_GPIO_Init+0x2d0>)
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	4313      	orrs	r3, r2
 800256a:	608b      	str	r3, [r1, #8]
 800256c:	e006      	b.n	800257c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800256e:	4b2a      	ldr	r3, [pc, #168]	@ (8002618 <HAL_GPIO_Init+0x2d0>)
 8002570:	689a      	ldr	r2, [r3, #8]
 8002572:	69bb      	ldr	r3, [r7, #24]
 8002574:	43db      	mvns	r3, r3
 8002576:	4928      	ldr	r1, [pc, #160]	@ (8002618 <HAL_GPIO_Init+0x2d0>)
 8002578:	4013      	ands	r3, r2
 800257a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d006      	beq.n	8002596 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002588:	4b23      	ldr	r3, [pc, #140]	@ (8002618 <HAL_GPIO_Init+0x2d0>)
 800258a:	68da      	ldr	r2, [r3, #12]
 800258c:	4922      	ldr	r1, [pc, #136]	@ (8002618 <HAL_GPIO_Init+0x2d0>)
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	4313      	orrs	r3, r2
 8002592:	60cb      	str	r3, [r1, #12]
 8002594:	e006      	b.n	80025a4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002596:	4b20      	ldr	r3, [pc, #128]	@ (8002618 <HAL_GPIO_Init+0x2d0>)
 8002598:	68da      	ldr	r2, [r3, #12]
 800259a:	69bb      	ldr	r3, [r7, #24]
 800259c:	43db      	mvns	r3, r3
 800259e:	491e      	ldr	r1, [pc, #120]	@ (8002618 <HAL_GPIO_Init+0x2d0>)
 80025a0:	4013      	ands	r3, r2
 80025a2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d006      	beq.n	80025be <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80025b0:	4b19      	ldr	r3, [pc, #100]	@ (8002618 <HAL_GPIO_Init+0x2d0>)
 80025b2:	685a      	ldr	r2, [r3, #4]
 80025b4:	4918      	ldr	r1, [pc, #96]	@ (8002618 <HAL_GPIO_Init+0x2d0>)
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	604b      	str	r3, [r1, #4]
 80025bc:	e006      	b.n	80025cc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80025be:	4b16      	ldr	r3, [pc, #88]	@ (8002618 <HAL_GPIO_Init+0x2d0>)
 80025c0:	685a      	ldr	r2, [r3, #4]
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	43db      	mvns	r3, r3
 80025c6:	4914      	ldr	r1, [pc, #80]	@ (8002618 <HAL_GPIO_Init+0x2d0>)
 80025c8:	4013      	ands	r3, r2
 80025ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d021      	beq.n	800261c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80025d8:	4b0f      	ldr	r3, [pc, #60]	@ (8002618 <HAL_GPIO_Init+0x2d0>)
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	490e      	ldr	r1, [pc, #56]	@ (8002618 <HAL_GPIO_Init+0x2d0>)
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	600b      	str	r3, [r1, #0]
 80025e4:	e021      	b.n	800262a <HAL_GPIO_Init+0x2e2>
 80025e6:	bf00      	nop
 80025e8:	10320000 	.word	0x10320000
 80025ec:	10310000 	.word	0x10310000
 80025f0:	10220000 	.word	0x10220000
 80025f4:	10210000 	.word	0x10210000
 80025f8:	10120000 	.word	0x10120000
 80025fc:	10110000 	.word	0x10110000
 8002600:	40021000 	.word	0x40021000
 8002604:	40010000 	.word	0x40010000
 8002608:	40010800 	.word	0x40010800
 800260c:	40010c00 	.word	0x40010c00
 8002610:	40011000 	.word	0x40011000
 8002614:	40011400 	.word	0x40011400
 8002618:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800261c:	4b0b      	ldr	r3, [pc, #44]	@ (800264c <HAL_GPIO_Init+0x304>)
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	43db      	mvns	r3, r3
 8002624:	4909      	ldr	r1, [pc, #36]	@ (800264c <HAL_GPIO_Init+0x304>)
 8002626:	4013      	ands	r3, r2
 8002628:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800262a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800262c:	3301      	adds	r3, #1
 800262e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002636:	fa22 f303 	lsr.w	r3, r2, r3
 800263a:	2b00      	cmp	r3, #0
 800263c:	f47f ae8e 	bne.w	800235c <HAL_GPIO_Init+0x14>
  }
}
 8002640:	bf00      	nop
 8002642:	bf00      	nop
 8002644:	372c      	adds	r7, #44	@ 0x2c
 8002646:	46bd      	mov	sp, r7
 8002648:	bc80      	pop	{r7}
 800264a:	4770      	bx	lr
 800264c:	40010400 	.word	0x40010400

08002650 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	460b      	mov	r3, r1
 800265a:	807b      	strh	r3, [r7, #2]
 800265c:	4613      	mov	r3, r2
 800265e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002660:	787b      	ldrb	r3, [r7, #1]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d003      	beq.n	800266e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002666:	887a      	ldrh	r2, [r7, #2]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800266c:	e003      	b.n	8002676 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800266e:	887b      	ldrh	r3, [r7, #2]
 8002670:	041a      	lsls	r2, r3, #16
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	611a      	str	r2, [r3, #16]
}
 8002676:	bf00      	nop
 8002678:	370c      	adds	r7, #12
 800267a:	46bd      	mov	sp, r7
 800267c:	bc80      	pop	{r7}
 800267e:	4770      	bx	lr

08002680 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b086      	sub	sp, #24
 8002684:	af02      	add	r7, sp, #8
 8002686:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d101      	bne.n	8002692 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e0fa      	b.n	8002888 <HAL_PCD_Init+0x208>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002698:	b2db      	uxtb	r3, r3
 800269a:	2b00      	cmp	r3, #0
 800269c:	d106      	bne.n	80026ac <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f005 f9ee 	bl	8007a88 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2203      	movs	r2, #3
 80026b0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2200      	movs	r2, #0
 80026b8:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4618      	mov	r0, r3
 80026c0:	f002 faf6 	bl	8004cb0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6818      	ldr	r0, [r3, #0]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	7c1a      	ldrb	r2, [r3, #16]
 80026cc:	f88d 2000 	strb.w	r2, [sp]
 80026d0:	3304      	adds	r3, #4
 80026d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026d4:	f002 fa1e 	bl	8004b14 <USB_CoreInit>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d005      	beq.n	80026ea <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2202      	movs	r2, #2
 80026e2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e0ce      	b.n	8002888 <HAL_PCD_Init+0x208>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	2100      	movs	r1, #0
 80026f0:	4618      	mov	r0, r3
 80026f2:	f002 faed 	bl	8004cd0 <USB_SetCurrentMode>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d005      	beq.n	8002708 <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2202      	movs	r2, #2
 8002700:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e0bf      	b.n	8002888 <HAL_PCD_Init+0x208>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002708:	2300      	movs	r3, #0
 800270a:	73fb      	strb	r3, [r7, #15]
 800270c:	e04a      	b.n	80027a4 <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800270e:	7bfa      	ldrb	r2, [r7, #15]
 8002710:	6879      	ldr	r1, [r7, #4]
 8002712:	4613      	mov	r3, r2
 8002714:	00db      	lsls	r3, r3, #3
 8002716:	4413      	add	r3, r2
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	440b      	add	r3, r1
 800271c:	3315      	adds	r3, #21
 800271e:	2201      	movs	r2, #1
 8002720:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002722:	7bfa      	ldrb	r2, [r7, #15]
 8002724:	6879      	ldr	r1, [r7, #4]
 8002726:	4613      	mov	r3, r2
 8002728:	00db      	lsls	r3, r3, #3
 800272a:	4413      	add	r3, r2
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	440b      	add	r3, r1
 8002730:	3314      	adds	r3, #20
 8002732:	7bfa      	ldrb	r2, [r7, #15]
 8002734:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002736:	7bfa      	ldrb	r2, [r7, #15]
 8002738:	7bfb      	ldrb	r3, [r7, #15]
 800273a:	b298      	uxth	r0, r3
 800273c:	6879      	ldr	r1, [r7, #4]
 800273e:	4613      	mov	r3, r2
 8002740:	00db      	lsls	r3, r3, #3
 8002742:	4413      	add	r3, r2
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	440b      	add	r3, r1
 8002748:	332e      	adds	r3, #46	@ 0x2e
 800274a:	4602      	mov	r2, r0
 800274c:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800274e:	7bfa      	ldrb	r2, [r7, #15]
 8002750:	6879      	ldr	r1, [r7, #4]
 8002752:	4613      	mov	r3, r2
 8002754:	00db      	lsls	r3, r3, #3
 8002756:	4413      	add	r3, r2
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	440b      	add	r3, r1
 800275c:	3318      	adds	r3, #24
 800275e:	2200      	movs	r2, #0
 8002760:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002762:	7bfa      	ldrb	r2, [r7, #15]
 8002764:	6879      	ldr	r1, [r7, #4]
 8002766:	4613      	mov	r3, r2
 8002768:	00db      	lsls	r3, r3, #3
 800276a:	4413      	add	r3, r2
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	440b      	add	r3, r1
 8002770:	331c      	adds	r3, #28
 8002772:	2200      	movs	r2, #0
 8002774:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002776:	7bfa      	ldrb	r2, [r7, #15]
 8002778:	6879      	ldr	r1, [r7, #4]
 800277a:	4613      	mov	r3, r2
 800277c:	00db      	lsls	r3, r3, #3
 800277e:	4413      	add	r3, r2
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	440b      	add	r3, r1
 8002784:	3320      	adds	r3, #32
 8002786:	2200      	movs	r2, #0
 8002788:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800278a:	7bfa      	ldrb	r2, [r7, #15]
 800278c:	6879      	ldr	r1, [r7, #4]
 800278e:	4613      	mov	r3, r2
 8002790:	00db      	lsls	r3, r3, #3
 8002792:	4413      	add	r3, r2
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	440b      	add	r3, r1
 8002798:	3324      	adds	r3, #36	@ 0x24
 800279a:	2200      	movs	r2, #0
 800279c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800279e:	7bfb      	ldrb	r3, [r7, #15]
 80027a0:	3301      	adds	r3, #1
 80027a2:	73fb      	strb	r3, [r7, #15]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	791b      	ldrb	r3, [r3, #4]
 80027a8:	7bfa      	ldrb	r2, [r7, #15]
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d3af      	bcc.n	800270e <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027ae:	2300      	movs	r3, #0
 80027b0:	73fb      	strb	r3, [r7, #15]
 80027b2:	e044      	b.n	800283e <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80027b4:	7bfa      	ldrb	r2, [r7, #15]
 80027b6:	6879      	ldr	r1, [r7, #4]
 80027b8:	4613      	mov	r3, r2
 80027ba:	00db      	lsls	r3, r3, #3
 80027bc:	4413      	add	r3, r2
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	440b      	add	r3, r1
 80027c2:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80027c6:	2200      	movs	r2, #0
 80027c8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80027ca:	7bfa      	ldrb	r2, [r7, #15]
 80027cc:	6879      	ldr	r1, [r7, #4]
 80027ce:	4613      	mov	r3, r2
 80027d0:	00db      	lsls	r3, r3, #3
 80027d2:	4413      	add	r3, r2
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	440b      	add	r3, r1
 80027d8:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80027dc:	7bfa      	ldrb	r2, [r7, #15]
 80027de:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80027e0:	7bfa      	ldrb	r2, [r7, #15]
 80027e2:	6879      	ldr	r1, [r7, #4]
 80027e4:	4613      	mov	r3, r2
 80027e6:	00db      	lsls	r3, r3, #3
 80027e8:	4413      	add	r3, r2
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	440b      	add	r3, r1
 80027ee:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80027f2:	2200      	movs	r2, #0
 80027f4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80027f6:	7bfa      	ldrb	r2, [r7, #15]
 80027f8:	6879      	ldr	r1, [r7, #4]
 80027fa:	4613      	mov	r3, r2
 80027fc:	00db      	lsls	r3, r3, #3
 80027fe:	4413      	add	r3, r2
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	440b      	add	r3, r1
 8002804:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002808:	2200      	movs	r2, #0
 800280a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800280c:	7bfa      	ldrb	r2, [r7, #15]
 800280e:	6879      	ldr	r1, [r7, #4]
 8002810:	4613      	mov	r3, r2
 8002812:	00db      	lsls	r3, r3, #3
 8002814:	4413      	add	r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	440b      	add	r3, r1
 800281a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800281e:	2200      	movs	r2, #0
 8002820:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002822:	7bfa      	ldrb	r2, [r7, #15]
 8002824:	6879      	ldr	r1, [r7, #4]
 8002826:	4613      	mov	r3, r2
 8002828:	00db      	lsls	r3, r3, #3
 800282a:	4413      	add	r3, r2
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	440b      	add	r3, r1
 8002830:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002834:	2200      	movs	r2, #0
 8002836:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002838:	7bfb      	ldrb	r3, [r7, #15]
 800283a:	3301      	adds	r3, #1
 800283c:	73fb      	strb	r3, [r7, #15]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	791b      	ldrb	r3, [r3, #4]
 8002842:	7bfa      	ldrb	r2, [r7, #15]
 8002844:	429a      	cmp	r2, r3
 8002846:	d3b5      	bcc.n	80027b4 <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6818      	ldr	r0, [r3, #0]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	7c1a      	ldrb	r2, [r3, #16]
 8002850:	f88d 2000 	strb.w	r2, [sp]
 8002854:	3304      	adds	r3, #4
 8002856:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002858:	f002 fa86 	bl	8004d68 <USB_DevInit>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d005      	beq.n	800286e <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2202      	movs	r2, #2
 8002866:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e00c      	b.n	8002888 <HAL_PCD_Init+0x208>
  }

  hpcd->USB_Address = 0U;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2201      	movs	r2, #1
 8002878:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
  (void)USB_DevDisconnect(hpcd->Instance);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4618      	mov	r0, r3
 8002882:	f003 fa11 	bl	8005ca8 <USB_DevDisconnect>

  return HAL_OK;
 8002886:	2300      	movs	r3, #0
}
 8002888:	4618      	mov	r0, r3
 800288a:	3710      	adds	r7, #16
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}

08002890 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d101      	bne.n	80028a6 <HAL_PCD_Start+0x16>
 80028a2:	2302      	movs	r3, #2
 80028a4:	e012      	b.n	80028cc <HAL_PCD_Start+0x3c>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2201      	movs	r2, #1
 80028aa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  __HAL_PCD_ENABLE(hpcd);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4618      	mov	r0, r3
 80028b4:	f002 f9ec 	bl	8004c90 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4618      	mov	r0, r3
 80028be:	f003 f9d3 	bl	8005c68 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80028ca:	2300      	movs	r3, #0
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3708      	adds	r7, #8
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80028d4:	b590      	push	{r4, r7, lr}
 80028d6:	b08d      	sub	sp, #52	@ 0x34
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028e2:	6a3b      	ldr	r3, [r7, #32]
 80028e4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4618      	mov	r0, r3
 80028ec:	f003 fa8a 	bl	8005e04 <USB_GetMode>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	f040 8446 	bne.w	8003184 <HAL_PCD_IRQHandler+0x8b0>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4618      	mov	r0, r3
 80028fe:	f003 f9f3 	bl	8005ce8 <USB_ReadInterrupts>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	f000 843c 	beq.w	8003182 <HAL_PCD_IRQHandler+0x8ae>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	0a1b      	lsrs	r3, r3, #8
 8002914:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4618      	mov	r0, r3
 8002924:	f003 f9e0 	bl	8005ce8 <USB_ReadInterrupts>
 8002928:	4603      	mov	r3, r0
 800292a:	f003 0302 	and.w	r3, r3, #2
 800292e:	2b02      	cmp	r3, #2
 8002930:	d107      	bne.n	8002942 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	695a      	ldr	r2, [r3, #20]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f002 0202 	and.w	r2, r2, #2
 8002940:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4618      	mov	r0, r3
 8002948:	f003 f9ce 	bl	8005ce8 <USB_ReadInterrupts>
 800294c:	4603      	mov	r3, r0
 800294e:	f003 0310 	and.w	r3, r3, #16
 8002952:	2b10      	cmp	r3, #16
 8002954:	d161      	bne.n	8002a1a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	699a      	ldr	r2, [r3, #24]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f022 0210 	bic.w	r2, r2, #16
 8002964:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002966:	6a3b      	ldr	r3, [r7, #32]
 8002968:	6a1b      	ldr	r3, [r3, #32]
 800296a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800296c:	69bb      	ldr	r3, [r7, #24]
 800296e:	f003 020f 	and.w	r2, r3, #15
 8002972:	4613      	mov	r3, r2
 8002974:	00db      	lsls	r3, r3, #3
 8002976:	4413      	add	r3, r2
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	4413      	add	r3, r2
 8002982:	3304      	adds	r3, #4
 8002984:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	0c5b      	lsrs	r3, r3, #17
 800298a:	f003 030f 	and.w	r3, r3, #15
 800298e:	2b02      	cmp	r3, #2
 8002990:	d124      	bne.n	80029dc <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002992:	69ba      	ldr	r2, [r7, #24]
 8002994:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002998:	4013      	ands	r3, r2
 800299a:	2b00      	cmp	r3, #0
 800299c:	d035      	beq.n	8002a0a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80029a2:	69bb      	ldr	r3, [r7, #24]
 80029a4:	091b      	lsrs	r3, r3, #4
 80029a6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80029a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	461a      	mov	r2, r3
 80029b0:	6a38      	ldr	r0, [r7, #32]
 80029b2:	f003 f80b 	bl	80059cc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	68da      	ldr	r2, [r3, #12]
 80029ba:	69bb      	ldr	r3, [r7, #24]
 80029bc:	091b      	lsrs	r3, r3, #4
 80029be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029c2:	441a      	add	r2, r3
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	695a      	ldr	r2, [r3, #20]
 80029cc:	69bb      	ldr	r3, [r7, #24]
 80029ce:	091b      	lsrs	r3, r3, #4
 80029d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029d4:	441a      	add	r2, r3
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	615a      	str	r2, [r3, #20]
 80029da:	e016      	b.n	8002a0a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	0c5b      	lsrs	r3, r3, #17
 80029e0:	f003 030f 	and.w	r3, r3, #15
 80029e4:	2b06      	cmp	r3, #6
 80029e6:	d110      	bne.n	8002a0a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80029ee:	2208      	movs	r2, #8
 80029f0:	4619      	mov	r1, r3
 80029f2:	6a38      	ldr	r0, [r7, #32]
 80029f4:	f002 ffea 	bl	80059cc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	695a      	ldr	r2, [r3, #20]
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	091b      	lsrs	r3, r3, #4
 8002a00:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a04:	441a      	add	r2, r3
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	699a      	ldr	r2, [r3, #24]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f042 0210 	orr.w	r2, r2, #16
 8002a18:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f003 f962 	bl	8005ce8 <USB_ReadInterrupts>
 8002a24:	4603      	mov	r3, r0
 8002a26:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a2a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002a2e:	f040 80a7 	bne.w	8002b80 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002a32:	2300      	movs	r3, #0
 8002a34:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f003 f966 	bl	8005d0c <USB_ReadDevAllOutEpInterrupt>
 8002a40:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002a42:	e099      	b.n	8002b78 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002a44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a46:	f003 0301 	and.w	r3, r3, #1
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	f000 808e 	beq.w	8002b6c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a56:	b2d2      	uxtb	r2, r2
 8002a58:	4611      	mov	r1, r2
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f003 f988 	bl	8005d70 <USB_ReadDevOutEPInterrupt>
 8002a60:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	f003 0301 	and.w	r3, r3, #1
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d00c      	beq.n	8002a86 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a6e:	015a      	lsls	r2, r3, #5
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	4413      	add	r3, r2
 8002a74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a78:	461a      	mov	r2, r3
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002a7e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f000 fe43 	bl	800370c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	f003 0308 	and.w	r3, r3, #8
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d00c      	beq.n	8002aaa <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a92:	015a      	lsls	r2, r3, #5
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	4413      	add	r3, r2
 8002a98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	2308      	movs	r3, #8
 8002aa0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002aa2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f000 fe7f 	bl	80037a8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	f003 0310 	and.w	r3, r3, #16
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d008      	beq.n	8002ac6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab6:	015a      	lsls	r2, r3, #5
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	4413      	add	r3, r2
 8002abc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	2310      	movs	r3, #16
 8002ac4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	f003 0302 	and.w	r3, r3, #2
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d030      	beq.n	8002b32 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002ad0:	6a3b      	ldr	r3, [r7, #32]
 8002ad2:	695b      	ldr	r3, [r3, #20]
 8002ad4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ad8:	2b80      	cmp	r3, #128	@ 0x80
 8002ada:	d109      	bne.n	8002af0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	69fa      	ldr	r2, [r7, #28]
 8002ae6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002aea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002aee:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002af0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002af2:	4613      	mov	r3, r2
 8002af4:	00db      	lsls	r3, r3, #3
 8002af6:	4413      	add	r3, r2
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	4413      	add	r3, r2
 8002b02:	3304      	adds	r3, #4
 8002b04:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	78db      	ldrb	r3, [r3, #3]
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d108      	bne.n	8002b20 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	2200      	movs	r2, #0
 8002b12:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	4619      	mov	r1, r3
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f005 f880 	bl	8007c20 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b22:	015a      	lsls	r2, r3, #5
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	4413      	add	r3, r2
 8002b28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	2302      	movs	r3, #2
 8002b30:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	f003 0320 	and.w	r3, r3, #32
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d008      	beq.n	8002b4e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b3e:	015a      	lsls	r2, r3, #5
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	4413      	add	r3, r2
 8002b44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b48:	461a      	mov	r2, r3
 8002b4a:	2320      	movs	r3, #32
 8002b4c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d009      	beq.n	8002b6c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b5a:	015a      	lsls	r2, r3, #5
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	4413      	add	r3, r2
 8002b60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b64:	461a      	mov	r2, r3
 8002b66:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002b6a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b6e:	3301      	adds	r3, #1
 8002b70:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002b72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b74:	085b      	lsrs	r3, r3, #1
 8002b76:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002b78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	f47f af62 	bne.w	8002a44 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4618      	mov	r0, r3
 8002b86:	f003 f8af 	bl	8005ce8 <USB_ReadInterrupts>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b90:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002b94:	f040 80a4 	bne.w	8002ce0 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f003 f8ce 	bl	8005d3e <USB_ReadDevAllInEpInterrupt>
 8002ba2:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002ba8:	e096      	b.n	8002cd8 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002baa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bac:	f003 0301 	and.w	r3, r3, #1
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	f000 808b 	beq.w	8002ccc <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bbc:	b2d2      	uxtb	r2, r2
 8002bbe:	4611      	mov	r1, r2
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f003 f8f2 	bl	8005daa <USB_ReadDevInEPInterrupt>
 8002bc6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	f003 0301 	and.w	r3, r3, #1
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d020      	beq.n	8002c14 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bd4:	f003 030f 	and.w	r3, r3, #15
 8002bd8:	2201      	movs	r2, #1
 8002bda:	fa02 f303 	lsl.w	r3, r2, r3
 8002bde:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002be6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	43db      	mvns	r3, r3
 8002bec:	69f9      	ldr	r1, [r7, #28]
 8002bee:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bf8:	015a      	lsls	r2, r3, #5
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	4413      	add	r3, r2
 8002bfe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c02:	461a      	mov	r2, r3
 8002c04:	2301      	movs	r3, #1
 8002c06:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f004 ff8b 	bl	8007b2a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	f003 0308 	and.w	r3, r3, #8
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d008      	beq.n	8002c30 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c20:	015a      	lsls	r2, r3, #5
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	4413      	add	r3, r2
 8002c26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	2308      	movs	r3, #8
 8002c2e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	f003 0310 	and.w	r3, r3, #16
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d008      	beq.n	8002c4c <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c3c:	015a      	lsls	r2, r3, #5
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	4413      	add	r3, r2
 8002c42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c46:	461a      	mov	r2, r3
 8002c48:	2310      	movs	r3, #16
 8002c4a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d008      	beq.n	8002c68 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c58:	015a      	lsls	r2, r3, #5
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	4413      	add	r3, r2
 8002c5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c62:	461a      	mov	r2, r3
 8002c64:	2340      	movs	r3, #64	@ 0x40
 8002c66:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	f003 0302 	and.w	r3, r3, #2
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d023      	beq.n	8002cba <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002c72:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002c74:	6a38      	ldr	r0, [r7, #32]
 8002c76:	f002 f99f 	bl	8004fb8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002c7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	00db      	lsls	r3, r3, #3
 8002c80:	4413      	add	r3, r2
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	3310      	adds	r3, #16
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	4413      	add	r3, r2
 8002c8a:	3304      	adds	r3, #4
 8002c8c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	78db      	ldrb	r3, [r3, #3]
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d108      	bne.n	8002ca8 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f004 ffce 	bl	8007c44 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002caa:	015a      	lsls	r2, r3, #5
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	4413      	add	r3, r2
 8002cb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	2302      	movs	r3, #2
 8002cb8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d003      	beq.n	8002ccc <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002cc4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f000 fc98 	bl	80035fc <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cce:	3301      	adds	r3, #1
 8002cd0:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002cd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cd4:	085b      	lsrs	r3, r3, #1
 8002cd6:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002cd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	f47f af65 	bne.w	8002baa <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f002 ffff 	bl	8005ce8 <USB_ReadInterrupts>
 8002cea:	4603      	mov	r3, r0
 8002cec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002cf0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002cf4:	d114      	bne.n	8002d20 <HAL_PCD_IRQHandler+0x44c>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	69fa      	ldr	r2, [r7, #28]
 8002d00:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d04:	f023 0301 	bic.w	r3, r3, #1
 8002d08:	6053      	str	r3, [r2, #4]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResumeCallback(hpcd);
#else
      HAL_PCD_ResumeCallback(hpcd);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f004 ff7a 	bl	8007c04 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	695a      	ldr	r2, [r3, #20]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002d1e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4618      	mov	r0, r3
 8002d26:	f002 ffdf 	bl	8005ce8 <USB_ReadInterrupts>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d30:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d34:	d112      	bne.n	8002d5c <HAL_PCD_IRQHandler+0x488>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f003 0301 	and.w	r3, r3, #1
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d102      	bne.n	8002d4c <HAL_PCD_IRQHandler+0x478>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f004 ff36 	bl	8007bb8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	695a      	ldr	r2, [r3, #20]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002d5a:	615a      	str	r2, [r3, #20]
    }
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4618      	mov	r0, r3
 8002d62:	f002 ffc1 	bl	8005ce8 <USB_ReadInterrupts>
 8002d66:	4603      	mov	r3, r0
 8002d68:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d70:	f040 80b6 	bne.w	8002ee0 <HAL_PCD_IRQHandler+0x60c>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	69fa      	ldr	r2, [r7, #28]
 8002d7e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d82:	f023 0301 	bic.w	r3, r3, #1
 8002d86:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2110      	movs	r1, #16
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f002 f912 	bl	8004fb8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d94:	2300      	movs	r3, #0
 8002d96:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d98:	e046      	b.n	8002e28 <HAL_PCD_IRQHandler+0x554>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002d9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d9c:	015a      	lsls	r2, r3, #5
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	4413      	add	r3, r2
 8002da2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002da6:	461a      	mov	r2, r3
 8002da8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002dac:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002dae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002db0:	015a      	lsls	r2, r3, #5
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	4413      	add	r3, r2
 8002db6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002dbe:	0151      	lsls	r1, r2, #5
 8002dc0:	69fa      	ldr	r2, [r7, #28]
 8002dc2:	440a      	add	r2, r1
 8002dc4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002dc8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002dcc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002dce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dd0:	015a      	lsls	r2, r3, #5
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	4413      	add	r3, r2
 8002dd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002dda:	461a      	mov	r2, r3
 8002ddc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002de0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002de2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002de4:	015a      	lsls	r2, r3, #5
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	4413      	add	r3, r2
 8002dea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002df2:	0151      	lsls	r1, r2, #5
 8002df4:	69fa      	ldr	r2, [r7, #28]
 8002df6:	440a      	add	r2, r1
 8002df8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002dfc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002e00:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002e02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e04:	015a      	lsls	r2, r3, #5
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	4413      	add	r3, r2
 8002e0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e12:	0151      	lsls	r1, r2, #5
 8002e14:	69fa      	ldr	r2, [r7, #28]
 8002e16:	440a      	add	r2, r1
 8002e18:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002e1c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002e20:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e24:	3301      	adds	r3, #1
 8002e26:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	791b      	ldrb	r3, [r3, #4]
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d3b2      	bcc.n	8002d9a <HAL_PCD_IRQHandler+0x4c6>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e3a:	69db      	ldr	r3, [r3, #28]
 8002e3c:	69fa      	ldr	r2, [r7, #28]
 8002e3e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e42:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002e46:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	7bdb      	ldrb	r3, [r3, #15]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d016      	beq.n	8002e7e <HAL_PCD_IRQHandler+0x5aa>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e5a:	69fa      	ldr	r2, [r7, #28]
 8002e5c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e60:	f043 030b 	orr.w	r3, r3, #11
 8002e64:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e70:	69fa      	ldr	r2, [r7, #28]
 8002e72:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e76:	f043 030b 	orr.w	r3, r3, #11
 8002e7a:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e7c:	e015      	b.n	8002eaa <HAL_PCD_IRQHandler+0x5d6>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e84:	695b      	ldr	r3, [r3, #20]
 8002e86:	69fa      	ldr	r2, [r7, #28]
 8002e88:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e8c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002e90:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002e94:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e9c:	691b      	ldr	r3, [r3, #16]
 8002e9e:	69fa      	ldr	r2, [r7, #28]
 8002ea0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ea4:	f043 030b 	orr.w	r3, r3, #11
 8002ea8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	69fa      	ldr	r2, [r7, #28]
 8002eb4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002eb8:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002ebc:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002ec8:	4619      	mov	r1, r3
 8002eca:	4610      	mov	r0, r2
 8002ecc:	f002 ffca 	bl	8005e64 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	695a      	ldr	r2, [r3, #20]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002ede:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f002 feff 	bl	8005ce8 <USB_ReadInterrupts>
 8002eea:	4603      	mov	r3, r0
 8002eec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ef0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ef4:	d123      	bne.n	8002f3e <HAL_PCD_IRQHandler+0x66a>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4618      	mov	r0, r3
 8002efc:	f002 ff8f 	bl	8005e1e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4618      	mov	r0, r3
 8002f06:	f002 f8cd 	bl	80050a4 <USB_GetDevSpeed>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681c      	ldr	r4, [r3, #0]
 8002f16:	f001 f9c5 	bl	80042a4 <HAL_RCC_GetHCLKFreq>
 8002f1a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002f20:	461a      	mov	r2, r3
 8002f22:	4620      	mov	r0, r4
 8002f24:	f001 fe18 	bl	8004b58 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f004 fe26 	bl	8007b7a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	695a      	ldr	r2, [r3, #20]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002f3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4618      	mov	r0, r3
 8002f44:	f002 fed0 	bl	8005ce8 <USB_ReadInterrupts>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	f003 0308 	and.w	r3, r3, #8
 8002f4e:	2b08      	cmp	r3, #8
 8002f50:	d10a      	bne.n	8002f68 <HAL_PCD_IRQHandler+0x694>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f004 fe03 	bl	8007b5e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	695a      	ldr	r2, [r3, #20]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f002 0208 	and.w	r2, r2, #8
 8002f66:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f002 febb 	bl	8005ce8 <USB_ReadInterrupts>
 8002f72:	4603      	mov	r3, r0
 8002f74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f78:	2b80      	cmp	r3, #128	@ 0x80
 8002f7a:	d123      	bne.n	8002fc4 <HAL_PCD_IRQHandler+0x6f0>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002f7c:	6a3b      	ldr	r3, [r7, #32]
 8002f7e:	699b      	ldr	r3, [r3, #24]
 8002f80:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002f84:	6a3b      	ldr	r3, [r7, #32]
 8002f86:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f88:	2301      	movs	r3, #1
 8002f8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f8c:	e014      	b.n	8002fb8 <HAL_PCD_IRQHandler+0x6e4>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002f8e:	6879      	ldr	r1, [r7, #4]
 8002f90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f92:	4613      	mov	r3, r2
 8002f94:	00db      	lsls	r3, r3, #3
 8002f96:	4413      	add	r3, r2
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	440b      	add	r3, r1
 8002f9c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d105      	bne.n	8002fb2 <HAL_PCD_IRQHandler+0x6de>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	4619      	mov	r1, r3
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f000 faf4 	bl	800359a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb4:	3301      	adds	r3, #1
 8002fb6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	791b      	ldrb	r3, [r3, #4]
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d3e4      	bcc.n	8002f8e <HAL_PCD_IRQHandler+0x6ba>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f002 fe8d 	bl	8005ce8 <USB_ReadInterrupts>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002fd4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002fd8:	d13c      	bne.n	8003054 <HAL_PCD_IRQHandler+0x780>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002fda:	2301      	movs	r3, #1
 8002fdc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fde:	e02b      	b.n	8003038 <HAL_PCD_IRQHandler+0x764>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fe2:	015a      	lsls	r2, r3, #5
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	4413      	add	r3, r2
 8002fe8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002ff0:	6879      	ldr	r1, [r7, #4]
 8002ff2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	00db      	lsls	r3, r3, #3
 8002ff8:	4413      	add	r3, r2
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	440b      	add	r3, r1
 8002ffe:	3318      	adds	r3, #24
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	2b01      	cmp	r3, #1
 8003004:	d115      	bne.n	8003032 <HAL_PCD_IRQHandler+0x75e>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003006:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003008:	2b00      	cmp	r3, #0
 800300a:	da12      	bge.n	8003032 <HAL_PCD_IRQHandler+0x75e>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800300c:	6879      	ldr	r1, [r7, #4]
 800300e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003010:	4613      	mov	r3, r2
 8003012:	00db      	lsls	r3, r3, #3
 8003014:	4413      	add	r3, r2
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	440b      	add	r3, r1
 800301a:	3317      	adds	r3, #23
 800301c:	2201      	movs	r2, #1
 800301e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003022:	b2db      	uxtb	r3, r3
 8003024:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003028:	b2db      	uxtb	r3, r3
 800302a:	4619      	mov	r1, r3
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f000 fab4 	bl	800359a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003034:	3301      	adds	r3, #1
 8003036:	627b      	str	r3, [r7, #36]	@ 0x24
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	791b      	ldrb	r3, [r3, #4]
 800303c:	461a      	mov	r2, r3
 800303e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003040:	4293      	cmp	r3, r2
 8003042:	d3cd      	bcc.n	8002fe0 <HAL_PCD_IRQHandler+0x70c>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	695a      	ldr	r2, [r3, #20]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003052:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4618      	mov	r0, r3
 800305a:	f002 fe45 	bl	8005ce8 <USB_ReadInterrupts>
 800305e:	4603      	mov	r3, r0
 8003060:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003064:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003068:	d156      	bne.n	8003118 <HAL_PCD_IRQHandler+0x844>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800306a:	2301      	movs	r3, #1
 800306c:	627b      	str	r3, [r7, #36]	@ 0x24
 800306e:	e045      	b.n	80030fc <HAL_PCD_IRQHandler+0x828>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003072:	015a      	lsls	r2, r3, #5
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	4413      	add	r3, r2
 8003078:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003080:	6879      	ldr	r1, [r7, #4]
 8003082:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003084:	4613      	mov	r3, r2
 8003086:	00db      	lsls	r3, r3, #3
 8003088:	4413      	add	r3, r2
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	440b      	add	r3, r1
 800308e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	2b01      	cmp	r3, #1
 8003096:	d12e      	bne.n	80030f6 <HAL_PCD_IRQHandler+0x822>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003098:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800309a:	2b00      	cmp	r3, #0
 800309c:	da2b      	bge.n	80030f6 <HAL_PCD_IRQHandler+0x822>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800309e:	69bb      	ldr	r3, [r7, #24]
 80030a0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80030aa:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d121      	bne.n	80030f6 <HAL_PCD_IRQHandler+0x822>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80030b2:	6879      	ldr	r1, [r7, #4]
 80030b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030b6:	4613      	mov	r3, r2
 80030b8:	00db      	lsls	r3, r3, #3
 80030ba:	4413      	add	r3, r2
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	440b      	add	r3, r1
 80030c0:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80030c4:	2201      	movs	r2, #1
 80030c6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80030c8:	6a3b      	ldr	r3, [r7, #32]
 80030ca:	699b      	ldr	r3, [r3, #24]
 80030cc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80030d0:	6a3b      	ldr	r3, [r7, #32]
 80030d2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80030d4:	6a3b      	ldr	r3, [r7, #32]
 80030d6:	695b      	ldr	r3, [r3, #20]
 80030d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d10a      	bne.n	80030f6 <HAL_PCD_IRQHandler+0x822>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	69fa      	ldr	r2, [r7, #28]
 80030ea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80030ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80030f2:	6053      	str	r3, [r2, #4]
            break;
 80030f4:	e008      	b.n	8003108 <HAL_PCD_IRQHandler+0x834>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80030f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030f8:	3301      	adds	r3, #1
 80030fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	791b      	ldrb	r3, [r3, #4]
 8003100:	461a      	mov	r2, r3
 8003102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003104:	4293      	cmp	r3, r2
 8003106:	d3b3      	bcc.n	8003070 <HAL_PCD_IRQHandler+0x79c>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	695a      	ldr	r2, [r3, #20]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003116:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4618      	mov	r0, r3
 800311e:	f002 fde3 	bl	8005ce8 <USB_ReadInterrupts>
 8003122:	4603      	mov	r3, r0
 8003124:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003128:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800312c:	d10a      	bne.n	8003144 <HAL_PCD_IRQHandler+0x870>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f004 fd9a 	bl	8007c68 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	695a      	ldr	r2, [r3, #20]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003142:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4618      	mov	r0, r3
 800314a:	f002 fdcd 	bl	8005ce8 <USB_ReadInterrupts>
 800314e:	4603      	mov	r3, r0
 8003150:	f003 0304 	and.w	r3, r3, #4
 8003154:	2b04      	cmp	r3, #4
 8003156:	d115      	bne.n	8003184 <HAL_PCD_IRQHandler+0x8b0>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	f003 0304 	and.w	r3, r3, #4
 8003166:	2b00      	cmp	r3, #0
 8003168:	d002      	beq.n	8003170 <HAL_PCD_IRQHandler+0x89c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f004 fd8a 	bl	8007c84 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	6859      	ldr	r1, [r3, #4]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	69ba      	ldr	r2, [r7, #24]
 800317c:	430a      	orrs	r2, r1
 800317e:	605a      	str	r2, [r3, #4]
 8003180:	e000      	b.n	8003184 <HAL_PCD_IRQHandler+0x8b0>
      return;
 8003182:	bf00      	nop
    }
  }
}
 8003184:	3734      	adds	r7, #52	@ 0x34
 8003186:	46bd      	mov	sp, r7
 8003188:	bd90      	pop	{r4, r7, pc}

0800318a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800318a:	b580      	push	{r7, lr}
 800318c:	b082      	sub	sp, #8
 800318e:	af00      	add	r7, sp, #0
 8003190:	6078      	str	r0, [r7, #4]
 8003192:	460b      	mov	r3, r1
 8003194:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800319c:	2b01      	cmp	r3, #1
 800319e:	d101      	bne.n	80031a4 <HAL_PCD_SetAddress+0x1a>
 80031a0:	2302      	movs	r3, #2
 80031a2:	e012      	b.n	80031ca <HAL_PCD_SetAddress+0x40>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	78fa      	ldrb	r2, [r7, #3]
 80031b0:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	78fa      	ldrb	r2, [r7, #3]
 80031b8:	4611      	mov	r1, r2
 80031ba:	4618      	mov	r0, r3
 80031bc:	f002 fd2f 	bl	8005c1e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2200      	movs	r2, #0
 80031c4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3708      	adds	r7, #8
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}

080031d2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80031d2:	b580      	push	{r7, lr}
 80031d4:	b084      	sub	sp, #16
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	6078      	str	r0, [r7, #4]
 80031da:	4608      	mov	r0, r1
 80031dc:	4611      	mov	r1, r2
 80031de:	461a      	mov	r2, r3
 80031e0:	4603      	mov	r3, r0
 80031e2:	70fb      	strb	r3, [r7, #3]
 80031e4:	460b      	mov	r3, r1
 80031e6:	803b      	strh	r3, [r7, #0]
 80031e8:	4613      	mov	r3, r2
 80031ea:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80031ec:	2300      	movs	r3, #0
 80031ee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80031f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	da0f      	bge.n	8003218 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031f8:	78fb      	ldrb	r3, [r7, #3]
 80031fa:	f003 020f 	and.w	r2, r3, #15
 80031fe:	4613      	mov	r3, r2
 8003200:	00db      	lsls	r3, r3, #3
 8003202:	4413      	add	r3, r2
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	3310      	adds	r3, #16
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	4413      	add	r3, r2
 800320c:	3304      	adds	r3, #4
 800320e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2201      	movs	r2, #1
 8003214:	705a      	strb	r2, [r3, #1]
 8003216:	e00f      	b.n	8003238 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003218:	78fb      	ldrb	r3, [r7, #3]
 800321a:	f003 020f 	and.w	r2, r3, #15
 800321e:	4613      	mov	r3, r2
 8003220:	00db      	lsls	r3, r3, #3
 8003222:	4413      	add	r3, r2
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	4413      	add	r3, r2
 800322e:	3304      	adds	r3, #4
 8003230:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2200      	movs	r2, #0
 8003236:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003238:	78fb      	ldrb	r3, [r7, #3]
 800323a:	f003 030f 	and.w	r3, r3, #15
 800323e:	b2da      	uxtb	r2, r3
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003244:	883a      	ldrh	r2, [r7, #0]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	78ba      	ldrb	r2, [r7, #2]
 800324e:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	785b      	ldrb	r3, [r3, #1]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d004      	beq.n	8003262 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	461a      	mov	r2, r3
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003262:	78bb      	ldrb	r3, [r7, #2]
 8003264:	2b02      	cmp	r3, #2
 8003266:	d102      	bne.n	800326e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2200      	movs	r2, #0
 800326c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003274:	2b01      	cmp	r3, #1
 8003276:	d101      	bne.n	800327c <HAL_PCD_EP_Open+0xaa>
 8003278:	2302      	movs	r3, #2
 800327a:	e00e      	b.n	800329a <HAL_PCD_EP_Open+0xc8>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2201      	movs	r2, #1
 8003280:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	68f9      	ldr	r1, [r7, #12]
 800328a:	4618      	mov	r0, r3
 800328c:	f001 ff28 	bl	80050e0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003298:	7afb      	ldrb	r3, [r7, #11]
}
 800329a:	4618      	mov	r0, r3
 800329c:	3710      	adds	r7, #16
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}

080032a2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032a2:	b580      	push	{r7, lr}
 80032a4:	b084      	sub	sp, #16
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	6078      	str	r0, [r7, #4]
 80032aa:	460b      	mov	r3, r1
 80032ac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80032ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	da0f      	bge.n	80032d6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032b6:	78fb      	ldrb	r3, [r7, #3]
 80032b8:	f003 020f 	and.w	r2, r3, #15
 80032bc:	4613      	mov	r3, r2
 80032be:	00db      	lsls	r3, r3, #3
 80032c0:	4413      	add	r3, r2
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	3310      	adds	r3, #16
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	4413      	add	r3, r2
 80032ca:	3304      	adds	r3, #4
 80032cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2201      	movs	r2, #1
 80032d2:	705a      	strb	r2, [r3, #1]
 80032d4:	e00f      	b.n	80032f6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032d6:	78fb      	ldrb	r3, [r7, #3]
 80032d8:	f003 020f 	and.w	r2, r3, #15
 80032dc:	4613      	mov	r3, r2
 80032de:	00db      	lsls	r3, r3, #3
 80032e0:	4413      	add	r3, r2
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	4413      	add	r3, r2
 80032ec:	3304      	adds	r3, #4
 80032ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2200      	movs	r2, #0
 80032f4:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80032f6:	78fb      	ldrb	r3, [r7, #3]
 80032f8:	f003 030f 	and.w	r3, r3, #15
 80032fc:	b2da      	uxtb	r2, r3
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003308:	2b01      	cmp	r3, #1
 800330a:	d101      	bne.n	8003310 <HAL_PCD_EP_Close+0x6e>
 800330c:	2302      	movs	r3, #2
 800330e:	e00e      	b.n	800332e <HAL_PCD_EP_Close+0x8c>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2201      	movs	r2, #1
 8003314:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	68f9      	ldr	r1, [r7, #12]
 800331e:	4618      	mov	r0, r3
 8003320:	f001 ff64 	bl	80051ec <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800332c:	2300      	movs	r3, #0
}
 800332e:	4618      	mov	r0, r3
 8003330:	3710      	adds	r7, #16
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}

08003336 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003336:	b580      	push	{r7, lr}
 8003338:	b086      	sub	sp, #24
 800333a:	af00      	add	r7, sp, #0
 800333c:	60f8      	str	r0, [r7, #12]
 800333e:	607a      	str	r2, [r7, #4]
 8003340:	603b      	str	r3, [r7, #0]
 8003342:	460b      	mov	r3, r1
 8003344:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003346:	7afb      	ldrb	r3, [r7, #11]
 8003348:	f003 020f 	and.w	r2, r3, #15
 800334c:	4613      	mov	r3, r2
 800334e:	00db      	lsls	r3, r3, #3
 8003350:	4413      	add	r3, r2
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003358:	68fa      	ldr	r2, [r7, #12]
 800335a:	4413      	add	r3, r2
 800335c:	3304      	adds	r3, #4
 800335e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	683a      	ldr	r2, [r7, #0]
 800336a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	2200      	movs	r2, #0
 8003370:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	2200      	movs	r2, #0
 8003376:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003378:	7afb      	ldrb	r3, [r7, #11]
 800337a:	f003 030f 	and.w	r3, r3, #15
 800337e:	b2da      	uxtb	r2, r3
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	6979      	ldr	r1, [r7, #20]
 800338a:	4618      	mov	r0, r3
 800338c:	f002 f80a 	bl	80053a4 <USB_EPStartXfer>

  return HAL_OK;
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	3718      	adds	r7, #24
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}

0800339a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800339a:	b480      	push	{r7}
 800339c:	b083      	sub	sp, #12
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
 80033a2:	460b      	mov	r3, r1
 80033a4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80033a6:	78fb      	ldrb	r3, [r7, #3]
 80033a8:	f003 020f 	and.w	r2, r3, #15
 80033ac:	6879      	ldr	r1, [r7, #4]
 80033ae:	4613      	mov	r3, r2
 80033b0:	00db      	lsls	r3, r3, #3
 80033b2:	4413      	add	r3, r2
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	440b      	add	r3, r1
 80033b8:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80033bc:	681b      	ldr	r3, [r3, #0]
}
 80033be:	4618      	mov	r0, r3
 80033c0:	370c      	adds	r7, #12
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bc80      	pop	{r7}
 80033c6:	4770      	bx	lr

080033c8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b086      	sub	sp, #24
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	607a      	str	r2, [r7, #4]
 80033d2:	603b      	str	r3, [r7, #0]
 80033d4:	460b      	mov	r3, r1
 80033d6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033d8:	7afb      	ldrb	r3, [r7, #11]
 80033da:	f003 020f 	and.w	r2, r3, #15
 80033de:	4613      	mov	r3, r2
 80033e0:	00db      	lsls	r3, r3, #3
 80033e2:	4413      	add	r3, r2
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	3310      	adds	r3, #16
 80033e8:	68fa      	ldr	r2, [r7, #12]
 80033ea:	4413      	add	r3, r2
 80033ec:	3304      	adds	r3, #4
 80033ee:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	683a      	ldr	r2, [r7, #0]
 80033fa:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	2200      	movs	r2, #0
 8003400:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	2201      	movs	r2, #1
 8003406:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003408:	7afb      	ldrb	r3, [r7, #11]
 800340a:	f003 030f 	and.w	r3, r3, #15
 800340e:	b2da      	uxtb	r2, r3
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	6979      	ldr	r1, [r7, #20]
 800341a:	4618      	mov	r0, r3
 800341c:	f001 ffc2 	bl	80053a4 <USB_EPStartXfer>

  return HAL_OK;
 8003420:	2300      	movs	r3, #0
}
 8003422:	4618      	mov	r0, r3
 8003424:	3718      	adds	r7, #24
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}

0800342a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800342a:	b580      	push	{r7, lr}
 800342c:	b084      	sub	sp, #16
 800342e:	af00      	add	r7, sp, #0
 8003430:	6078      	str	r0, [r7, #4]
 8003432:	460b      	mov	r3, r1
 8003434:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003436:	78fb      	ldrb	r3, [r7, #3]
 8003438:	f003 030f 	and.w	r3, r3, #15
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	7912      	ldrb	r2, [r2, #4]
 8003440:	4293      	cmp	r3, r2
 8003442:	d901      	bls.n	8003448 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e04e      	b.n	80034e6 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003448:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800344c:	2b00      	cmp	r3, #0
 800344e:	da0f      	bge.n	8003470 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003450:	78fb      	ldrb	r3, [r7, #3]
 8003452:	f003 020f 	and.w	r2, r3, #15
 8003456:	4613      	mov	r3, r2
 8003458:	00db      	lsls	r3, r3, #3
 800345a:	4413      	add	r3, r2
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	3310      	adds	r3, #16
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	4413      	add	r3, r2
 8003464:	3304      	adds	r3, #4
 8003466:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2201      	movs	r2, #1
 800346c:	705a      	strb	r2, [r3, #1]
 800346e:	e00d      	b.n	800348c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003470:	78fa      	ldrb	r2, [r7, #3]
 8003472:	4613      	mov	r3, r2
 8003474:	00db      	lsls	r3, r3, #3
 8003476:	4413      	add	r3, r2
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	4413      	add	r3, r2
 8003482:	3304      	adds	r3, #4
 8003484:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2200      	movs	r2, #0
 800348a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2201      	movs	r2, #1
 8003490:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003492:	78fb      	ldrb	r3, [r7, #3]
 8003494:	f003 030f 	and.w	r3, r3, #15
 8003498:	b2da      	uxtb	r2, r3
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d101      	bne.n	80034ac <HAL_PCD_EP_SetStall+0x82>
 80034a8:	2302      	movs	r3, #2
 80034aa:	e01c      	b.n	80034e6 <HAL_PCD_EP_SetStall+0xbc>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68f9      	ldr	r1, [r7, #12]
 80034ba:	4618      	mov	r0, r3
 80034bc:	f002 fadd 	bl	8005a7a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80034c0:	78fb      	ldrb	r3, [r7, #3]
 80034c2:	f003 030f 	and.w	r3, r3, #15
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d108      	bne.n	80034dc <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80034d4:	4619      	mov	r1, r3
 80034d6:	4610      	mov	r0, r2
 80034d8:	f002 fcc4 	bl	8005e64 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2200      	movs	r2, #0
 80034e0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80034e4:	2300      	movs	r3, #0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3710      	adds	r7, #16
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}

080034ee <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80034ee:	b580      	push	{r7, lr}
 80034f0:	b084      	sub	sp, #16
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
 80034f6:	460b      	mov	r3, r1
 80034f8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80034fa:	78fb      	ldrb	r3, [r7, #3]
 80034fc:	f003 030f 	and.w	r3, r3, #15
 8003500:	687a      	ldr	r2, [r7, #4]
 8003502:	7912      	ldrb	r2, [r2, #4]
 8003504:	4293      	cmp	r3, r2
 8003506:	d901      	bls.n	800350c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e042      	b.n	8003592 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800350c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003510:	2b00      	cmp	r3, #0
 8003512:	da0f      	bge.n	8003534 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003514:	78fb      	ldrb	r3, [r7, #3]
 8003516:	f003 020f 	and.w	r2, r3, #15
 800351a:	4613      	mov	r3, r2
 800351c:	00db      	lsls	r3, r3, #3
 800351e:	4413      	add	r3, r2
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	3310      	adds	r3, #16
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	4413      	add	r3, r2
 8003528:	3304      	adds	r3, #4
 800352a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2201      	movs	r2, #1
 8003530:	705a      	strb	r2, [r3, #1]
 8003532:	e00f      	b.n	8003554 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003534:	78fb      	ldrb	r3, [r7, #3]
 8003536:	f003 020f 	and.w	r2, r3, #15
 800353a:	4613      	mov	r3, r2
 800353c:	00db      	lsls	r3, r3, #3
 800353e:	4413      	add	r3, r2
 8003540:	009b      	lsls	r3, r3, #2
 8003542:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	4413      	add	r3, r2
 800354a:	3304      	adds	r3, #4
 800354c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2200      	movs	r2, #0
 8003552:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2200      	movs	r2, #0
 8003558:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800355a:	78fb      	ldrb	r3, [r7, #3]
 800355c:	f003 030f 	and.w	r3, r3, #15
 8003560:	b2da      	uxtb	r2, r3
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800356c:	2b01      	cmp	r3, #1
 800356e:	d101      	bne.n	8003574 <HAL_PCD_EP_ClrStall+0x86>
 8003570:	2302      	movs	r3, #2
 8003572:	e00e      	b.n	8003592 <HAL_PCD_EP_ClrStall+0xa4>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	68f9      	ldr	r1, [r7, #12]
 8003582:	4618      	mov	r0, r3
 8003584:	f002 fae6 	bl	8005b54 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2200      	movs	r2, #0
 800358c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003590:	2300      	movs	r3, #0
}
 8003592:	4618      	mov	r0, r3
 8003594:	3710      	adds	r7, #16
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}

0800359a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800359a:	b580      	push	{r7, lr}
 800359c:	b084      	sub	sp, #16
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
 80035a2:	460b      	mov	r3, r1
 80035a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80035a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	da0c      	bge.n	80035c8 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035ae:	78fb      	ldrb	r3, [r7, #3]
 80035b0:	f003 020f 	and.w	r2, r3, #15
 80035b4:	4613      	mov	r3, r2
 80035b6:	00db      	lsls	r3, r3, #3
 80035b8:	4413      	add	r3, r2
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	3310      	adds	r3, #16
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	4413      	add	r3, r2
 80035c2:	3304      	adds	r3, #4
 80035c4:	60fb      	str	r3, [r7, #12]
 80035c6:	e00c      	b.n	80035e2 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035c8:	78fb      	ldrb	r3, [r7, #3]
 80035ca:	f003 020f 	and.w	r2, r3, #15
 80035ce:	4613      	mov	r3, r2
 80035d0:	00db      	lsls	r3, r3, #3
 80035d2:	4413      	add	r3, r2
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	4413      	add	r3, r2
 80035de:	3304      	adds	r3, #4
 80035e0:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	68f9      	ldr	r1, [r7, #12]
 80035e8:	4618      	mov	r0, r3
 80035ea:	f002 f90d 	bl	8005808 <USB_EPStopXfer>
 80035ee:	4603      	mov	r3, r0
 80035f0:	72fb      	strb	r3, [r7, #11]

  return ret;
 80035f2:	7afb      	ldrb	r3, [r7, #11]
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3710      	adds	r7, #16
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}

080035fc <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b088      	sub	sp, #32
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003610:	683a      	ldr	r2, [r7, #0]
 8003612:	4613      	mov	r3, r2
 8003614:	00db      	lsls	r3, r3, #3
 8003616:	4413      	add	r3, r2
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	3310      	adds	r3, #16
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	4413      	add	r3, r2
 8003620:	3304      	adds	r3, #4
 8003622:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	695a      	ldr	r2, [r3, #20]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	691b      	ldr	r3, [r3, #16]
 800362c:	429a      	cmp	r2, r3
 800362e:	d901      	bls.n	8003634 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e067      	b.n	8003704 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	691a      	ldr	r2, [r3, #16]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	695b      	ldr	r3, [r3, #20]
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	69fa      	ldr	r2, [r7, #28]
 8003646:	429a      	cmp	r2, r3
 8003648:	d902      	bls.n	8003650 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	3303      	adds	r3, #3
 8003654:	089b      	lsrs	r3, r3, #2
 8003656:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003658:	e026      	b.n	80036a8 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	691a      	ldr	r2, [r3, #16]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	695b      	ldr	r3, [r3, #20]
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	69fa      	ldr	r2, [r7, #28]
 800366c:	429a      	cmp	r2, r3
 800366e:	d902      	bls.n	8003676 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	3303      	adds	r3, #3
 800367a:	089b      	lsrs	r3, r3, #2
 800367c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	68d9      	ldr	r1, [r3, #12]
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	b2da      	uxtb	r2, r3
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	b29b      	uxth	r3, r3
 800368a:	6978      	ldr	r0, [r7, #20]
 800368c:	f002 f965 	bl	800595a <USB_WritePacket>

    ep->xfer_buff  += len;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	68da      	ldr	r2, [r3, #12]
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	441a      	add	r2, r3
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	695a      	ldr	r2, [r3, #20]
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	441a      	add	r2, r3
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	015a      	lsls	r2, r3, #5
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	4413      	add	r3, r2
 80036b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80036b4:	699b      	ldr	r3, [r3, #24]
 80036b6:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80036b8:	69ba      	ldr	r2, [r7, #24]
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d809      	bhi.n	80036d2 <PCD_WriteEmptyTxFifo+0xd6>
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	695a      	ldr	r2, [r3, #20]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d203      	bcs.n	80036d2 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d1c3      	bne.n	800365a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	691a      	ldr	r2, [r3, #16]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	695b      	ldr	r3, [r3, #20]
 80036da:	429a      	cmp	r2, r3
 80036dc:	d811      	bhi.n	8003702 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	f003 030f 	and.w	r3, r3, #15
 80036e4:	2201      	movs	r2, #1
 80036e6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ea:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80036f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	43db      	mvns	r3, r3
 80036f8:	6939      	ldr	r1, [r7, #16]
 80036fa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80036fe:	4013      	ands	r3, r2
 8003700:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003702:	2300      	movs	r3, #0
}
 8003704:	4618      	mov	r0, r3
 8003706:	3720      	adds	r7, #32
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}

0800370c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b086      	sub	sp, #24
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	333c      	adds	r3, #60	@ 0x3c
 8003724:	3304      	adds	r3, #4
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	015a      	lsls	r2, r3, #5
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	4413      	add	r3, r2
 8003732:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	4a19      	ldr	r2, [pc, #100]	@ (80037a4 <PCD_EP_OutXfrComplete_int+0x98>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d124      	bne.n	800378c <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d00a      	beq.n	8003762 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	015a      	lsls	r2, r3, #5
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	4413      	add	r3, r2
 8003754:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003758:	461a      	mov	r2, r3
 800375a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800375e:	6093      	str	r3, [r2, #8]
 8003760:	e01a      	b.n	8003798 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	f003 0320 	and.w	r3, r3, #32
 8003768:	2b00      	cmp	r3, #0
 800376a:	d008      	beq.n	800377e <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	015a      	lsls	r2, r3, #5
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	4413      	add	r3, r2
 8003774:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003778:	461a      	mov	r2, r3
 800377a:	2320      	movs	r3, #32
 800377c:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	b2db      	uxtb	r3, r3
 8003782:	4619      	mov	r1, r3
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f004 f9b5 	bl	8007af4 <HAL_PCD_DataOutStageCallback>
 800378a:	e005      	b.n	8003798 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	b2db      	uxtb	r3, r3
 8003790:	4619      	mov	r1, r3
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f004 f9ae 	bl	8007af4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8003798:	2300      	movs	r3, #0
}
 800379a:	4618      	mov	r0, r3
 800379c:	3718      	adds	r7, #24
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	4f54310a 	.word	0x4f54310a

080037a8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b086      	sub	sp, #24
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	333c      	adds	r3, #60	@ 0x3c
 80037c0:	3304      	adds	r3, #4
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	015a      	lsls	r2, r3, #5
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	4413      	add	r3, r2
 80037ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	4a0c      	ldr	r2, [pc, #48]	@ (800380c <PCD_EP_OutSetupPacket_int+0x64>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d90e      	bls.n	80037fc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d009      	beq.n	80037fc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	015a      	lsls	r2, r3, #5
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	4413      	add	r3, r2
 80037f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037f4:	461a      	mov	r2, r3
 80037f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80037fa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f004 f967 	bl	8007ad0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8003802:	2300      	movs	r3, #0
}
 8003804:	4618      	mov	r0, r3
 8003806:	3718      	adds	r7, #24
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}
 800380c:	4f54300a 	.word	0x4f54300a

08003810 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003810:	b480      	push	{r7}
 8003812:	b085      	sub	sp, #20
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	460b      	mov	r3, r1
 800381a:	70fb      	strb	r3, [r7, #3]
 800381c:	4613      	mov	r3, r2
 800381e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003826:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003828:	78fb      	ldrb	r3, [r7, #3]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d107      	bne.n	800383e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800382e:	883b      	ldrh	r3, [r7, #0]
 8003830:	0419      	lsls	r1, r3, #16
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	68ba      	ldr	r2, [r7, #8]
 8003838:	430a      	orrs	r2, r1
 800383a:	629a      	str	r2, [r3, #40]	@ 0x28
 800383c:	e028      	b.n	8003890 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003844:	0c1b      	lsrs	r3, r3, #16
 8003846:	68ba      	ldr	r2, [r7, #8]
 8003848:	4413      	add	r3, r2
 800384a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800384c:	2300      	movs	r3, #0
 800384e:	73fb      	strb	r3, [r7, #15]
 8003850:	e00d      	b.n	800386e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	7bfb      	ldrb	r3, [r7, #15]
 8003858:	3340      	adds	r3, #64	@ 0x40
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	4413      	add	r3, r2
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	0c1b      	lsrs	r3, r3, #16
 8003862:	68ba      	ldr	r2, [r7, #8]
 8003864:	4413      	add	r3, r2
 8003866:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003868:	7bfb      	ldrb	r3, [r7, #15]
 800386a:	3301      	adds	r3, #1
 800386c:	73fb      	strb	r3, [r7, #15]
 800386e:	7bfa      	ldrb	r2, [r7, #15]
 8003870:	78fb      	ldrb	r3, [r7, #3]
 8003872:	3b01      	subs	r3, #1
 8003874:	429a      	cmp	r2, r3
 8003876:	d3ec      	bcc.n	8003852 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003878:	883b      	ldrh	r3, [r7, #0]
 800387a:	0418      	lsls	r0, r3, #16
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6819      	ldr	r1, [r3, #0]
 8003880:	78fb      	ldrb	r3, [r7, #3]
 8003882:	3b01      	subs	r3, #1
 8003884:	68ba      	ldr	r2, [r7, #8]
 8003886:	4302      	orrs	r2, r0
 8003888:	3340      	adds	r3, #64	@ 0x40
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	440b      	add	r3, r1
 800388e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003890:	2300      	movs	r3, #0
}
 8003892:	4618      	mov	r0, r3
 8003894:	3714      	adds	r7, #20
 8003896:	46bd      	mov	sp, r7
 8003898:	bc80      	pop	{r7}
 800389a:	4770      	bx	lr

0800389c <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800389c:	b480      	push	{r7}
 800389e:	b083      	sub	sp, #12
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	460b      	mov	r3, r1
 80038a6:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	887a      	ldrh	r2, [r7, #2]
 80038ae:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80038b0:	2300      	movs	r3, #0
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	370c      	adds	r7, #12
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bc80      	pop	{r7}
 80038ba:	4770      	bx	lr

080038bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b086      	sub	sp, #24
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d101      	bne.n	80038ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e304      	b.n	8003ed8 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0301 	and.w	r3, r3, #1
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	f000 8087 	beq.w	80039ea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80038dc:	4b92      	ldr	r3, [pc, #584]	@ (8003b28 <HAL_RCC_OscConfig+0x26c>)
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	f003 030c 	and.w	r3, r3, #12
 80038e4:	2b04      	cmp	r3, #4
 80038e6:	d00c      	beq.n	8003902 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80038e8:	4b8f      	ldr	r3, [pc, #572]	@ (8003b28 <HAL_RCC_OscConfig+0x26c>)
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	f003 030c 	and.w	r3, r3, #12
 80038f0:	2b08      	cmp	r3, #8
 80038f2:	d112      	bne.n	800391a <HAL_RCC_OscConfig+0x5e>
 80038f4:	4b8c      	ldr	r3, [pc, #560]	@ (8003b28 <HAL_RCC_OscConfig+0x26c>)
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003900:	d10b      	bne.n	800391a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003902:	4b89      	ldr	r3, [pc, #548]	@ (8003b28 <HAL_RCC_OscConfig+0x26c>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d06c      	beq.n	80039e8 <HAL_RCC_OscConfig+0x12c>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d168      	bne.n	80039e8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e2de      	b.n	8003ed8 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003922:	d106      	bne.n	8003932 <HAL_RCC_OscConfig+0x76>
 8003924:	4b80      	ldr	r3, [pc, #512]	@ (8003b28 <HAL_RCC_OscConfig+0x26c>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a7f      	ldr	r2, [pc, #508]	@ (8003b28 <HAL_RCC_OscConfig+0x26c>)
 800392a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800392e:	6013      	str	r3, [r2, #0]
 8003930:	e02e      	b.n	8003990 <HAL_RCC_OscConfig+0xd4>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d10c      	bne.n	8003954 <HAL_RCC_OscConfig+0x98>
 800393a:	4b7b      	ldr	r3, [pc, #492]	@ (8003b28 <HAL_RCC_OscConfig+0x26c>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a7a      	ldr	r2, [pc, #488]	@ (8003b28 <HAL_RCC_OscConfig+0x26c>)
 8003940:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003944:	6013      	str	r3, [r2, #0]
 8003946:	4b78      	ldr	r3, [pc, #480]	@ (8003b28 <HAL_RCC_OscConfig+0x26c>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a77      	ldr	r2, [pc, #476]	@ (8003b28 <HAL_RCC_OscConfig+0x26c>)
 800394c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003950:	6013      	str	r3, [r2, #0]
 8003952:	e01d      	b.n	8003990 <HAL_RCC_OscConfig+0xd4>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800395c:	d10c      	bne.n	8003978 <HAL_RCC_OscConfig+0xbc>
 800395e:	4b72      	ldr	r3, [pc, #456]	@ (8003b28 <HAL_RCC_OscConfig+0x26c>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a71      	ldr	r2, [pc, #452]	@ (8003b28 <HAL_RCC_OscConfig+0x26c>)
 8003964:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003968:	6013      	str	r3, [r2, #0]
 800396a:	4b6f      	ldr	r3, [pc, #444]	@ (8003b28 <HAL_RCC_OscConfig+0x26c>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a6e      	ldr	r2, [pc, #440]	@ (8003b28 <HAL_RCC_OscConfig+0x26c>)
 8003970:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003974:	6013      	str	r3, [r2, #0]
 8003976:	e00b      	b.n	8003990 <HAL_RCC_OscConfig+0xd4>
 8003978:	4b6b      	ldr	r3, [pc, #428]	@ (8003b28 <HAL_RCC_OscConfig+0x26c>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a6a      	ldr	r2, [pc, #424]	@ (8003b28 <HAL_RCC_OscConfig+0x26c>)
 800397e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003982:	6013      	str	r3, [r2, #0]
 8003984:	4b68      	ldr	r3, [pc, #416]	@ (8003b28 <HAL_RCC_OscConfig+0x26c>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a67      	ldr	r2, [pc, #412]	@ (8003b28 <HAL_RCC_OscConfig+0x26c>)
 800398a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800398e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d013      	beq.n	80039c0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003998:	f7fd fef4 	bl	8001784 <HAL_GetTick>
 800399c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800399e:	e008      	b.n	80039b2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039a0:	f7fd fef0 	bl	8001784 <HAL_GetTick>
 80039a4:	4602      	mov	r2, r0
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	2b64      	cmp	r3, #100	@ 0x64
 80039ac:	d901      	bls.n	80039b2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	e292      	b.n	8003ed8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039b2:	4b5d      	ldr	r3, [pc, #372]	@ (8003b28 <HAL_RCC_OscConfig+0x26c>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d0f0      	beq.n	80039a0 <HAL_RCC_OscConfig+0xe4>
 80039be:	e014      	b.n	80039ea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039c0:	f7fd fee0 	bl	8001784 <HAL_GetTick>
 80039c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039c6:	e008      	b.n	80039da <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039c8:	f7fd fedc 	bl	8001784 <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	2b64      	cmp	r3, #100	@ 0x64
 80039d4:	d901      	bls.n	80039da <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e27e      	b.n	8003ed8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039da:	4b53      	ldr	r3, [pc, #332]	@ (8003b28 <HAL_RCC_OscConfig+0x26c>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d1f0      	bne.n	80039c8 <HAL_RCC_OscConfig+0x10c>
 80039e6:	e000      	b.n	80039ea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0302 	and.w	r3, r3, #2
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d063      	beq.n	8003abe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80039f6:	4b4c      	ldr	r3, [pc, #304]	@ (8003b28 <HAL_RCC_OscConfig+0x26c>)
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	f003 030c 	and.w	r3, r3, #12
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d00b      	beq.n	8003a1a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003a02:	4b49      	ldr	r3, [pc, #292]	@ (8003b28 <HAL_RCC_OscConfig+0x26c>)
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	f003 030c 	and.w	r3, r3, #12
 8003a0a:	2b08      	cmp	r3, #8
 8003a0c:	d11c      	bne.n	8003a48 <HAL_RCC_OscConfig+0x18c>
 8003a0e:	4b46      	ldr	r3, [pc, #280]	@ (8003b28 <HAL_RCC_OscConfig+0x26c>)
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d116      	bne.n	8003a48 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a1a:	4b43      	ldr	r3, [pc, #268]	@ (8003b28 <HAL_RCC_OscConfig+0x26c>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0302 	and.w	r3, r3, #2
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d005      	beq.n	8003a32 <HAL_RCC_OscConfig+0x176>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	695b      	ldr	r3, [r3, #20]
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d001      	beq.n	8003a32 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e252      	b.n	8003ed8 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a32:	4b3d      	ldr	r3, [pc, #244]	@ (8003b28 <HAL_RCC_OscConfig+0x26c>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	699b      	ldr	r3, [r3, #24]
 8003a3e:	00db      	lsls	r3, r3, #3
 8003a40:	4939      	ldr	r1, [pc, #228]	@ (8003b28 <HAL_RCC_OscConfig+0x26c>)
 8003a42:	4313      	orrs	r3, r2
 8003a44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a46:	e03a      	b.n	8003abe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	695b      	ldr	r3, [r3, #20]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d020      	beq.n	8003a92 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a50:	4b36      	ldr	r3, [pc, #216]	@ (8003b2c <HAL_RCC_OscConfig+0x270>)
 8003a52:	2201      	movs	r2, #1
 8003a54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a56:	f7fd fe95 	bl	8001784 <HAL_GetTick>
 8003a5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a5c:	e008      	b.n	8003a70 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a5e:	f7fd fe91 	bl	8001784 <HAL_GetTick>
 8003a62:	4602      	mov	r2, r0
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	d901      	bls.n	8003a70 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003a6c:	2303      	movs	r3, #3
 8003a6e:	e233      	b.n	8003ed8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a70:	4b2d      	ldr	r3, [pc, #180]	@ (8003b28 <HAL_RCC_OscConfig+0x26c>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 0302 	and.w	r3, r3, #2
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d0f0      	beq.n	8003a5e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a7c:	4b2a      	ldr	r3, [pc, #168]	@ (8003b28 <HAL_RCC_OscConfig+0x26c>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	699b      	ldr	r3, [r3, #24]
 8003a88:	00db      	lsls	r3, r3, #3
 8003a8a:	4927      	ldr	r1, [pc, #156]	@ (8003b28 <HAL_RCC_OscConfig+0x26c>)
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	600b      	str	r3, [r1, #0]
 8003a90:	e015      	b.n	8003abe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a92:	4b26      	ldr	r3, [pc, #152]	@ (8003b2c <HAL_RCC_OscConfig+0x270>)
 8003a94:	2200      	movs	r2, #0
 8003a96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a98:	f7fd fe74 	bl	8001784 <HAL_GetTick>
 8003a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a9e:	e008      	b.n	8003ab2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003aa0:	f7fd fe70 	bl	8001784 <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	2b02      	cmp	r3, #2
 8003aac:	d901      	bls.n	8003ab2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e212      	b.n	8003ed8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ab2:	4b1d      	ldr	r3, [pc, #116]	@ (8003b28 <HAL_RCC_OscConfig+0x26c>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0302 	and.w	r3, r3, #2
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d1f0      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0308 	and.w	r3, r3, #8
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d03a      	beq.n	8003b40 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	69db      	ldr	r3, [r3, #28]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d019      	beq.n	8003b06 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ad2:	4b17      	ldr	r3, [pc, #92]	@ (8003b30 <HAL_RCC_OscConfig+0x274>)
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ad8:	f7fd fe54 	bl	8001784 <HAL_GetTick>
 8003adc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ade:	e008      	b.n	8003af2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ae0:	f7fd fe50 	bl	8001784 <HAL_GetTick>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	2b02      	cmp	r3, #2
 8003aec:	d901      	bls.n	8003af2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003aee:	2303      	movs	r3, #3
 8003af0:	e1f2      	b.n	8003ed8 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003af2:	4b0d      	ldr	r3, [pc, #52]	@ (8003b28 <HAL_RCC_OscConfig+0x26c>)
 8003af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003af6:	f003 0302 	and.w	r3, r3, #2
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d0f0      	beq.n	8003ae0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003afe:	2001      	movs	r0, #1
 8003b00:	f000 fbda 	bl	80042b8 <RCC_Delay>
 8003b04:	e01c      	b.n	8003b40 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b06:	4b0a      	ldr	r3, [pc, #40]	@ (8003b30 <HAL_RCC_OscConfig+0x274>)
 8003b08:	2200      	movs	r2, #0
 8003b0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b0c:	f7fd fe3a 	bl	8001784 <HAL_GetTick>
 8003b10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b12:	e00f      	b.n	8003b34 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b14:	f7fd fe36 	bl	8001784 <HAL_GetTick>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	2b02      	cmp	r3, #2
 8003b20:	d908      	bls.n	8003b34 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e1d8      	b.n	8003ed8 <HAL_RCC_OscConfig+0x61c>
 8003b26:	bf00      	nop
 8003b28:	40021000 	.word	0x40021000
 8003b2c:	42420000 	.word	0x42420000
 8003b30:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b34:	4b9b      	ldr	r3, [pc, #620]	@ (8003da4 <HAL_RCC_OscConfig+0x4e8>)
 8003b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b38:	f003 0302 	and.w	r3, r3, #2
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d1e9      	bne.n	8003b14 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 0304 	and.w	r3, r3, #4
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	f000 80a6 	beq.w	8003c9a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b52:	4b94      	ldr	r3, [pc, #592]	@ (8003da4 <HAL_RCC_OscConfig+0x4e8>)
 8003b54:	69db      	ldr	r3, [r3, #28]
 8003b56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d10d      	bne.n	8003b7a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b5e:	4b91      	ldr	r3, [pc, #580]	@ (8003da4 <HAL_RCC_OscConfig+0x4e8>)
 8003b60:	69db      	ldr	r3, [r3, #28]
 8003b62:	4a90      	ldr	r2, [pc, #576]	@ (8003da4 <HAL_RCC_OscConfig+0x4e8>)
 8003b64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b68:	61d3      	str	r3, [r2, #28]
 8003b6a:	4b8e      	ldr	r3, [pc, #568]	@ (8003da4 <HAL_RCC_OscConfig+0x4e8>)
 8003b6c:	69db      	ldr	r3, [r3, #28]
 8003b6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b72:	60bb      	str	r3, [r7, #8]
 8003b74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b76:	2301      	movs	r3, #1
 8003b78:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b7a:	4b8b      	ldr	r3, [pc, #556]	@ (8003da8 <HAL_RCC_OscConfig+0x4ec>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d118      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b86:	4b88      	ldr	r3, [pc, #544]	@ (8003da8 <HAL_RCC_OscConfig+0x4ec>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a87      	ldr	r2, [pc, #540]	@ (8003da8 <HAL_RCC_OscConfig+0x4ec>)
 8003b8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b92:	f7fd fdf7 	bl	8001784 <HAL_GetTick>
 8003b96:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b98:	e008      	b.n	8003bac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b9a:	f7fd fdf3 	bl	8001784 <HAL_GetTick>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	1ad3      	subs	r3, r2, r3
 8003ba4:	2b64      	cmp	r3, #100	@ 0x64
 8003ba6:	d901      	bls.n	8003bac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003ba8:	2303      	movs	r3, #3
 8003baa:	e195      	b.n	8003ed8 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bac:	4b7e      	ldr	r3, [pc, #504]	@ (8003da8 <HAL_RCC_OscConfig+0x4ec>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d0f0      	beq.n	8003b9a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	691b      	ldr	r3, [r3, #16]
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d106      	bne.n	8003bce <HAL_RCC_OscConfig+0x312>
 8003bc0:	4b78      	ldr	r3, [pc, #480]	@ (8003da4 <HAL_RCC_OscConfig+0x4e8>)
 8003bc2:	6a1b      	ldr	r3, [r3, #32]
 8003bc4:	4a77      	ldr	r2, [pc, #476]	@ (8003da4 <HAL_RCC_OscConfig+0x4e8>)
 8003bc6:	f043 0301 	orr.w	r3, r3, #1
 8003bca:	6213      	str	r3, [r2, #32]
 8003bcc:	e02d      	b.n	8003c2a <HAL_RCC_OscConfig+0x36e>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	691b      	ldr	r3, [r3, #16]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d10c      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x334>
 8003bd6:	4b73      	ldr	r3, [pc, #460]	@ (8003da4 <HAL_RCC_OscConfig+0x4e8>)
 8003bd8:	6a1b      	ldr	r3, [r3, #32]
 8003bda:	4a72      	ldr	r2, [pc, #456]	@ (8003da4 <HAL_RCC_OscConfig+0x4e8>)
 8003bdc:	f023 0301 	bic.w	r3, r3, #1
 8003be0:	6213      	str	r3, [r2, #32]
 8003be2:	4b70      	ldr	r3, [pc, #448]	@ (8003da4 <HAL_RCC_OscConfig+0x4e8>)
 8003be4:	6a1b      	ldr	r3, [r3, #32]
 8003be6:	4a6f      	ldr	r2, [pc, #444]	@ (8003da4 <HAL_RCC_OscConfig+0x4e8>)
 8003be8:	f023 0304 	bic.w	r3, r3, #4
 8003bec:	6213      	str	r3, [r2, #32]
 8003bee:	e01c      	b.n	8003c2a <HAL_RCC_OscConfig+0x36e>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	691b      	ldr	r3, [r3, #16]
 8003bf4:	2b05      	cmp	r3, #5
 8003bf6:	d10c      	bne.n	8003c12 <HAL_RCC_OscConfig+0x356>
 8003bf8:	4b6a      	ldr	r3, [pc, #424]	@ (8003da4 <HAL_RCC_OscConfig+0x4e8>)
 8003bfa:	6a1b      	ldr	r3, [r3, #32]
 8003bfc:	4a69      	ldr	r2, [pc, #420]	@ (8003da4 <HAL_RCC_OscConfig+0x4e8>)
 8003bfe:	f043 0304 	orr.w	r3, r3, #4
 8003c02:	6213      	str	r3, [r2, #32]
 8003c04:	4b67      	ldr	r3, [pc, #412]	@ (8003da4 <HAL_RCC_OscConfig+0x4e8>)
 8003c06:	6a1b      	ldr	r3, [r3, #32]
 8003c08:	4a66      	ldr	r2, [pc, #408]	@ (8003da4 <HAL_RCC_OscConfig+0x4e8>)
 8003c0a:	f043 0301 	orr.w	r3, r3, #1
 8003c0e:	6213      	str	r3, [r2, #32]
 8003c10:	e00b      	b.n	8003c2a <HAL_RCC_OscConfig+0x36e>
 8003c12:	4b64      	ldr	r3, [pc, #400]	@ (8003da4 <HAL_RCC_OscConfig+0x4e8>)
 8003c14:	6a1b      	ldr	r3, [r3, #32]
 8003c16:	4a63      	ldr	r2, [pc, #396]	@ (8003da4 <HAL_RCC_OscConfig+0x4e8>)
 8003c18:	f023 0301 	bic.w	r3, r3, #1
 8003c1c:	6213      	str	r3, [r2, #32]
 8003c1e:	4b61      	ldr	r3, [pc, #388]	@ (8003da4 <HAL_RCC_OscConfig+0x4e8>)
 8003c20:	6a1b      	ldr	r3, [r3, #32]
 8003c22:	4a60      	ldr	r2, [pc, #384]	@ (8003da4 <HAL_RCC_OscConfig+0x4e8>)
 8003c24:	f023 0304 	bic.w	r3, r3, #4
 8003c28:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	691b      	ldr	r3, [r3, #16]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d015      	beq.n	8003c5e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c32:	f7fd fda7 	bl	8001784 <HAL_GetTick>
 8003c36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c38:	e00a      	b.n	8003c50 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c3a:	f7fd fda3 	bl	8001784 <HAL_GetTick>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d901      	bls.n	8003c50 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003c4c:	2303      	movs	r3, #3
 8003c4e:	e143      	b.n	8003ed8 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c50:	4b54      	ldr	r3, [pc, #336]	@ (8003da4 <HAL_RCC_OscConfig+0x4e8>)
 8003c52:	6a1b      	ldr	r3, [r3, #32]
 8003c54:	f003 0302 	and.w	r3, r3, #2
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d0ee      	beq.n	8003c3a <HAL_RCC_OscConfig+0x37e>
 8003c5c:	e014      	b.n	8003c88 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c5e:	f7fd fd91 	bl	8001784 <HAL_GetTick>
 8003c62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c64:	e00a      	b.n	8003c7c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c66:	f7fd fd8d 	bl	8001784 <HAL_GetTick>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d901      	bls.n	8003c7c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003c78:	2303      	movs	r3, #3
 8003c7a:	e12d      	b.n	8003ed8 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c7c:	4b49      	ldr	r3, [pc, #292]	@ (8003da4 <HAL_RCC_OscConfig+0x4e8>)
 8003c7e:	6a1b      	ldr	r3, [r3, #32]
 8003c80:	f003 0302 	and.w	r3, r3, #2
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d1ee      	bne.n	8003c66 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003c88:	7dfb      	ldrb	r3, [r7, #23]
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d105      	bne.n	8003c9a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c8e:	4b45      	ldr	r3, [pc, #276]	@ (8003da4 <HAL_RCC_OscConfig+0x4e8>)
 8003c90:	69db      	ldr	r3, [r3, #28]
 8003c92:	4a44      	ldr	r2, [pc, #272]	@ (8003da4 <HAL_RCC_OscConfig+0x4e8>)
 8003c94:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c98:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	f000 808c 	beq.w	8003dbc <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8003ca4:	4b3f      	ldr	r3, [pc, #252]	@ (8003da4 <HAL_RCC_OscConfig+0x4e8>)
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003cac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cb0:	d10e      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8003cb2:	4b3c      	ldr	r3, [pc, #240]	@ (8003da4 <HAL_RCC_OscConfig+0x4e8>)
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8003cba:	2b08      	cmp	r3, #8
 8003cbc:	d108      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8003cbe:	4b39      	ldr	r3, [pc, #228]	@ (8003da4 <HAL_RCC_OscConfig+0x4e8>)
 8003cc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cc2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8003cc6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cca:	d101      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e103      	b.n	8003ed8 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cd4:	2b02      	cmp	r3, #2
 8003cd6:	d14e      	bne.n	8003d76 <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8003cd8:	4b32      	ldr	r3, [pc, #200]	@ (8003da4 <HAL_RCC_OscConfig+0x4e8>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d009      	beq.n	8003cf8 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8003ce4:	4b2f      	ldr	r3, [pc, #188]	@ (8003da4 <HAL_RCC_OscConfig+0x4e8>)
 8003ce6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ce8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d001      	beq.n	8003cf8 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e0ef      	b.n	8003ed8 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8003cf8:	4b2c      	ldr	r3, [pc, #176]	@ (8003dac <HAL_RCC_OscConfig+0x4f0>)
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cfe:	f7fd fd41 	bl	8001784 <HAL_GetTick>
 8003d02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8003d04:	e008      	b.n	8003d18 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003d06:	f7fd fd3d 	bl	8001784 <HAL_GetTick>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	1ad3      	subs	r3, r2, r3
 8003d10:	2b64      	cmp	r3, #100	@ 0x64
 8003d12:	d901      	bls.n	8003d18 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003d14:	2303      	movs	r3, #3
 8003d16:	e0df      	b.n	8003ed8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8003d18:	4b22      	ldr	r3, [pc, #136]	@ (8003da4 <HAL_RCC_OscConfig+0x4e8>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d1f0      	bne.n	8003d06 <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8003d24:	4b1f      	ldr	r3, [pc, #124]	@ (8003da4 <HAL_RCC_OscConfig+0x4e8>)
 8003d26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d28:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d30:	491c      	ldr	r1, [pc, #112]	@ (8003da4 <HAL_RCC_OscConfig+0x4e8>)
 8003d32:	4313      	orrs	r3, r2
 8003d34:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8003d36:	4b1b      	ldr	r3, [pc, #108]	@ (8003da4 <HAL_RCC_OscConfig+0x4e8>)
 8003d38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d3a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d42:	4918      	ldr	r1, [pc, #96]	@ (8003da4 <HAL_RCC_OscConfig+0x4e8>)
 8003d44:	4313      	orrs	r3, r2
 8003d46:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8003d48:	4b18      	ldr	r3, [pc, #96]	@ (8003dac <HAL_RCC_OscConfig+0x4f0>)
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d4e:	f7fd fd19 	bl	8001784 <HAL_GetTick>
 8003d52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8003d54:	e008      	b.n	8003d68 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003d56:	f7fd fd15 	bl	8001784 <HAL_GetTick>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	1ad3      	subs	r3, r2, r3
 8003d60:	2b64      	cmp	r3, #100	@ 0x64
 8003d62:	d901      	bls.n	8003d68 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8003d64:	2303      	movs	r3, #3
 8003d66:	e0b7      	b.n	8003ed8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8003d68:	4b0e      	ldr	r3, [pc, #56]	@ (8003da4 <HAL_RCC_OscConfig+0x4e8>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d0f0      	beq.n	8003d56 <HAL_RCC_OscConfig+0x49a>
 8003d74:	e022      	b.n	8003dbc <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8003d76:	4b0b      	ldr	r3, [pc, #44]	@ (8003da4 <HAL_RCC_OscConfig+0x4e8>)
 8003d78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d7a:	4a0a      	ldr	r2, [pc, #40]	@ (8003da4 <HAL_RCC_OscConfig+0x4e8>)
 8003d7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d80:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8003d82:	4b0a      	ldr	r3, [pc, #40]	@ (8003dac <HAL_RCC_OscConfig+0x4f0>)
 8003d84:	2200      	movs	r2, #0
 8003d86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d88:	f7fd fcfc 	bl	8001784 <HAL_GetTick>
 8003d8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8003d8e:	e00f      	b.n	8003db0 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003d90:	f7fd fcf8 	bl	8001784 <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	2b64      	cmp	r3, #100	@ 0x64
 8003d9c:	d908      	bls.n	8003db0 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	e09a      	b.n	8003ed8 <HAL_RCC_OscConfig+0x61c>
 8003da2:	bf00      	nop
 8003da4:	40021000 	.word	0x40021000
 8003da8:	40007000 	.word	0x40007000
 8003dac:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8003db0:	4b4b      	ldr	r3, [pc, #300]	@ (8003ee0 <HAL_RCC_OscConfig+0x624>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d1e9      	bne.n	8003d90 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6a1b      	ldr	r3, [r3, #32]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	f000 8088 	beq.w	8003ed6 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003dc6:	4b46      	ldr	r3, [pc, #280]	@ (8003ee0 <HAL_RCC_OscConfig+0x624>)
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	f003 030c 	and.w	r3, r3, #12
 8003dce:	2b08      	cmp	r3, #8
 8003dd0:	d068      	beq.n	8003ea4 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a1b      	ldr	r3, [r3, #32]
 8003dd6:	2b02      	cmp	r3, #2
 8003dd8:	d14d      	bne.n	8003e76 <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dda:	4b42      	ldr	r3, [pc, #264]	@ (8003ee4 <HAL_RCC_OscConfig+0x628>)
 8003ddc:	2200      	movs	r2, #0
 8003dde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003de0:	f7fd fcd0 	bl	8001784 <HAL_GetTick>
 8003de4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003de6:	e008      	b.n	8003dfa <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003de8:	f7fd fccc 	bl	8001784 <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d901      	bls.n	8003dfa <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	e06e      	b.n	8003ed8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003dfa:	4b39      	ldr	r3, [pc, #228]	@ (8003ee0 <HAL_RCC_OscConfig+0x624>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d1f0      	bne.n	8003de8 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e0e:	d10f      	bne.n	8003e30 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8003e10:	4b33      	ldr	r3, [pc, #204]	@ (8003ee0 <HAL_RCC_OscConfig+0x624>)
 8003e12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	4931      	ldr	r1, [pc, #196]	@ (8003ee0 <HAL_RCC_OscConfig+0x624>)
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003e1e:	4b30      	ldr	r3, [pc, #192]	@ (8003ee0 <HAL_RCC_OscConfig+0x624>)
 8003e20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e22:	f023 020f 	bic.w	r2, r3, #15
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	492d      	ldr	r1, [pc, #180]	@ (8003ee0 <HAL_RCC_OscConfig+0x624>)
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	62cb      	str	r3, [r1, #44]	@ 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e30:	4b2b      	ldr	r3, [pc, #172]	@ (8003ee0 <HAL_RCC_OscConfig+0x624>)
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e40:	430b      	orrs	r3, r1
 8003e42:	4927      	ldr	r1, [pc, #156]	@ (8003ee0 <HAL_RCC_OscConfig+0x624>)
 8003e44:	4313      	orrs	r3, r2
 8003e46:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e48:	4b26      	ldr	r3, [pc, #152]	@ (8003ee4 <HAL_RCC_OscConfig+0x628>)
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e4e:	f7fd fc99 	bl	8001784 <HAL_GetTick>
 8003e52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e54:	e008      	b.n	8003e68 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e56:	f7fd fc95 	bl	8001784 <HAL_GetTick>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	d901      	bls.n	8003e68 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8003e64:	2303      	movs	r3, #3
 8003e66:	e037      	b.n	8003ed8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e68:	4b1d      	ldr	r3, [pc, #116]	@ (8003ee0 <HAL_RCC_OscConfig+0x624>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d0f0      	beq.n	8003e56 <HAL_RCC_OscConfig+0x59a>
 8003e74:	e02f      	b.n	8003ed6 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e76:	4b1b      	ldr	r3, [pc, #108]	@ (8003ee4 <HAL_RCC_OscConfig+0x628>)
 8003e78:	2200      	movs	r2, #0
 8003e7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e7c:	f7fd fc82 	bl	8001784 <HAL_GetTick>
 8003e80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e82:	e008      	b.n	8003e96 <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e84:	f7fd fc7e 	bl	8001784 <HAL_GetTick>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d901      	bls.n	8003e96 <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e020      	b.n	8003ed8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e96:	4b12      	ldr	r3, [pc, #72]	@ (8003ee0 <HAL_RCC_OscConfig+0x624>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d1f0      	bne.n	8003e84 <HAL_RCC_OscConfig+0x5c8>
 8003ea2:	e018      	b.n	8003ed6 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a1b      	ldr	r3, [r3, #32]
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d101      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e013      	b.n	8003ed8 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003eb0:	4b0b      	ldr	r3, [pc, #44]	@ (8003ee0 <HAL_RCC_OscConfig+0x624>)
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d106      	bne.n	8003ed2 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d001      	beq.n	8003ed6 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e000      	b.n	8003ed8 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 8003ed6:	2300      	movs	r3, #0
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3718      	adds	r7, #24
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	40021000 	.word	0x40021000
 8003ee4:	42420060 	.word	0x42420060

08003ee8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b084      	sub	sp, #16
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d101      	bne.n	8003efc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e0d0      	b.n	800409e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003efc:	4b6a      	ldr	r3, [pc, #424]	@ (80040a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 0307 	and.w	r3, r3, #7
 8003f04:	683a      	ldr	r2, [r7, #0]
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d910      	bls.n	8003f2c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f0a:	4b67      	ldr	r3, [pc, #412]	@ (80040a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f023 0207 	bic.w	r2, r3, #7
 8003f12:	4965      	ldr	r1, [pc, #404]	@ (80040a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f1a:	4b63      	ldr	r3, [pc, #396]	@ (80040a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0307 	and.w	r3, r3, #7
 8003f22:	683a      	ldr	r2, [r7, #0]
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d001      	beq.n	8003f2c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e0b8      	b.n	800409e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0302 	and.w	r3, r3, #2
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d020      	beq.n	8003f7a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0304 	and.w	r3, r3, #4
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d005      	beq.n	8003f50 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f44:	4b59      	ldr	r3, [pc, #356]	@ (80040ac <HAL_RCC_ClockConfig+0x1c4>)
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	4a58      	ldr	r2, [pc, #352]	@ (80040ac <HAL_RCC_ClockConfig+0x1c4>)
 8003f4a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003f4e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 0308 	and.w	r3, r3, #8
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d005      	beq.n	8003f68 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f5c:	4b53      	ldr	r3, [pc, #332]	@ (80040ac <HAL_RCC_ClockConfig+0x1c4>)
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	4a52      	ldr	r2, [pc, #328]	@ (80040ac <HAL_RCC_ClockConfig+0x1c4>)
 8003f62:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003f66:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f68:	4b50      	ldr	r3, [pc, #320]	@ (80040ac <HAL_RCC_ClockConfig+0x1c4>)
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	494d      	ldr	r1, [pc, #308]	@ (80040ac <HAL_RCC_ClockConfig+0x1c4>)
 8003f76:	4313      	orrs	r3, r2
 8003f78:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 0301 	and.w	r3, r3, #1
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d040      	beq.n	8004008 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d107      	bne.n	8003f9e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f8e:	4b47      	ldr	r3, [pc, #284]	@ (80040ac <HAL_RCC_ClockConfig+0x1c4>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d115      	bne.n	8003fc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e07f      	b.n	800409e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	2b02      	cmp	r3, #2
 8003fa4:	d107      	bne.n	8003fb6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fa6:	4b41      	ldr	r3, [pc, #260]	@ (80040ac <HAL_RCC_ClockConfig+0x1c4>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d109      	bne.n	8003fc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e073      	b.n	800409e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fb6:	4b3d      	ldr	r3, [pc, #244]	@ (80040ac <HAL_RCC_ClockConfig+0x1c4>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 0302 	and.w	r3, r3, #2
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d101      	bne.n	8003fc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e06b      	b.n	800409e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fc6:	4b39      	ldr	r3, [pc, #228]	@ (80040ac <HAL_RCC_ClockConfig+0x1c4>)
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	f023 0203 	bic.w	r2, r3, #3
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	4936      	ldr	r1, [pc, #216]	@ (80040ac <HAL_RCC_ClockConfig+0x1c4>)
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fd8:	f7fd fbd4 	bl	8001784 <HAL_GetTick>
 8003fdc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fde:	e00a      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fe0:	f7fd fbd0 	bl	8001784 <HAL_GetTick>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d901      	bls.n	8003ff6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e053      	b.n	800409e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ff6:	4b2d      	ldr	r3, [pc, #180]	@ (80040ac <HAL_RCC_ClockConfig+0x1c4>)
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	f003 020c 	and.w	r2, r3, #12
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	429a      	cmp	r2, r3
 8004006:	d1eb      	bne.n	8003fe0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004008:	4b27      	ldr	r3, [pc, #156]	@ (80040a8 <HAL_RCC_ClockConfig+0x1c0>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 0307 	and.w	r3, r3, #7
 8004010:	683a      	ldr	r2, [r7, #0]
 8004012:	429a      	cmp	r2, r3
 8004014:	d210      	bcs.n	8004038 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004016:	4b24      	ldr	r3, [pc, #144]	@ (80040a8 <HAL_RCC_ClockConfig+0x1c0>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f023 0207 	bic.w	r2, r3, #7
 800401e:	4922      	ldr	r1, [pc, #136]	@ (80040a8 <HAL_RCC_ClockConfig+0x1c0>)
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	4313      	orrs	r3, r2
 8004024:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004026:	4b20      	ldr	r3, [pc, #128]	@ (80040a8 <HAL_RCC_ClockConfig+0x1c0>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 0307 	and.w	r3, r3, #7
 800402e:	683a      	ldr	r2, [r7, #0]
 8004030:	429a      	cmp	r2, r3
 8004032:	d001      	beq.n	8004038 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	e032      	b.n	800409e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 0304 	and.w	r3, r3, #4
 8004040:	2b00      	cmp	r3, #0
 8004042:	d008      	beq.n	8004056 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004044:	4b19      	ldr	r3, [pc, #100]	@ (80040ac <HAL_RCC_ClockConfig+0x1c4>)
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	4916      	ldr	r1, [pc, #88]	@ (80040ac <HAL_RCC_ClockConfig+0x1c4>)
 8004052:	4313      	orrs	r3, r2
 8004054:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 0308 	and.w	r3, r3, #8
 800405e:	2b00      	cmp	r3, #0
 8004060:	d009      	beq.n	8004076 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004062:	4b12      	ldr	r3, [pc, #72]	@ (80040ac <HAL_RCC_ClockConfig+0x1c4>)
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	691b      	ldr	r3, [r3, #16]
 800406e:	00db      	lsls	r3, r3, #3
 8004070:	490e      	ldr	r1, [pc, #56]	@ (80040ac <HAL_RCC_ClockConfig+0x1c4>)
 8004072:	4313      	orrs	r3, r2
 8004074:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004076:	f000 f821 	bl	80040bc <HAL_RCC_GetSysClockFreq>
 800407a:	4602      	mov	r2, r0
 800407c:	4b0b      	ldr	r3, [pc, #44]	@ (80040ac <HAL_RCC_ClockConfig+0x1c4>)
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	091b      	lsrs	r3, r3, #4
 8004082:	f003 030f 	and.w	r3, r3, #15
 8004086:	490a      	ldr	r1, [pc, #40]	@ (80040b0 <HAL_RCC_ClockConfig+0x1c8>)
 8004088:	5ccb      	ldrb	r3, [r1, r3]
 800408a:	fa22 f303 	lsr.w	r3, r2, r3
 800408e:	4a09      	ldr	r2, [pc, #36]	@ (80040b4 <HAL_RCC_ClockConfig+0x1cc>)
 8004090:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004092:	4b09      	ldr	r3, [pc, #36]	@ (80040b8 <HAL_RCC_ClockConfig+0x1d0>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4618      	mov	r0, r3
 8004098:	f7fd fb32 	bl	8001700 <HAL_InitTick>

  return HAL_OK;
 800409c:	2300      	movs	r3, #0
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3710      	adds	r7, #16
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	40022000 	.word	0x40022000
 80040ac:	40021000 	.word	0x40021000
 80040b0:	08008b98 	.word	0x08008b98
 80040b4:	20000000 	.word	0x20000000
 80040b8:	20000004 	.word	0x20000004

080040bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040c0:	b092      	sub	sp, #72	@ 0x48
 80040c2:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80040c4:	2300      	movs	r3, #0
 80040c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80040c8:	2300      	movs	r3, #0
 80040ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 80040cc:	2300      	movs	r3, #0
 80040ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80040d0:	2300      	movs	r3, #0
 80040d2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t sysclockfreq = 0U;
 80040d4:	2300      	movs	r3, #0
 80040d6:	643b      	str	r3, [r7, #64]	@ 0x40
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 80040d8:	2300      	movs	r3, #0
 80040da:	633b      	str	r3, [r7, #48]	@ 0x30
 80040dc:	2300      	movs	r3, #0
 80040de:	62fb      	str	r3, [r7, #44]	@ 0x2c
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80040e0:	4b6b      	ldr	r3, [pc, #428]	@ (8004290 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80040e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040e8:	f003 030c 	and.w	r3, r3, #12
 80040ec:	2b04      	cmp	r3, #4
 80040ee:	d002      	beq.n	80040f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80040f0:	2b08      	cmp	r3, #8
 80040f2:	d003      	beq.n	80040fc <HAL_RCC_GetSysClockFreq+0x40>
 80040f4:	e0c3      	b.n	800427e <HAL_RCC_GetSysClockFreq+0x1c2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80040f6:	4b67      	ldr	r3, [pc, #412]	@ (8004294 <HAL_RCC_GetSysClockFreq+0x1d8>)
 80040f8:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 80040fa:	e0c3      	b.n	8004284 <HAL_RCC_GetSysClockFreq+0x1c8>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80040fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040fe:	0c9b      	lsrs	r3, r3, #18
 8004100:	f003 020f 	and.w	r2, r3, #15
 8004104:	4b64      	ldr	r3, [pc, #400]	@ (8004298 <HAL_RCC_GetSysClockFreq+0x1dc>)
 8004106:	5c9b      	ldrb	r3, [r3, r2]
 8004108:	637b      	str	r3, [r7, #52]	@ 0x34
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800410a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800410c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004110:	2b00      	cmp	r3, #0
 8004112:	f000 80ac 	beq.w	800426e <HAL_RCC_GetSysClockFreq+0x1b2>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8004116:	4b5e      	ldr	r3, [pc, #376]	@ (8004290 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8004118:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800411a:	f003 020f 	and.w	r2, r3, #15
 800411e:	4b5f      	ldr	r3, [pc, #380]	@ (800429c <HAL_RCC_GetSysClockFreq+0x1e0>)
 8004120:	5c9b      	ldrb	r3, [r3, r2]
 8004122:	63bb      	str	r3, [r7, #56]	@ 0x38
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8004124:	4b5a      	ldr	r3, [pc, #360]	@ (8004290 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8004126:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004128:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800412c:	2b00      	cmp	r3, #0
 800412e:	f000 808c 	beq.w	800424a <HAL_RCC_GetSysClockFreq+0x18e>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8004132:	4b57      	ldr	r3, [pc, #348]	@ (8004290 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8004134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004136:	091b      	lsrs	r3, r3, #4
 8004138:	f003 030f 	and.w	r3, r3, #15
 800413c:	3301      	adds	r3, #1
 800413e:	633b      	str	r3, [r7, #48]	@ 0x30
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8004140:	4b53      	ldr	r3, [pc, #332]	@ (8004290 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8004142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004144:	0a1b      	lsrs	r3, r3, #8
 8004146:	f003 030f 	and.w	r3, r3, #15
 800414a:	3302      	adds	r3, #2
 800414c:	62fb      	str	r3, [r7, #44]	@ 0x2c
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 800414e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004150:	2200      	movs	r2, #0
 8004152:	623b      	str	r3, [r7, #32]
 8004154:	627a      	str	r2, [r7, #36]	@ 0x24
 8004156:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004158:	2200      	movs	r2, #0
 800415a:	4618      	mov	r0, r3
 800415c:	4611      	mov	r1, r2
 800415e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004160:	fb00 f203 	mul.w	r2, r0, r3
 8004164:	6a3b      	ldr	r3, [r7, #32]
 8004166:	fb03 f301 	mul.w	r3, r3, r1
 800416a:	4413      	add	r3, r2
 800416c:	6a3a      	ldr	r2, [r7, #32]
 800416e:	fba2 4500 	umull	r4, r5, r2, r0
 8004172:	442b      	add	r3, r5
 8004174:	461d      	mov	r5, r3
 8004176:	4622      	mov	r2, r4
 8004178:	462b      	mov	r3, r5
 800417a:	f04f 0000 	mov.w	r0, #0
 800417e:	f04f 0100 	mov.w	r1, #0
 8004182:	0159      	lsls	r1, r3, #5
 8004184:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004188:	0150      	lsls	r0, r2, #5
 800418a:	4602      	mov	r2, r0
 800418c:	460b      	mov	r3, r1
 800418e:	ebb2 0a04 	subs.w	sl, r2, r4
 8004192:	eb63 0b05 	sbc.w	fp, r3, r5
 8004196:	f04f 0200 	mov.w	r2, #0
 800419a:	f04f 0300 	mov.w	r3, #0
 800419e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80041a2:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80041a6:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80041aa:	ebb2 080a 	subs.w	r8, r2, sl
 80041ae:	eb63 090b 	sbc.w	r9, r3, fp
 80041b2:	f04f 0200 	mov.w	r2, #0
 80041b6:	f04f 0300 	mov.w	r3, #0
 80041ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80041be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80041c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80041c6:	4690      	mov	r8, r2
 80041c8:	4699      	mov	r9, r3
 80041ca:	eb18 0304 	adds.w	r3, r8, r4
 80041ce:	603b      	str	r3, [r7, #0]
 80041d0:	eb49 0305 	adc.w	r3, r9, r5
 80041d4:	607b      	str	r3, [r7, #4]
 80041d6:	f04f 0200 	mov.w	r2, #0
 80041da:	f04f 0300 	mov.w	r3, #0
 80041de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80041e2:	4629      	mov	r1, r5
 80041e4:	024b      	lsls	r3, r1, #9
 80041e6:	4620      	mov	r0, r4
 80041e8:	4629      	mov	r1, r5
 80041ea:	4604      	mov	r4, r0
 80041ec:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 80041f0:	4601      	mov	r1, r0
 80041f2:	024a      	lsls	r2, r1, #9
 80041f4:	4610      	mov	r0, r2
 80041f6:	4619      	mov	r1, r3
 80041f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041fa:	2200      	movs	r2, #0
 80041fc:	613b      	str	r3, [r7, #16]
 80041fe:	617a      	str	r2, [r7, #20]
 8004200:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004202:	2200      	movs	r2, #0
 8004204:	60bb      	str	r3, [r7, #8]
 8004206:	60fa      	str	r2, [r7, #12]
 8004208:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800420c:	4622      	mov	r2, r4
 800420e:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8004212:	4645      	mov	r5, r8
 8004214:	fb05 f202 	mul.w	r2, r5, r2
 8004218:	46cc      	mov	ip, r9
 800421a:	4625      	mov	r5, r4
 800421c:	461c      	mov	r4, r3
 800421e:	4623      	mov	r3, r4
 8004220:	fb03 f30c 	mul.w	r3, r3, ip
 8004224:	4413      	add	r3, r2
 8004226:	4622      	mov	r2, r4
 8004228:	4644      	mov	r4, r8
 800422a:	fba2 2404 	umull	r2, r4, r2, r4
 800422e:	61fc      	str	r4, [r7, #28]
 8004230:	61ba      	str	r2, [r7, #24]
 8004232:	69fa      	ldr	r2, [r7, #28]
 8004234:	4413      	add	r3, r2
 8004236:	61fb      	str	r3, [r7, #28]
 8004238:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800423c:	f7fb fff2 	bl	8000224 <__aeabi_uldivmod>
 8004240:	4602      	mov	r2, r0
 8004242:	460b      	mov	r3, r1
 8004244:	4613      	mov	r3, r2
 8004246:	647b      	str	r3, [r7, #68]	@ 0x44
 8004248:	e007      	b.n	800425a <HAL_RCC_GetSysClockFreq+0x19e>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 800424a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800424c:	4a11      	ldr	r2, [pc, #68]	@ (8004294 <HAL_RCC_GetSysClockFreq+0x1d8>)
 800424e:	fb03 f202 	mul.w	r2, r3, r2
 8004252:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004254:	fbb2 f3f3 	udiv	r3, r2, r3
 8004258:	647b      	str	r3, [r7, #68]	@ 0x44
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 800425a:	4b0f      	ldr	r3, [pc, #60]	@ (8004298 <HAL_RCC_GetSysClockFreq+0x1dc>)
 800425c:	7b5b      	ldrb	r3, [r3, #13]
 800425e:	461a      	mov	r2, r3
 8004260:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004262:	4293      	cmp	r3, r2
 8004264:	d108      	bne.n	8004278 <HAL_RCC_GetSysClockFreq+0x1bc>
        {
          pllclk = pllclk / 2;
 8004266:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004268:	085b      	lsrs	r3, r3, #1
 800426a:	647b      	str	r3, [r7, #68]	@ 0x44
 800426c:	e004      	b.n	8004278 <HAL_RCC_GetSysClockFreq+0x1bc>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800426e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004270:	4a0b      	ldr	r2, [pc, #44]	@ (80042a0 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8004272:	fb02 f303 	mul.w	r3, r2, r3
 8004276:	647b      	str	r3, [r7, #68]	@ 0x44
      }
      sysclockfreq = pllclk;
 8004278:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800427a:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 800427c:	e002      	b.n	8004284 <HAL_RCC_GetSysClockFreq+0x1c8>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800427e:	4b05      	ldr	r3, [pc, #20]	@ (8004294 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8004280:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8004282:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004284:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
 8004286:	4618      	mov	r0, r3
 8004288:	3748      	adds	r7, #72	@ 0x48
 800428a:	46bd      	mov	sp, r7
 800428c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004290:	40021000 	.word	0x40021000
 8004294:	007a1200 	.word	0x007a1200
 8004298:	08008ba8 	.word	0x08008ba8
 800429c:	08008bb8 	.word	0x08008bb8
 80042a0:	003d0900 	.word	0x003d0900

080042a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042a4:	b480      	push	{r7}
 80042a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042a8:	4b02      	ldr	r3, [pc, #8]	@ (80042b4 <HAL_RCC_GetHCLKFreq+0x10>)
 80042aa:	681b      	ldr	r3, [r3, #0]
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bc80      	pop	{r7}
 80042b2:	4770      	bx	lr
 80042b4:	20000000 	.word	0x20000000

080042b8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b085      	sub	sp, #20
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80042c0:	4b0a      	ldr	r3, [pc, #40]	@ (80042ec <RCC_Delay+0x34>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a0a      	ldr	r2, [pc, #40]	@ (80042f0 <RCC_Delay+0x38>)
 80042c6:	fba2 2303 	umull	r2, r3, r2, r3
 80042ca:	0a5b      	lsrs	r3, r3, #9
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	fb02 f303 	mul.w	r3, r2, r3
 80042d2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80042d4:	bf00      	nop
  }
  while (Delay --);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	1e5a      	subs	r2, r3, #1
 80042da:	60fa      	str	r2, [r7, #12]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d1f9      	bne.n	80042d4 <RCC_Delay+0x1c>
}
 80042e0:	bf00      	nop
 80042e2:	bf00      	nop
 80042e4:	3714      	adds	r7, #20
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bc80      	pop	{r7}
 80042ea:	4770      	bx	lr
 80042ec:	20000000 	.word	0x20000000
 80042f0:	10624dd3 	.word	0x10624dd3

080042f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b088      	sub	sp, #32
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80042fc:	2300      	movs	r3, #0
 80042fe:	617b      	str	r3, [r7, #20]
 8004300:	2300      	movs	r3, #0
 8004302:	613b      	str	r3, [r7, #16]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
 8004304:	2300      	movs	r3, #0
 8004306:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 0301 	and.w	r3, r3, #1
 8004310:	2b00      	cmp	r3, #0
 8004312:	d07d      	beq.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    FlagStatus pwrclkchanged = RESET;
 8004314:	2300      	movs	r3, #0
 8004316:	76fb      	strb	r3, [r7, #27]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004318:	4b8b      	ldr	r3, [pc, #556]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800431a:	69db      	ldr	r3, [r3, #28]
 800431c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004320:	2b00      	cmp	r3, #0
 8004322:	d10d      	bne.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004324:	4b88      	ldr	r3, [pc, #544]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004326:	69db      	ldr	r3, [r3, #28]
 8004328:	4a87      	ldr	r2, [pc, #540]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800432a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800432e:	61d3      	str	r3, [r2, #28]
 8004330:	4b85      	ldr	r3, [pc, #532]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004332:	69db      	ldr	r3, [r3, #28]
 8004334:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004338:	60fb      	str	r3, [r7, #12]
 800433a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800433c:	2301      	movs	r3, #1
 800433e:	76fb      	strb	r3, [r7, #27]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004340:	4b82      	ldr	r3, [pc, #520]	@ (800454c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004348:	2b00      	cmp	r3, #0
 800434a:	d118      	bne.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800434c:	4b7f      	ldr	r3, [pc, #508]	@ (800454c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a7e      	ldr	r2, [pc, #504]	@ (800454c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004352:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004356:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004358:	f7fd fa14 	bl	8001784 <HAL_GetTick>
 800435c:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800435e:	e008      	b.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004360:	f7fd fa10 	bl	8001784 <HAL_GetTick>
 8004364:	4602      	mov	r2, r0
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	2b64      	cmp	r3, #100	@ 0x64
 800436c:	d901      	bls.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        {
          return HAL_TIMEOUT;
 800436e:	2303      	movs	r3, #3
 8004370:	e0e5      	b.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004372:	4b76      	ldr	r3, [pc, #472]	@ (800454c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800437a:	2b00      	cmp	r3, #0
 800437c:	d0f0      	beq.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x6c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800437e:	4b72      	ldr	r3, [pc, #456]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004380:	6a1b      	ldr	r3, [r3, #32]
 8004382:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004386:	613b      	str	r3, [r7, #16]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d02e      	beq.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0xf8>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004396:	693a      	ldr	r2, [r7, #16]
 8004398:	429a      	cmp	r2, r3
 800439a:	d027      	beq.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800439c:	4b6a      	ldr	r3, [pc, #424]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800439e:	6a1b      	ldr	r3, [r3, #32]
 80043a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043a4:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80043a6:	4b6a      	ldr	r3, [pc, #424]	@ (8004550 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80043a8:	2201      	movs	r2, #1
 80043aa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80043ac:	4b68      	ldr	r3, [pc, #416]	@ (8004550 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80043ae:	2200      	movs	r2, #0
 80043b0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80043b2:	4a65      	ldr	r2, [pc, #404]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	f003 0301 	and.w	r3, r3, #1
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d014      	beq.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043c2:	f7fd f9df 	bl	8001784 <HAL_GetTick>
 80043c6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043c8:	e00a      	b.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0xec>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043ca:	f7fd f9db 	bl	8001784 <HAL_GetTick>
 80043ce:	4602      	mov	r2, r0
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	1ad3      	subs	r3, r2, r3
 80043d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043d8:	4293      	cmp	r3, r2
 80043da:	d901      	bls.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0xec>
          {
            return HAL_TIMEOUT;
 80043dc:	2303      	movs	r3, #3
 80043de:	e0ae      	b.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x24a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043e0:	4b59      	ldr	r3, [pc, #356]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80043e2:	6a1b      	ldr	r3, [r3, #32]
 80043e4:	f003 0302 	and.w	r3, r3, #2
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d0ee      	beq.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0xd6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043ec:	4b56      	ldr	r3, [pc, #344]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80043ee:	6a1b      	ldr	r3, [r3, #32]
 80043f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	4953      	ldr	r1, [pc, #332]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80043fa:	4313      	orrs	r3, r2
 80043fc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80043fe:	7efb      	ldrb	r3, [r7, #27]
 8004400:	2b01      	cmp	r3, #1
 8004402:	d105      	bne.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004404:	4b50      	ldr	r3, [pc, #320]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004406:	69db      	ldr	r3, [r3, #28]
 8004408:	4a4f      	ldr	r2, [pc, #316]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800440a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800440e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f003 0302 	and.w	r3, r3, #2
 8004418:	2b00      	cmp	r3, #0
 800441a:	d008      	beq.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800441c:	4b4a      	ldr	r3, [pc, #296]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	4947      	ldr	r1, [pc, #284]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800442a:	4313      	orrs	r3, r2
 800442c:	604b      	str	r3, [r1, #4]
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0304 	and.w	r3, r3, #4
 8004436:	2b00      	cmp	r3, #0
 8004438:	d008      	beq.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800443a:	4b43      	ldr	r3, [pc, #268]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800443c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800443e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	4940      	ldr	r1, [pc, #256]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004448:	4313      	orrs	r3, r2
 800444a:	62cb      	str	r3, [r1, #44]	@ 0x2c
  }

  /*------------------------------ I2S3 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 0308 	and.w	r3, r3, #8
 8004454:	2b00      	cmp	r3, #0
 8004456:	d008      	beq.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));

    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 8004458:	4b3b      	ldr	r3, [pc, #236]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800445a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800445c:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	691b      	ldr	r3, [r3, #16]
 8004464:	4938      	ldr	r1, [pc, #224]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004466:	4313      	orrs	r3, r2
 8004468:	62cb      	str	r3, [r1, #44]	@ 0x2c
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 800446a:	4b37      	ldr	r3, [pc, #220]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800446c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800446e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d105      	bne.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x18e>
 8004476:	4b34      	ldr	r3, [pc, #208]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800447a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d001      	beq.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Update flag to indicate that PLL I2S should be active */
    pllactive = 1;
 8004482:	2301      	movs	r3, #1
 8004484:	61fb      	str	r3, [r7, #28]
  }

  /* Check if PLL I2S need to be enabled */
  if (pllactive == 1)
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	2b01      	cmp	r3, #1
 800448a:	d148      	bne.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x22a>
  {
    /* Enable PLL I2S only if not active */
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 800448c:	4b2e      	ldr	r3, [pc, #184]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004494:	2b00      	cmp	r3, #0
 8004496:	d138      	bne.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x216>
      assert_param(IS_RCC_PLLI2S_MUL(PeriphClkInit->PLLI2S.PLLI2SMUL));
      assert_param(IS_RCC_HSE_PREDIV2(PeriphClkInit->PLLI2S.HSEPrediv2Value));

      /* Prediv2 can be written only when the PLL2 is disabled. */
      /* Return an error only if new value is different from the programmed value */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8004498:	4b2b      	ldr	r3, [pc, #172]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d009      	beq.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
          (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 80044a4:	4b28      	ldr	r3, [pc, #160]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80044a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044a8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	699b      	ldr	r3, [r3, #24]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d001      	beq.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      {
        return HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e042      	b.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x24a>
      }

      /* Configure the HSE prediv2 factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 80044b8:	4b23      	ldr	r3, [pc, #140]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80044ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	699b      	ldr	r3, [r3, #24]
 80044c4:	4920      	ldr	r1, [pc, #128]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80044c6:	4313      	orrs	r3, r2
 80044c8:	62cb      	str	r3, [r1, #44]	@ 0x2c

      /* Configure the main PLLI2S multiplication factors. */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 80044ca:	4b1f      	ldr	r3, [pc, #124]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80044cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ce:	f423 4270 	bic.w	r2, r3, #61440	@ 0xf000
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	695b      	ldr	r3, [r3, #20]
 80044d6:	491c      	ldr	r1, [pc, #112]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80044d8:	4313      	orrs	r3, r2
 80044da:	62cb      	str	r3, [r1, #44]	@ 0x2c

      /* Enable the main PLLI2S. */
      __HAL_RCC_PLLI2S_ENABLE();
 80044dc:	4b1d      	ldr	r3, [pc, #116]	@ (8004554 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044de:	2201      	movs	r2, #1
 80044e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044e2:	f7fd f94f 	bl	8001784 <HAL_GetTick>
 80044e6:	6178      	str	r0, [r7, #20]

      /* Wait till PLLI2S is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80044e8:	e008      	b.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x208>
      {
        if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80044ea:	f7fd f94b 	bl	8001784 <HAL_GetTick>
 80044ee:	4602      	mov	r2, r0
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	1ad3      	subs	r3, r2, r3
 80044f4:	2b64      	cmp	r3, #100	@ 0x64
 80044f6:	d901      	bls.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x208>
        {
          return HAL_TIMEOUT;
 80044f8:	2303      	movs	r3, #3
 80044fa:	e020      	b.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80044fc:	4b12      	ldr	r3, [pc, #72]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004504:	2b00      	cmp	r3, #0
 8004506:	d0f0      	beq.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8004508:	e009      	b.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x22a>
      }
    }
    else
    {
      /* Return an error only if user wants to change the PLLI2SMUL whereas PLLI2S is active */
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 800450a:	4b0f      	ldr	r3, [pc, #60]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800450c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800450e:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	695b      	ldr	r3, [r3, #20]
 8004516:	429a      	cmp	r2, r3
 8004518:	d001      	beq.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x22a>
      {
        return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e00f      	b.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x24a>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 0310 	and.w	r3, r3, #16
 8004526:	2b00      	cmp	r3, #0
 8004528:	d008      	beq.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800452a:	4b07      	ldr	r3, [pc, #28]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	69db      	ldr	r3, [r3, #28]
 8004536:	4904      	ldr	r1, [pc, #16]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004538:	4313      	orrs	r3, r2
 800453a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800453c:	2300      	movs	r3, #0
}
 800453e:	4618      	mov	r0, r3
 8004540:	3720      	adds	r7, #32
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
 8004546:	bf00      	nop
 8004548:	40021000 	.word	0x40021000
 800454c:	40007000 	.word	0x40007000
 8004550:	42420440 	.word	0x42420440
 8004554:	42420070 	.word	0x42420070

08004558 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b082      	sub	sp, #8
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d101      	bne.n	800456a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e041      	b.n	80045ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004570:	b2db      	uxtb	r3, r3
 8004572:	2b00      	cmp	r3, #0
 8004574:	d106      	bne.n	8004584 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f7fc fff2 	bl	8001568 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2202      	movs	r2, #2
 8004588:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	3304      	adds	r3, #4
 8004594:	4619      	mov	r1, r3
 8004596:	4610      	mov	r0, r2
 8004598:	f000 f948 	bl	800482c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2201      	movs	r2, #1
 80045a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80045ec:	2300      	movs	r3, #0
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3708      	adds	r7, #8
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
	...

080045f8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b085      	sub	sp, #20
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004606:	b2db      	uxtb	r3, r3
 8004608:	2b01      	cmp	r3, #1
 800460a:	d001      	beq.n	8004610 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	e037      	b.n	8004680 <HAL_TIM_Base_Start+0x88>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2202      	movs	r2, #2
 8004614:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a1b      	ldr	r2, [pc, #108]	@ (800468c <HAL_TIM_Base_Start+0x94>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d013      	beq.n	800464a <HAL_TIM_Base_Start+0x52>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800462a:	d00e      	beq.n	800464a <HAL_TIM_Base_Start+0x52>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a17      	ldr	r2, [pc, #92]	@ (8004690 <HAL_TIM_Base_Start+0x98>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d009      	beq.n	800464a <HAL_TIM_Base_Start+0x52>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a16      	ldr	r2, [pc, #88]	@ (8004694 <HAL_TIM_Base_Start+0x9c>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d004      	beq.n	800464a <HAL_TIM_Base_Start+0x52>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a14      	ldr	r2, [pc, #80]	@ (8004698 <HAL_TIM_Base_Start+0xa0>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d111      	bne.n	800466e <HAL_TIM_Base_Start+0x76>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	f003 0307 	and.w	r3, r3, #7
 8004654:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2b06      	cmp	r3, #6
 800465a:	d010      	beq.n	800467e <HAL_TIM_Base_Start+0x86>
    {
      __HAL_TIM_ENABLE(htim);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f042 0201 	orr.w	r2, r2, #1
 800466a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800466c:	e007      	b.n	800467e <HAL_TIM_Base_Start+0x86>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f042 0201 	orr.w	r2, r2, #1
 800467c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800467e:	2300      	movs	r3, #0
}
 8004680:	4618      	mov	r0, r3
 8004682:	3714      	adds	r7, #20
 8004684:	46bd      	mov	sp, r7
 8004686:	bc80      	pop	{r7}
 8004688:	4770      	bx	lr
 800468a:	bf00      	nop
 800468c:	40012c00 	.word	0x40012c00
 8004690:	40000400 	.word	0x40000400
 8004694:	40000800 	.word	0x40000800
 8004698:	40000c00 	.word	0x40000c00

0800469c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046a6:	2300      	movs	r3, #0
 80046a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d101      	bne.n	80046b8 <HAL_TIM_ConfigClockSource+0x1c>
 80046b4:	2302      	movs	r3, #2
 80046b6:	e0b4      	b.n	8004822 <HAL_TIM_ConfigClockSource+0x186>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2201      	movs	r2, #1
 80046bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2202      	movs	r2, #2
 80046c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80046d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80046de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	68ba      	ldr	r2, [r7, #8]
 80046e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80046f0:	d03e      	beq.n	8004770 <HAL_TIM_ConfigClockSource+0xd4>
 80046f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80046f6:	f200 8087 	bhi.w	8004808 <HAL_TIM_ConfigClockSource+0x16c>
 80046fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046fe:	f000 8086 	beq.w	800480e <HAL_TIM_ConfigClockSource+0x172>
 8004702:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004706:	d87f      	bhi.n	8004808 <HAL_TIM_ConfigClockSource+0x16c>
 8004708:	2b70      	cmp	r3, #112	@ 0x70
 800470a:	d01a      	beq.n	8004742 <HAL_TIM_ConfigClockSource+0xa6>
 800470c:	2b70      	cmp	r3, #112	@ 0x70
 800470e:	d87b      	bhi.n	8004808 <HAL_TIM_ConfigClockSource+0x16c>
 8004710:	2b60      	cmp	r3, #96	@ 0x60
 8004712:	d050      	beq.n	80047b6 <HAL_TIM_ConfigClockSource+0x11a>
 8004714:	2b60      	cmp	r3, #96	@ 0x60
 8004716:	d877      	bhi.n	8004808 <HAL_TIM_ConfigClockSource+0x16c>
 8004718:	2b50      	cmp	r3, #80	@ 0x50
 800471a:	d03c      	beq.n	8004796 <HAL_TIM_ConfigClockSource+0xfa>
 800471c:	2b50      	cmp	r3, #80	@ 0x50
 800471e:	d873      	bhi.n	8004808 <HAL_TIM_ConfigClockSource+0x16c>
 8004720:	2b40      	cmp	r3, #64	@ 0x40
 8004722:	d058      	beq.n	80047d6 <HAL_TIM_ConfigClockSource+0x13a>
 8004724:	2b40      	cmp	r3, #64	@ 0x40
 8004726:	d86f      	bhi.n	8004808 <HAL_TIM_ConfigClockSource+0x16c>
 8004728:	2b30      	cmp	r3, #48	@ 0x30
 800472a:	d064      	beq.n	80047f6 <HAL_TIM_ConfigClockSource+0x15a>
 800472c:	2b30      	cmp	r3, #48	@ 0x30
 800472e:	d86b      	bhi.n	8004808 <HAL_TIM_ConfigClockSource+0x16c>
 8004730:	2b20      	cmp	r3, #32
 8004732:	d060      	beq.n	80047f6 <HAL_TIM_ConfigClockSource+0x15a>
 8004734:	2b20      	cmp	r3, #32
 8004736:	d867      	bhi.n	8004808 <HAL_TIM_ConfigClockSource+0x16c>
 8004738:	2b00      	cmp	r3, #0
 800473a:	d05c      	beq.n	80047f6 <HAL_TIM_ConfigClockSource+0x15a>
 800473c:	2b10      	cmp	r3, #16
 800473e:	d05a      	beq.n	80047f6 <HAL_TIM_ConfigClockSource+0x15a>
 8004740:	e062      	b.n	8004808 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004752:	f000 f95a 	bl	8004a0a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004764:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	68ba      	ldr	r2, [r7, #8]
 800476c:	609a      	str	r2, [r3, #8]
      break;
 800476e:	e04f      	b.n	8004810 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004780:	f000 f943 	bl	8004a0a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	689a      	ldr	r2, [r3, #8]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004792:	609a      	str	r2, [r3, #8]
      break;
 8004794:	e03c      	b.n	8004810 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047a2:	461a      	mov	r2, r3
 80047a4:	f000 f8ba 	bl	800491c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	2150      	movs	r1, #80	@ 0x50
 80047ae:	4618      	mov	r0, r3
 80047b0:	f000 f911 	bl	80049d6 <TIM_ITRx_SetConfig>
      break;
 80047b4:	e02c      	b.n	8004810 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80047c2:	461a      	mov	r2, r3
 80047c4:	f000 f8d8 	bl	8004978 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	2160      	movs	r1, #96	@ 0x60
 80047ce:	4618      	mov	r0, r3
 80047d0:	f000 f901 	bl	80049d6 <TIM_ITRx_SetConfig>
      break;
 80047d4:	e01c      	b.n	8004810 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047e2:	461a      	mov	r2, r3
 80047e4:	f000 f89a 	bl	800491c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	2140      	movs	r1, #64	@ 0x40
 80047ee:	4618      	mov	r0, r3
 80047f0:	f000 f8f1 	bl	80049d6 <TIM_ITRx_SetConfig>
      break;
 80047f4:	e00c      	b.n	8004810 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4619      	mov	r1, r3
 8004800:	4610      	mov	r0, r2
 8004802:	f000 f8e8 	bl	80049d6 <TIM_ITRx_SetConfig>
      break;
 8004806:	e003      	b.n	8004810 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	73fb      	strb	r3, [r7, #15]
      break;
 800480c:	e000      	b.n	8004810 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800480e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004820:	7bfb      	ldrb	r3, [r7, #15]
}
 8004822:	4618      	mov	r0, r3
 8004824:	3710      	adds	r7, #16
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
	...

0800482c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800482c:	b480      	push	{r7}
 800482e:	b085      	sub	sp, #20
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	4a33      	ldr	r2, [pc, #204]	@ (800490c <TIM_Base_SetConfig+0xe0>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d00f      	beq.n	8004864 <TIM_Base_SetConfig+0x38>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800484a:	d00b      	beq.n	8004864 <TIM_Base_SetConfig+0x38>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	4a30      	ldr	r2, [pc, #192]	@ (8004910 <TIM_Base_SetConfig+0xe4>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d007      	beq.n	8004864 <TIM_Base_SetConfig+0x38>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	4a2f      	ldr	r2, [pc, #188]	@ (8004914 <TIM_Base_SetConfig+0xe8>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d003      	beq.n	8004864 <TIM_Base_SetConfig+0x38>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	4a2e      	ldr	r2, [pc, #184]	@ (8004918 <TIM_Base_SetConfig+0xec>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d108      	bne.n	8004876 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800486a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	68fa      	ldr	r2, [r7, #12]
 8004872:	4313      	orrs	r3, r2
 8004874:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4a24      	ldr	r2, [pc, #144]	@ (800490c <TIM_Base_SetConfig+0xe0>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d00f      	beq.n	800489e <TIM_Base_SetConfig+0x72>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004884:	d00b      	beq.n	800489e <TIM_Base_SetConfig+0x72>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4a21      	ldr	r2, [pc, #132]	@ (8004910 <TIM_Base_SetConfig+0xe4>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d007      	beq.n	800489e <TIM_Base_SetConfig+0x72>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4a20      	ldr	r2, [pc, #128]	@ (8004914 <TIM_Base_SetConfig+0xe8>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d003      	beq.n	800489e <TIM_Base_SetConfig+0x72>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	4a1f      	ldr	r2, [pc, #124]	@ (8004918 <TIM_Base_SetConfig+0xec>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d108      	bne.n	80048b0 <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	68db      	ldr	r3, [r3, #12]
 80048aa:	68fa      	ldr	r2, [r7, #12]
 80048ac:	4313      	orrs	r3, r2
 80048ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	695b      	ldr	r3, [r3, #20]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	68fa      	ldr	r2, [r7, #12]
 80048c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	689a      	ldr	r2, [r3, #8]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	4a0d      	ldr	r2, [pc, #52]	@ (800490c <TIM_Base_SetConfig+0xe0>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d103      	bne.n	80048e4 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	691a      	ldr	r2, [r3, #16]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2201      	movs	r2, #1
 80048e8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	f003 0301 	and.w	r3, r3, #1
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d005      	beq.n	8004902 <TIM_Base_SetConfig+0xd6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	691b      	ldr	r3, [r3, #16]
 80048fa:	f023 0201 	bic.w	r2, r3, #1
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	611a      	str	r2, [r3, #16]
  }
}
 8004902:	bf00      	nop
 8004904:	3714      	adds	r7, #20
 8004906:	46bd      	mov	sp, r7
 8004908:	bc80      	pop	{r7}
 800490a:	4770      	bx	lr
 800490c:	40012c00 	.word	0x40012c00
 8004910:	40000400 	.word	0x40000400
 8004914:	40000800 	.word	0x40000800
 8004918:	40000c00 	.word	0x40000c00

0800491c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800491c:	b480      	push	{r7}
 800491e:	b087      	sub	sp, #28
 8004920:	af00      	add	r7, sp, #0
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	60b9      	str	r1, [r7, #8]
 8004926:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	6a1b      	ldr	r3, [r3, #32]
 800492c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	6a1b      	ldr	r3, [r3, #32]
 8004932:	f023 0201 	bic.w	r2, r3, #1
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	699b      	ldr	r3, [r3, #24]
 800493e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004946:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	011b      	lsls	r3, r3, #4
 800494c:	693a      	ldr	r2, [r7, #16]
 800494e:	4313      	orrs	r3, r2
 8004950:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	f023 030a 	bic.w	r3, r3, #10
 8004958:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800495a:	697a      	ldr	r2, [r7, #20]
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	4313      	orrs	r3, r2
 8004960:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	693a      	ldr	r2, [r7, #16]
 8004966:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	697a      	ldr	r2, [r7, #20]
 800496c:	621a      	str	r2, [r3, #32]
}
 800496e:	bf00      	nop
 8004970:	371c      	adds	r7, #28
 8004972:	46bd      	mov	sp, r7
 8004974:	bc80      	pop	{r7}
 8004976:	4770      	bx	lr

08004978 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004978:	b480      	push	{r7}
 800497a:	b087      	sub	sp, #28
 800497c:	af00      	add	r7, sp, #0
 800497e:	60f8      	str	r0, [r7, #12]
 8004980:	60b9      	str	r1, [r7, #8]
 8004982:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	6a1b      	ldr	r3, [r3, #32]
 8004988:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	6a1b      	ldr	r3, [r3, #32]
 800498e:	f023 0210 	bic.w	r2, r3, #16
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	699b      	ldr	r3, [r3, #24]
 800499a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80049a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	031b      	lsls	r3, r3, #12
 80049a8:	693a      	ldr	r2, [r7, #16]
 80049aa:	4313      	orrs	r3, r2
 80049ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80049b4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	011b      	lsls	r3, r3, #4
 80049ba:	697a      	ldr	r2, [r7, #20]
 80049bc:	4313      	orrs	r3, r2
 80049be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	693a      	ldr	r2, [r7, #16]
 80049c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	697a      	ldr	r2, [r7, #20]
 80049ca:	621a      	str	r2, [r3, #32]
}
 80049cc:	bf00      	nop
 80049ce:	371c      	adds	r7, #28
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bc80      	pop	{r7}
 80049d4:	4770      	bx	lr

080049d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80049d6:	b480      	push	{r7}
 80049d8:	b085      	sub	sp, #20
 80049da:	af00      	add	r7, sp, #0
 80049dc:	6078      	str	r0, [r7, #4]
 80049de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80049ee:	683a      	ldr	r2, [r7, #0]
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	f043 0307 	orr.w	r3, r3, #7
 80049f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	68fa      	ldr	r2, [r7, #12]
 80049fe:	609a      	str	r2, [r3, #8]
}
 8004a00:	bf00      	nop
 8004a02:	3714      	adds	r7, #20
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bc80      	pop	{r7}
 8004a08:	4770      	bx	lr

08004a0a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a0a:	b480      	push	{r7}
 8004a0c:	b087      	sub	sp, #28
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	60f8      	str	r0, [r7, #12]
 8004a12:	60b9      	str	r1, [r7, #8]
 8004a14:	607a      	str	r2, [r7, #4]
 8004a16:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004a24:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	021a      	lsls	r2, r3, #8
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	431a      	orrs	r2, r3
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	4313      	orrs	r3, r2
 8004a32:	697a      	ldr	r2, [r7, #20]
 8004a34:	4313      	orrs	r3, r2
 8004a36:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	697a      	ldr	r2, [r7, #20]
 8004a3c:	609a      	str	r2, [r3, #8]
}
 8004a3e:	bf00      	nop
 8004a40:	371c      	adds	r7, #28
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bc80      	pop	{r7}
 8004a46:	4770      	bx	lr

08004a48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b085      	sub	sp, #20
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d101      	bne.n	8004a60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a5c:	2302      	movs	r3, #2
 8004a5e:	e04b      	b.n	8004af8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2202      	movs	r2, #2
 8004a6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	68fa      	ldr	r2, [r7, #12]
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	68fa      	ldr	r2, [r7, #12]
 8004a98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a19      	ldr	r2, [pc, #100]	@ (8004b04 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d013      	beq.n	8004acc <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004aac:	d00e      	beq.n	8004acc <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a15      	ldr	r2, [pc, #84]	@ (8004b08 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d009      	beq.n	8004acc <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a13      	ldr	r2, [pc, #76]	@ (8004b0c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d004      	beq.n	8004acc <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a12      	ldr	r2, [pc, #72]	@ (8004b10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d10c      	bne.n	8004ae6 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ad2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	68ba      	ldr	r2, [r7, #8]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	68ba      	ldr	r2, [r7, #8]
 8004ae4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2201      	movs	r2, #1
 8004aea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004af6:	2300      	movs	r3, #0
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3714      	adds	r7, #20
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bc80      	pop	{r7}
 8004b00:	4770      	bx	lr
 8004b02:	bf00      	nop
 8004b04:	40012c00 	.word	0x40012c00
 8004b08:	40000400 	.word	0x40000400
 8004b0c:	40000800 	.word	0x40000800
 8004b10:	40000c00 	.word	0x40000c00

08004b14 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004b14:	b084      	sub	sp, #16
 8004b16:	b580      	push	{r7, lr}
 8004b18:	b084      	sub	sp, #16
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	6078      	str	r0, [r7, #4]
 8004b1e:	f107 001c 	add.w	r0, r7, #28
 8004b22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	68db      	ldr	r3, [r3, #12]
 8004b2a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f001 f9de 	bl	8005ef4 <USB_CoreReset>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	73fb      	strb	r3, [r7, #15]

  /* Activate the USB Transceiver */
  USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b40:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	639a      	str	r2, [r3, #56]	@ 0x38

  return ret;
 8004b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3710      	adds	r7, #16
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b54:	b004      	add	sp, #16
 8004b56:	4770      	bx	lr

08004b58 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b087      	sub	sp, #28
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	60b9      	str	r1, [r7, #8]
 8004b62:	4613      	mov	r3, r2
 8004b64:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004b66:	79fb      	ldrb	r3, [r7, #7]
 8004b68:	2b02      	cmp	r3, #2
 8004b6a:	d165      	bne.n	8004c38 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	4a3e      	ldr	r2, [pc, #248]	@ (8004c68 <USB_SetTurnaroundTime+0x110>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d906      	bls.n	8004b82 <USB_SetTurnaroundTime+0x2a>
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	4a3d      	ldr	r2, [pc, #244]	@ (8004c6c <USB_SetTurnaroundTime+0x114>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d202      	bcs.n	8004b82 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004b7c:	230f      	movs	r3, #15
 8004b7e:	617b      	str	r3, [r7, #20]
 8004b80:	e05c      	b.n	8004c3c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	4a39      	ldr	r2, [pc, #228]	@ (8004c6c <USB_SetTurnaroundTime+0x114>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d306      	bcc.n	8004b98 <USB_SetTurnaroundTime+0x40>
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	4a38      	ldr	r2, [pc, #224]	@ (8004c70 <USB_SetTurnaroundTime+0x118>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d202      	bcs.n	8004b98 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004b92:	230e      	movs	r3, #14
 8004b94:	617b      	str	r3, [r7, #20]
 8004b96:	e051      	b.n	8004c3c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	4a35      	ldr	r2, [pc, #212]	@ (8004c70 <USB_SetTurnaroundTime+0x118>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d306      	bcc.n	8004bae <USB_SetTurnaroundTime+0x56>
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	4a34      	ldr	r2, [pc, #208]	@ (8004c74 <USB_SetTurnaroundTime+0x11c>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d202      	bcs.n	8004bae <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004ba8:	230d      	movs	r3, #13
 8004baa:	617b      	str	r3, [r7, #20]
 8004bac:	e046      	b.n	8004c3c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	4a30      	ldr	r2, [pc, #192]	@ (8004c74 <USB_SetTurnaroundTime+0x11c>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d306      	bcc.n	8004bc4 <USB_SetTurnaroundTime+0x6c>
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	4a2f      	ldr	r2, [pc, #188]	@ (8004c78 <USB_SetTurnaroundTime+0x120>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d802      	bhi.n	8004bc4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004bbe:	230c      	movs	r3, #12
 8004bc0:	617b      	str	r3, [r7, #20]
 8004bc2:	e03b      	b.n	8004c3c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	4a2c      	ldr	r2, [pc, #176]	@ (8004c78 <USB_SetTurnaroundTime+0x120>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d906      	bls.n	8004bda <USB_SetTurnaroundTime+0x82>
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	4a2b      	ldr	r2, [pc, #172]	@ (8004c7c <USB_SetTurnaroundTime+0x124>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d802      	bhi.n	8004bda <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004bd4:	230b      	movs	r3, #11
 8004bd6:	617b      	str	r3, [r7, #20]
 8004bd8:	e030      	b.n	8004c3c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	4a27      	ldr	r2, [pc, #156]	@ (8004c7c <USB_SetTurnaroundTime+0x124>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d906      	bls.n	8004bf0 <USB_SetTurnaroundTime+0x98>
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	4a26      	ldr	r2, [pc, #152]	@ (8004c80 <USB_SetTurnaroundTime+0x128>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d802      	bhi.n	8004bf0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004bea:	230a      	movs	r3, #10
 8004bec:	617b      	str	r3, [r7, #20]
 8004bee:	e025      	b.n	8004c3c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	4a23      	ldr	r2, [pc, #140]	@ (8004c80 <USB_SetTurnaroundTime+0x128>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d906      	bls.n	8004c06 <USB_SetTurnaroundTime+0xae>
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	4a22      	ldr	r2, [pc, #136]	@ (8004c84 <USB_SetTurnaroundTime+0x12c>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d202      	bcs.n	8004c06 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004c00:	2309      	movs	r3, #9
 8004c02:	617b      	str	r3, [r7, #20]
 8004c04:	e01a      	b.n	8004c3c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	4a1e      	ldr	r2, [pc, #120]	@ (8004c84 <USB_SetTurnaroundTime+0x12c>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d306      	bcc.n	8004c1c <USB_SetTurnaroundTime+0xc4>
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	4a1d      	ldr	r2, [pc, #116]	@ (8004c88 <USB_SetTurnaroundTime+0x130>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d802      	bhi.n	8004c1c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004c16:	2308      	movs	r3, #8
 8004c18:	617b      	str	r3, [r7, #20]
 8004c1a:	e00f      	b.n	8004c3c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	4a1a      	ldr	r2, [pc, #104]	@ (8004c88 <USB_SetTurnaroundTime+0x130>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d906      	bls.n	8004c32 <USB_SetTurnaroundTime+0xda>
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	4a19      	ldr	r2, [pc, #100]	@ (8004c8c <USB_SetTurnaroundTime+0x134>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d202      	bcs.n	8004c32 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004c2c:	2307      	movs	r3, #7
 8004c2e:	617b      	str	r3, [r7, #20]
 8004c30:	e004      	b.n	8004c3c <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004c32:	2306      	movs	r3, #6
 8004c34:	617b      	str	r3, [r7, #20]
 8004c36:	e001      	b.n	8004c3c <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004c38:	2309      	movs	r3, #9
 8004c3a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	68da      	ldr	r2, [r3, #12]
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	029b      	lsls	r3, r3, #10
 8004c50:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8004c54:	431a      	orrs	r2, r3
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004c5a:	2300      	movs	r3, #0
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	371c      	adds	r7, #28
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bc80      	pop	{r7}
 8004c64:	4770      	bx	lr
 8004c66:	bf00      	nop
 8004c68:	00d8acbf 	.word	0x00d8acbf
 8004c6c:	00e4e1c0 	.word	0x00e4e1c0
 8004c70:	00f42400 	.word	0x00f42400
 8004c74:	01067380 	.word	0x01067380
 8004c78:	011a499f 	.word	0x011a499f
 8004c7c:	01312cff 	.word	0x01312cff
 8004c80:	014ca43f 	.word	0x014ca43f
 8004c84:	016e3600 	.word	0x016e3600
 8004c88:	01a6ab1f 	.word	0x01a6ab1f
 8004c8c:	01e84800 	.word	0x01e84800

08004c90 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b083      	sub	sp, #12
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	f043 0201 	orr.w	r2, r3, #1
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004ca4:	2300      	movs	r3, #0
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	370c      	adds	r7, #12
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bc80      	pop	{r7}
 8004cae:	4770      	bx	lr

08004cb0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b083      	sub	sp, #12
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	f023 0201 	bic.w	r2, r3, #1
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004cc4:	2300      	movs	r3, #0
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	370c      	adds	r7, #12
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bc80      	pop	{r7}
 8004cce:	4770      	bx	lr

08004cd0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b084      	sub	sp, #16
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	460b      	mov	r3, r1
 8004cda:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004cec:	78fb      	ldrb	r3, [r7, #3]
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d115      	bne.n	8004d1e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004cfe:	200a      	movs	r0, #10
 8004d00:	f7fc fd4a 	bl	8001798 <HAL_Delay>
      ms += 10U;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	330a      	adds	r3, #10
 8004d08:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f001 f87a 	bl	8005e04 <USB_GetMode>
 8004d10:	4603      	mov	r3, r0
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d01e      	beq.n	8004d54 <USB_SetCurrentMode+0x84>
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2bc7      	cmp	r3, #199	@ 0xc7
 8004d1a:	d9f0      	bls.n	8004cfe <USB_SetCurrentMode+0x2e>
 8004d1c:	e01a      	b.n	8004d54 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004d1e:	78fb      	ldrb	r3, [r7, #3]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d115      	bne.n	8004d50 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004d30:	200a      	movs	r0, #10
 8004d32:	f7fc fd31 	bl	8001798 <HAL_Delay>
      ms += 10U;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	330a      	adds	r3, #10
 8004d3a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	f001 f861 	bl	8005e04 <USB_GetMode>
 8004d42:	4603      	mov	r3, r0
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d005      	beq.n	8004d54 <USB_SetCurrentMode+0x84>
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2bc7      	cmp	r3, #199	@ 0xc7
 8004d4c:	d9f0      	bls.n	8004d30 <USB_SetCurrentMode+0x60>
 8004d4e:	e001      	b.n	8004d54 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	e005      	b.n	8004d60 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2bc8      	cmp	r3, #200	@ 0xc8
 8004d58:	d101      	bne.n	8004d5e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e000      	b.n	8004d60 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004d5e:	2300      	movs	r3, #0
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3710      	adds	r7, #16
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}

08004d68 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004d68:	b084      	sub	sp, #16
 8004d6a:	b580      	push	{r7, lr}
 8004d6c:	b086      	sub	sp, #24
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	6078      	str	r0, [r7, #4]
 8004d72:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004d76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004d82:	2300      	movs	r3, #0
 8004d84:	613b      	str	r3, [r7, #16]
 8004d86:	e009      	b.n	8004d9c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	3340      	adds	r3, #64	@ 0x40
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	4413      	add	r3, r2
 8004d92:	2200      	movs	r2, #0
 8004d94:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	3301      	adds	r3, #1
 8004d9a:	613b      	str	r3, [r7, #16]
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	2b0e      	cmp	r3, #14
 8004da0:	d9f2      	bls.n	8004d88 <USB_DevInit+0x20>
  }

  /* Enable HW VBUS sensing */
  USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004da6:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004db4:	461a      	mov	r2, r3
 8004db6:	2300      	movs	r3, #0
 8004db8:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004dba:	2103      	movs	r1, #3
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f000 f959 	bl	8005074 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004dc2:	2110      	movs	r1, #16
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f000 f8f7 	bl	8004fb8 <USB_FlushTxFifo>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d001      	beq.n	8004dd4 <USB_DevInit+0x6c>
  {
    ret = HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f000 f920 	bl	800501a <USB_FlushRxFifo>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d001      	beq.n	8004de4 <USB_DevInit+0x7c>
  {
    ret = HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004dea:	461a      	mov	r2, r3
 8004dec:	2300      	movs	r3, #0
 8004dee:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004df6:	461a      	mov	r2, r3
 8004df8:	2300      	movs	r3, #0
 8004dfa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e02:	461a      	mov	r2, r3
 8004e04:	2300      	movs	r3, #0
 8004e06:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e08:	2300      	movs	r3, #0
 8004e0a:	613b      	str	r3, [r7, #16]
 8004e0c:	e043      	b.n	8004e96 <USB_DevInit+0x12e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	015a      	lsls	r2, r3, #5
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	4413      	add	r3, r2
 8004e16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004e20:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004e24:	d118      	bne.n	8004e58 <USB_DevInit+0xf0>
    {
      if (i == 0U)
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d10a      	bne.n	8004e42 <USB_DevInit+0xda>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	015a      	lsls	r2, r3, #5
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	4413      	add	r3, r2
 8004e34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e38:	461a      	mov	r2, r3
 8004e3a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004e3e:	6013      	str	r3, [r2, #0]
 8004e40:	e013      	b.n	8004e6a <USB_DevInit+0x102>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	015a      	lsls	r2, r3, #5
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	4413      	add	r3, r2
 8004e4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e4e:	461a      	mov	r2, r3
 8004e50:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004e54:	6013      	str	r3, [r2, #0]
 8004e56:	e008      	b.n	8004e6a <USB_DevInit+0x102>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	015a      	lsls	r2, r3, #5
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	4413      	add	r3, r2
 8004e60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e64:	461a      	mov	r2, r3
 8004e66:	2300      	movs	r3, #0
 8004e68:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	015a      	lsls	r2, r3, #5
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	4413      	add	r3, r2
 8004e72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e76:	461a      	mov	r2, r3
 8004e78:	2300      	movs	r3, #0
 8004e7a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	015a      	lsls	r2, r3, #5
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	4413      	add	r3, r2
 8004e84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e88:	461a      	mov	r2, r3
 8004e8a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004e8e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	3301      	adds	r3, #1
 8004e94:	613b      	str	r3, [r7, #16]
 8004e96:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d3b5      	bcc.n	8004e0e <USB_DevInit+0xa6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	613b      	str	r3, [r7, #16]
 8004ea6:	e043      	b.n	8004f30 <USB_DevInit+0x1c8>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	015a      	lsls	r2, r3, #5
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	4413      	add	r3, r2
 8004eb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004eba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004ebe:	d118      	bne.n	8004ef2 <USB_DevInit+0x18a>
    {
      if (i == 0U)
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d10a      	bne.n	8004edc <USB_DevInit+0x174>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	015a      	lsls	r2, r3, #5
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	4413      	add	r3, r2
 8004ece:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004ed8:	6013      	str	r3, [r2, #0]
 8004eda:	e013      	b.n	8004f04 <USB_DevInit+0x19c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	015a      	lsls	r2, r3, #5
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	4413      	add	r3, r2
 8004ee4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ee8:	461a      	mov	r2, r3
 8004eea:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004eee:	6013      	str	r3, [r2, #0]
 8004ef0:	e008      	b.n	8004f04 <USB_DevInit+0x19c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	015a      	lsls	r2, r3, #5
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	4413      	add	r3, r2
 8004efa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004efe:	461a      	mov	r2, r3
 8004f00:	2300      	movs	r3, #0
 8004f02:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	015a      	lsls	r2, r3, #5
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	4413      	add	r3, r2
 8004f0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f10:	461a      	mov	r2, r3
 8004f12:	2300      	movs	r3, #0
 8004f14:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	015a      	lsls	r2, r3, #5
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	4413      	add	r3, r2
 8004f1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f22:	461a      	mov	r2, r3
 8004f24:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004f28:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	3301      	adds	r3, #1
 8004f2e:	613b      	str	r3, [r7, #16]
 8004f30:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004f34:	461a      	mov	r2, r3
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d3b5      	bcc.n	8004ea8 <USB_DevInit+0x140>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f42:	691b      	ldr	r3, [r3, #16]
 8004f44:	68fa      	ldr	r2, [r7, #12]
 8004f46:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004f4a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f4e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2200      	movs	r2, #0
 8004f54:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004f5c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	699b      	ldr	r3, [r3, #24]
 8004f62:	f043 0210 	orr.w	r2, r3, #16
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	699a      	ldr	r2, [r3, #24]
 8004f6e:	4b11      	ldr	r3, [pc, #68]	@ (8004fb4 <USB_DevInit+0x24c>)
 8004f70:	4313      	orrs	r3, r2
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004f76:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d005      	beq.n	8004f8a <USB_DevInit+0x222>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	699b      	ldr	r3, [r3, #24]
 8004f82:	f043 0208 	orr.w	r2, r3, #8
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004f8a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	d107      	bne.n	8004fa2 <USB_DevInit+0x23a>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	699b      	ldr	r3, [r3, #24]
 8004f96:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004f9a:	f043 0304 	orr.w	r3, r3, #4
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004fa2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3718      	adds	r7, #24
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004fae:	b004      	add	sp, #16
 8004fb0:	4770      	bx	lr
 8004fb2:	bf00      	nop
 8004fb4:	803c3800 	.word	0x803c3800

08004fb8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b085      	sub	sp, #20
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	3301      	adds	r3, #1
 8004fca:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004fd2:	d901      	bls.n	8004fd8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004fd4:	2303      	movs	r3, #3
 8004fd6:	e01b      	b.n	8005010 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	691b      	ldr	r3, [r3, #16]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	daf2      	bge.n	8004fc6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	019b      	lsls	r3, r3, #6
 8004fe8:	f043 0220 	orr.w	r2, r3, #32
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	3301      	adds	r3, #1
 8004ff4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004ffc:	d901      	bls.n	8005002 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004ffe:	2303      	movs	r3, #3
 8005000:	e006      	b.n	8005010 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	691b      	ldr	r3, [r3, #16]
 8005006:	f003 0320 	and.w	r3, r3, #32
 800500a:	2b20      	cmp	r3, #32
 800500c:	d0f0      	beq.n	8004ff0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800500e:	2300      	movs	r3, #0
}
 8005010:	4618      	mov	r0, r3
 8005012:	3714      	adds	r7, #20
 8005014:	46bd      	mov	sp, r7
 8005016:	bc80      	pop	{r7}
 8005018:	4770      	bx	lr

0800501a <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800501a:	b480      	push	{r7}
 800501c:	b085      	sub	sp, #20
 800501e:	af00      	add	r7, sp, #0
 8005020:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005022:	2300      	movs	r3, #0
 8005024:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	3301      	adds	r3, #1
 800502a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005032:	d901      	bls.n	8005038 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005034:	2303      	movs	r3, #3
 8005036:	e018      	b.n	800506a <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	691b      	ldr	r3, [r3, #16]
 800503c:	2b00      	cmp	r3, #0
 800503e:	daf2      	bge.n	8005026 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005040:	2300      	movs	r3, #0
 8005042:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2210      	movs	r2, #16
 8005048:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	3301      	adds	r3, #1
 800504e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005056:	d901      	bls.n	800505c <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005058:	2303      	movs	r3, #3
 800505a:	e006      	b.n	800506a <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	691b      	ldr	r3, [r3, #16]
 8005060:	f003 0310 	and.w	r3, r3, #16
 8005064:	2b10      	cmp	r3, #16
 8005066:	d0f0      	beq.n	800504a <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005068:	2300      	movs	r3, #0
}
 800506a:	4618      	mov	r0, r3
 800506c:	3714      	adds	r7, #20
 800506e:	46bd      	mov	sp, r7
 8005070:	bc80      	pop	{r7}
 8005072:	4770      	bx	lr

08005074 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005074:	b480      	push	{r7}
 8005076:	b085      	sub	sp, #20
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	460b      	mov	r3, r1
 800507e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	78fb      	ldrb	r3, [r7, #3]
 800508e:	68f9      	ldr	r1, [r7, #12]
 8005090:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005094:	4313      	orrs	r3, r2
 8005096:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005098:	2300      	movs	r3, #0
}
 800509a:	4618      	mov	r0, r3
 800509c:	3714      	adds	r7, #20
 800509e:	46bd      	mov	sp, r7
 80050a0:	bc80      	pop	{r7}
 80050a2:	4770      	bx	lr

080050a4 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b087      	sub	sp, #28
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	f003 0306 	and.w	r3, r3, #6
 80050bc:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2b02      	cmp	r3, #2
 80050c2:	d002      	beq.n	80050ca <USB_GetDevSpeed+0x26>
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2b06      	cmp	r3, #6
 80050c8:	d102      	bne.n	80050d0 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80050ca:	2302      	movs	r3, #2
 80050cc:	75fb      	strb	r3, [r7, #23]
 80050ce:	e001      	b.n	80050d4 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 80050d0:	230f      	movs	r3, #15
 80050d2:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80050d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	371c      	adds	r7, #28
 80050da:	46bd      	mov	sp, r7
 80050dc:	bc80      	pop	{r7}
 80050de:	4770      	bx	lr

080050e0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b085      	sub	sp, #20
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	781b      	ldrb	r3, [r3, #0]
 80050f2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	785b      	ldrb	r3, [r3, #1]
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d13a      	bne.n	8005172 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005102:	69da      	ldr	r2, [r3, #28]
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	781b      	ldrb	r3, [r3, #0]
 8005108:	f003 030f 	and.w	r3, r3, #15
 800510c:	2101      	movs	r1, #1
 800510e:	fa01 f303 	lsl.w	r3, r1, r3
 8005112:	b29b      	uxth	r3, r3
 8005114:	68f9      	ldr	r1, [r7, #12]
 8005116:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800511a:	4313      	orrs	r3, r2
 800511c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	015a      	lsls	r2, r3, #5
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	4413      	add	r3, r2
 8005126:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005130:	2b00      	cmp	r3, #0
 8005132:	d155      	bne.n	80051e0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	015a      	lsls	r2, r3, #5
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	4413      	add	r3, r2
 800513c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	791b      	ldrb	r3, [r3, #4]
 800514e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005150:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	059b      	lsls	r3, r3, #22
 8005156:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005158:	4313      	orrs	r3, r2
 800515a:	68ba      	ldr	r2, [r7, #8]
 800515c:	0151      	lsls	r1, r2, #5
 800515e:	68fa      	ldr	r2, [r7, #12]
 8005160:	440a      	add	r2, r1
 8005162:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005166:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800516a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800516e:	6013      	str	r3, [r2, #0]
 8005170:	e036      	b.n	80051e0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005178:	69da      	ldr	r2, [r3, #28]
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	781b      	ldrb	r3, [r3, #0]
 800517e:	f003 030f 	and.w	r3, r3, #15
 8005182:	2101      	movs	r1, #1
 8005184:	fa01 f303 	lsl.w	r3, r1, r3
 8005188:	041b      	lsls	r3, r3, #16
 800518a:	68f9      	ldr	r1, [r7, #12]
 800518c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005190:	4313      	orrs	r3, r2
 8005192:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	015a      	lsls	r2, r3, #5
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	4413      	add	r3, r2
 800519c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d11a      	bne.n	80051e0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	015a      	lsls	r2, r3, #5
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	4413      	add	r3, r2
 80051b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	791b      	ldrb	r3, [r3, #4]
 80051c4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80051c6:	430b      	orrs	r3, r1
 80051c8:	4313      	orrs	r3, r2
 80051ca:	68ba      	ldr	r2, [r7, #8]
 80051cc:	0151      	lsls	r1, r2, #5
 80051ce:	68fa      	ldr	r2, [r7, #12]
 80051d0:	440a      	add	r2, r1
 80051d2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80051d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80051de:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80051e0:	2300      	movs	r3, #0
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3714      	adds	r7, #20
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bc80      	pop	{r7}
 80051ea:	4770      	bx	lr

080051ec <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b085      	sub	sp, #20
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	785b      	ldrb	r3, [r3, #1]
 8005204:	2b01      	cmp	r3, #1
 8005206:	d161      	bne.n	80052cc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	015a      	lsls	r2, r3, #5
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	4413      	add	r3, r2
 8005210:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800521a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800521e:	d11f      	bne.n	8005260 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	015a      	lsls	r2, r3, #5
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	4413      	add	r3, r2
 8005228:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	68ba      	ldr	r2, [r7, #8]
 8005230:	0151      	lsls	r1, r2, #5
 8005232:	68fa      	ldr	r2, [r7, #12]
 8005234:	440a      	add	r2, r1
 8005236:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800523a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800523e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	015a      	lsls	r2, r3, #5
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	4413      	add	r3, r2
 8005248:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	68ba      	ldr	r2, [r7, #8]
 8005250:	0151      	lsls	r1, r2, #5
 8005252:	68fa      	ldr	r2, [r7, #12]
 8005254:	440a      	add	r2, r1
 8005256:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800525a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800525e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005266:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	781b      	ldrb	r3, [r3, #0]
 800526c:	f003 030f 	and.w	r3, r3, #15
 8005270:	2101      	movs	r1, #1
 8005272:	fa01 f303 	lsl.w	r3, r1, r3
 8005276:	b29b      	uxth	r3, r3
 8005278:	43db      	mvns	r3, r3
 800527a:	68f9      	ldr	r1, [r7, #12]
 800527c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005280:	4013      	ands	r3, r2
 8005282:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800528a:	69da      	ldr	r2, [r3, #28]
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	781b      	ldrb	r3, [r3, #0]
 8005290:	f003 030f 	and.w	r3, r3, #15
 8005294:	2101      	movs	r1, #1
 8005296:	fa01 f303 	lsl.w	r3, r1, r3
 800529a:	b29b      	uxth	r3, r3
 800529c:	43db      	mvns	r3, r3
 800529e:	68f9      	ldr	r1, [r7, #12]
 80052a0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80052a4:	4013      	ands	r3, r2
 80052a6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	015a      	lsls	r2, r3, #5
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	4413      	add	r3, r2
 80052b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	0159      	lsls	r1, r3, #5
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	440b      	add	r3, r1
 80052be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052c2:	4619      	mov	r1, r3
 80052c4:	4b35      	ldr	r3, [pc, #212]	@ (800539c <USB_DeactivateEndpoint+0x1b0>)
 80052c6:	4013      	ands	r3, r2
 80052c8:	600b      	str	r3, [r1, #0]
 80052ca:	e060      	b.n	800538e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	015a      	lsls	r2, r3, #5
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	4413      	add	r3, r2
 80052d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80052de:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80052e2:	d11f      	bne.n	8005324 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	015a      	lsls	r2, r3, #5
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	4413      	add	r3, r2
 80052ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	68ba      	ldr	r2, [r7, #8]
 80052f4:	0151      	lsls	r1, r2, #5
 80052f6:	68fa      	ldr	r2, [r7, #12]
 80052f8:	440a      	add	r2, r1
 80052fa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80052fe:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005302:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	015a      	lsls	r2, r3, #5
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	4413      	add	r3, r2
 800530c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	68ba      	ldr	r2, [r7, #8]
 8005314:	0151      	lsls	r1, r2, #5
 8005316:	68fa      	ldr	r2, [r7, #12]
 8005318:	440a      	add	r2, r1
 800531a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800531e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005322:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800532a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	781b      	ldrb	r3, [r3, #0]
 8005330:	f003 030f 	and.w	r3, r3, #15
 8005334:	2101      	movs	r1, #1
 8005336:	fa01 f303 	lsl.w	r3, r1, r3
 800533a:	041b      	lsls	r3, r3, #16
 800533c:	43db      	mvns	r3, r3
 800533e:	68f9      	ldr	r1, [r7, #12]
 8005340:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005344:	4013      	ands	r3, r2
 8005346:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800534e:	69da      	ldr	r2, [r3, #28]
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	781b      	ldrb	r3, [r3, #0]
 8005354:	f003 030f 	and.w	r3, r3, #15
 8005358:	2101      	movs	r1, #1
 800535a:	fa01 f303 	lsl.w	r3, r1, r3
 800535e:	041b      	lsls	r3, r3, #16
 8005360:	43db      	mvns	r3, r3
 8005362:	68f9      	ldr	r1, [r7, #12]
 8005364:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005368:	4013      	ands	r3, r2
 800536a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	015a      	lsls	r2, r3, #5
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	4413      	add	r3, r2
 8005374:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	0159      	lsls	r1, r3, #5
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	440b      	add	r3, r1
 8005382:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005386:	4619      	mov	r1, r3
 8005388:	4b05      	ldr	r3, [pc, #20]	@ (80053a0 <USB_DeactivateEndpoint+0x1b4>)
 800538a:	4013      	ands	r3, r2
 800538c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800538e:	2300      	movs	r3, #0
}
 8005390:	4618      	mov	r0, r3
 8005392:	3714      	adds	r7, #20
 8005394:	46bd      	mov	sp, r7
 8005396:	bc80      	pop	{r7}
 8005398:	4770      	bx	lr
 800539a:	bf00      	nop
 800539c:	ec337800 	.word	0xec337800
 80053a0:	eff37800 	.word	0xeff37800

080053a4 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b086      	sub	sp, #24
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
 80053ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	781b      	ldrb	r3, [r3, #0]
 80053b6:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	785b      	ldrb	r3, [r3, #1]
 80053bc:	2b01      	cmp	r3, #1
 80053be:	f040 8128 	bne.w	8005612 <USB_EPStartXfer+0x26e>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	691b      	ldr	r3, [r3, #16]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d132      	bne.n	8005430 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	015a      	lsls	r2, r3, #5
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	4413      	add	r3, r2
 80053d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053d6:	691b      	ldr	r3, [r3, #16]
 80053d8:	693a      	ldr	r2, [r7, #16]
 80053da:	0151      	lsls	r1, r2, #5
 80053dc:	697a      	ldr	r2, [r7, #20]
 80053de:	440a      	add	r2, r1
 80053e0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80053e4:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80053e8:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80053ec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	015a      	lsls	r2, r3, #5
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	4413      	add	r3, r2
 80053f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053fa:	691b      	ldr	r3, [r3, #16]
 80053fc:	693a      	ldr	r2, [r7, #16]
 80053fe:	0151      	lsls	r1, r2, #5
 8005400:	697a      	ldr	r2, [r7, #20]
 8005402:	440a      	add	r2, r1
 8005404:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005408:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800540c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	015a      	lsls	r2, r3, #5
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	4413      	add	r3, r2
 8005416:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800541a:	691b      	ldr	r3, [r3, #16]
 800541c:	693a      	ldr	r2, [r7, #16]
 800541e:	0151      	lsls	r1, r2, #5
 8005420:	697a      	ldr	r2, [r7, #20]
 8005422:	440a      	add	r2, r1
 8005424:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005428:	0cdb      	lsrs	r3, r3, #19
 800542a:	04db      	lsls	r3, r3, #19
 800542c:	6113      	str	r3, [r2, #16]
 800542e:	e092      	b.n	8005556 <USB_EPStartXfer+0x1b2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	015a      	lsls	r2, r3, #5
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	4413      	add	r3, r2
 8005438:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800543c:	691b      	ldr	r3, [r3, #16]
 800543e:	693a      	ldr	r2, [r7, #16]
 8005440:	0151      	lsls	r1, r2, #5
 8005442:	697a      	ldr	r2, [r7, #20]
 8005444:	440a      	add	r2, r1
 8005446:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800544a:	0cdb      	lsrs	r3, r3, #19
 800544c:	04db      	lsls	r3, r3, #19
 800544e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	015a      	lsls	r2, r3, #5
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	4413      	add	r3, r2
 8005458:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800545c:	691b      	ldr	r3, [r3, #16]
 800545e:	693a      	ldr	r2, [r7, #16]
 8005460:	0151      	lsls	r1, r2, #5
 8005462:	697a      	ldr	r2, [r7, #20]
 8005464:	440a      	add	r2, r1
 8005466:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800546a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800546e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005472:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d11a      	bne.n	80054b0 <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	691a      	ldr	r2, [r3, #16]
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	429a      	cmp	r2, r3
 8005484:	d903      	bls.n	800548e <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	689a      	ldr	r2, [r3, #8]
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	015a      	lsls	r2, r3, #5
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	4413      	add	r3, r2
 8005496:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800549a:	691b      	ldr	r3, [r3, #16]
 800549c:	693a      	ldr	r2, [r7, #16]
 800549e:	0151      	lsls	r1, r2, #5
 80054a0:	697a      	ldr	r2, [r7, #20]
 80054a2:	440a      	add	r2, r1
 80054a4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80054a8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80054ac:	6113      	str	r3, [r2, #16]
 80054ae:	e01b      	b.n	80054e8 <USB_EPStartXfer+0x144>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	015a      	lsls	r2, r3, #5
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	4413      	add	r3, r2
 80054b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054bc:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	6919      	ldr	r1, [r3, #16]
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	440b      	add	r3, r1
 80054c8:	1e59      	subs	r1, r3, #1
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80054d2:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80054d4:	4b8d      	ldr	r3, [pc, #564]	@ (800570c <USB_EPStartXfer+0x368>)
 80054d6:	400b      	ands	r3, r1
 80054d8:	6939      	ldr	r1, [r7, #16]
 80054da:	0148      	lsls	r0, r1, #5
 80054dc:	6979      	ldr	r1, [r7, #20]
 80054de:	4401      	add	r1, r0
 80054e0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80054e4:	4313      	orrs	r3, r2
 80054e6:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	015a      	lsls	r2, r3, #5
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	4413      	add	r3, r2
 80054f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054f4:	691a      	ldr	r2, [r3, #16]
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	691b      	ldr	r3, [r3, #16]
 80054fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054fe:	6939      	ldr	r1, [r7, #16]
 8005500:	0148      	lsls	r0, r1, #5
 8005502:	6979      	ldr	r1, [r7, #20]
 8005504:	4401      	add	r1, r0
 8005506:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800550a:	4313      	orrs	r3, r2
 800550c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	791b      	ldrb	r3, [r3, #4]
 8005512:	2b01      	cmp	r3, #1
 8005514:	d11f      	bne.n	8005556 <USB_EPStartXfer+0x1b2>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	015a      	lsls	r2, r3, #5
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	4413      	add	r3, r2
 800551e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005522:	691b      	ldr	r3, [r3, #16]
 8005524:	693a      	ldr	r2, [r7, #16]
 8005526:	0151      	lsls	r1, r2, #5
 8005528:	697a      	ldr	r2, [r7, #20]
 800552a:	440a      	add	r2, r1
 800552c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005530:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8005534:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	015a      	lsls	r2, r3, #5
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	4413      	add	r3, r2
 800553e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005542:	691b      	ldr	r3, [r3, #16]
 8005544:	693a      	ldr	r2, [r7, #16]
 8005546:	0151      	lsls	r1, r2, #5
 8005548:	697a      	ldr	r2, [r7, #20]
 800554a:	440a      	add	r2, r1
 800554c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005550:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005554:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	015a      	lsls	r2, r3, #5
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	4413      	add	r3, r2
 800555e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	693a      	ldr	r2, [r7, #16]
 8005566:	0151      	lsls	r1, r2, #5
 8005568:	697a      	ldr	r2, [r7, #20]
 800556a:	440a      	add	r2, r1
 800556c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005570:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005574:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	791b      	ldrb	r3, [r3, #4]
 800557a:	2b01      	cmp	r3, #1
 800557c:	d015      	beq.n	80055aa <USB_EPStartXfer+0x206>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	691b      	ldr	r3, [r3, #16]
 8005582:	2b00      	cmp	r3, #0
 8005584:	f000 8139 	beq.w	80057fa <USB_EPStartXfer+0x456>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800558e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	781b      	ldrb	r3, [r3, #0]
 8005594:	f003 030f 	and.w	r3, r3, #15
 8005598:	2101      	movs	r1, #1
 800559a:	fa01 f303 	lsl.w	r3, r1, r3
 800559e:	6979      	ldr	r1, [r7, #20]
 80055a0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80055a4:	4313      	orrs	r3, r2
 80055a6:	634b      	str	r3, [r1, #52]	@ 0x34
 80055a8:	e127      	b.n	80057fa <USB_EPStartXfer+0x456>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d110      	bne.n	80055dc <USB_EPStartXfer+0x238>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	015a      	lsls	r2, r3, #5
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	4413      	add	r3, r2
 80055c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	693a      	ldr	r2, [r7, #16]
 80055ca:	0151      	lsls	r1, r2, #5
 80055cc:	697a      	ldr	r2, [r7, #20]
 80055ce:	440a      	add	r2, r1
 80055d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80055d4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80055d8:	6013      	str	r3, [r2, #0]
 80055da:	e00f      	b.n	80055fc <USB_EPStartXfer+0x258>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	015a      	lsls	r2, r3, #5
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	4413      	add	r3, r2
 80055e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	693a      	ldr	r2, [r7, #16]
 80055ec:	0151      	lsls	r1, r2, #5
 80055ee:	697a      	ldr	r2, [r7, #20]
 80055f0:	440a      	add	r2, r1
 80055f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80055f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80055fa:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	68d9      	ldr	r1, [r3, #12]
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	781a      	ldrb	r2, [r3, #0]
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	691b      	ldr	r3, [r3, #16]
 8005608:	b29b      	uxth	r3, r3
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f000 f9a5 	bl	800595a <USB_WritePacket>
 8005610:	e0f3      	b.n	80057fa <USB_EPStartXfer+0x456>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	015a      	lsls	r2, r3, #5
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	4413      	add	r3, r2
 800561a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800561e:	691b      	ldr	r3, [r3, #16]
 8005620:	693a      	ldr	r2, [r7, #16]
 8005622:	0151      	lsls	r1, r2, #5
 8005624:	697a      	ldr	r2, [r7, #20]
 8005626:	440a      	add	r2, r1
 8005628:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800562c:	0cdb      	lsrs	r3, r3, #19
 800562e:	04db      	lsls	r3, r3, #19
 8005630:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	015a      	lsls	r2, r3, #5
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	4413      	add	r3, r2
 800563a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800563e:	691b      	ldr	r3, [r3, #16]
 8005640:	693a      	ldr	r2, [r7, #16]
 8005642:	0151      	lsls	r1, r2, #5
 8005644:	697a      	ldr	r2, [r7, #20]
 8005646:	440a      	add	r2, r1
 8005648:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800564c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005650:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005654:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d12f      	bne.n	80056bc <USB_EPStartXfer+0x318>
    {
      if (ep->xfer_len > 0U)
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	691b      	ldr	r3, [r3, #16]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d003      	beq.n	800566c <USB_EPStartXfer+0x2c8>
      {
        ep->xfer_len = ep->maxpacket;
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	689a      	ldr	r2, [r3, #8]
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	689a      	ldr	r2, [r3, #8]
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	015a      	lsls	r2, r3, #5
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	4413      	add	r3, r2
 800567c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005680:	691a      	ldr	r2, [r3, #16]
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	6a1b      	ldr	r3, [r3, #32]
 8005686:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800568a:	6939      	ldr	r1, [r7, #16]
 800568c:	0148      	lsls	r0, r1, #5
 800568e:	6979      	ldr	r1, [r7, #20]
 8005690:	4401      	add	r1, r0
 8005692:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005696:	4313      	orrs	r3, r2
 8005698:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	015a      	lsls	r2, r3, #5
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	4413      	add	r3, r2
 80056a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056a6:	691b      	ldr	r3, [r3, #16]
 80056a8:	693a      	ldr	r2, [r7, #16]
 80056aa:	0151      	lsls	r1, r2, #5
 80056ac:	697a      	ldr	r2, [r7, #20]
 80056ae:	440a      	add	r2, r1
 80056b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80056b4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80056b8:	6113      	str	r3, [r2, #16]
 80056ba:	e061      	b.n	8005780 <USB_EPStartXfer+0x3dc>
    }
    else
    {
      if (ep->xfer_len == 0U)
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	691b      	ldr	r3, [r3, #16]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d125      	bne.n	8005710 <USB_EPStartXfer+0x36c>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	015a      	lsls	r2, r3, #5
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	4413      	add	r3, r2
 80056cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056d0:	691a      	ldr	r2, [r3, #16]
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056da:	6939      	ldr	r1, [r7, #16]
 80056dc:	0148      	lsls	r0, r1, #5
 80056de:	6979      	ldr	r1, [r7, #20]
 80056e0:	4401      	add	r1, r0
 80056e2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80056e6:	4313      	orrs	r3, r2
 80056e8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	015a      	lsls	r2, r3, #5
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	4413      	add	r3, r2
 80056f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056f6:	691b      	ldr	r3, [r3, #16]
 80056f8:	693a      	ldr	r2, [r7, #16]
 80056fa:	0151      	lsls	r1, r2, #5
 80056fc:	697a      	ldr	r2, [r7, #20]
 80056fe:	440a      	add	r2, r1
 8005700:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005704:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005708:	6113      	str	r3, [r2, #16]
 800570a:	e039      	b.n	8005780 <USB_EPStartXfer+0x3dc>
 800570c:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	691a      	ldr	r2, [r3, #16]
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	4413      	add	r3, r2
 800571a:	1e5a      	subs	r2, r3, #1
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	fbb2 f3f3 	udiv	r3, r2, r3
 8005724:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	89fa      	ldrh	r2, [r7, #14]
 800572c:	fb03 f202 	mul.w	r2, r3, r2
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	015a      	lsls	r2, r3, #5
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	4413      	add	r3, r2
 800573c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005740:	691a      	ldr	r2, [r3, #16]
 8005742:	89fb      	ldrh	r3, [r7, #14]
 8005744:	04d9      	lsls	r1, r3, #19
 8005746:	4b2f      	ldr	r3, [pc, #188]	@ (8005804 <USB_EPStartXfer+0x460>)
 8005748:	400b      	ands	r3, r1
 800574a:	6939      	ldr	r1, [r7, #16]
 800574c:	0148      	lsls	r0, r1, #5
 800574e:	6979      	ldr	r1, [r7, #20]
 8005750:	4401      	add	r1, r0
 8005752:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005756:	4313      	orrs	r3, r2
 8005758:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	015a      	lsls	r2, r3, #5
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	4413      	add	r3, r2
 8005762:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005766:	691a      	ldr	r2, [r3, #16]
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	6a1b      	ldr	r3, [r3, #32]
 800576c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005770:	6939      	ldr	r1, [r7, #16]
 8005772:	0148      	lsls	r0, r1, #5
 8005774:	6979      	ldr	r1, [r7, #20]
 8005776:	4401      	add	r1, r0
 8005778:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800577c:	4313      	orrs	r3, r2
 800577e:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	791b      	ldrb	r3, [r3, #4]
 8005784:	2b01      	cmp	r3, #1
 8005786:	d128      	bne.n	80057da <USB_EPStartXfer+0x436>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005794:	2b00      	cmp	r3, #0
 8005796:	d110      	bne.n	80057ba <USB_EPStartXfer+0x416>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	015a      	lsls	r2, r3, #5
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	4413      	add	r3, r2
 80057a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	693a      	ldr	r2, [r7, #16]
 80057a8:	0151      	lsls	r1, r2, #5
 80057aa:	697a      	ldr	r2, [r7, #20]
 80057ac:	440a      	add	r2, r1
 80057ae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80057b2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80057b6:	6013      	str	r3, [r2, #0]
 80057b8:	e00f      	b.n	80057da <USB_EPStartXfer+0x436>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	015a      	lsls	r2, r3, #5
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	4413      	add	r3, r2
 80057c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	693a      	ldr	r2, [r7, #16]
 80057ca:	0151      	lsls	r1, r2, #5
 80057cc:	697a      	ldr	r2, [r7, #20]
 80057ce:	440a      	add	r2, r1
 80057d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80057d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80057d8:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	015a      	lsls	r2, r3, #5
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	4413      	add	r3, r2
 80057e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	693a      	ldr	r2, [r7, #16]
 80057ea:	0151      	lsls	r1, r2, #5
 80057ec:	697a      	ldr	r2, [r7, #20]
 80057ee:	440a      	add	r2, r1
 80057f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80057f4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80057f8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80057fa:	2300      	movs	r3, #0
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3718      	adds	r7, #24
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}
 8005804:	1ff80000 	.word	0x1ff80000

08005808 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005808:	b480      	push	{r7}
 800580a:	b087      	sub	sp, #28
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
 8005810:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005812:	2300      	movs	r3, #0
 8005814:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005816:	2300      	movs	r3, #0
 8005818:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	785b      	ldrb	r3, [r3, #1]
 8005822:	2b01      	cmp	r3, #1
 8005824:	d14a      	bne.n	80058bc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	781b      	ldrb	r3, [r3, #0]
 800582a:	015a      	lsls	r2, r3, #5
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	4413      	add	r3, r2
 8005830:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800583a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800583e:	f040 8086 	bne.w	800594e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	781b      	ldrb	r3, [r3, #0]
 8005846:	015a      	lsls	r2, r3, #5
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	4413      	add	r3, r2
 800584c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	683a      	ldr	r2, [r7, #0]
 8005854:	7812      	ldrb	r2, [r2, #0]
 8005856:	0151      	lsls	r1, r2, #5
 8005858:	693a      	ldr	r2, [r7, #16]
 800585a:	440a      	add	r2, r1
 800585c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005860:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005864:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	781b      	ldrb	r3, [r3, #0]
 800586a:	015a      	lsls	r2, r3, #5
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	4413      	add	r3, r2
 8005870:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	683a      	ldr	r2, [r7, #0]
 8005878:	7812      	ldrb	r2, [r2, #0]
 800587a:	0151      	lsls	r1, r2, #5
 800587c:	693a      	ldr	r2, [r7, #16]
 800587e:	440a      	add	r2, r1
 8005880:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005884:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005888:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	3301      	adds	r3, #1
 800588e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005896:	4293      	cmp	r3, r2
 8005898:	d902      	bls.n	80058a0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	75fb      	strb	r3, [r7, #23]
          break;
 800589e:	e056      	b.n	800594e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	015a      	lsls	r2, r3, #5
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	4413      	add	r3, r2
 80058aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80058b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80058b8:	d0e7      	beq.n	800588a <USB_EPStopXfer+0x82>
 80058ba:	e048      	b.n	800594e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	781b      	ldrb	r3, [r3, #0]
 80058c0:	015a      	lsls	r2, r3, #5
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	4413      	add	r3, r2
 80058c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80058d0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80058d4:	d13b      	bne.n	800594e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	781b      	ldrb	r3, [r3, #0]
 80058da:	015a      	lsls	r2, r3, #5
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	4413      	add	r3, r2
 80058e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	683a      	ldr	r2, [r7, #0]
 80058e8:	7812      	ldrb	r2, [r2, #0]
 80058ea:	0151      	lsls	r1, r2, #5
 80058ec:	693a      	ldr	r2, [r7, #16]
 80058ee:	440a      	add	r2, r1
 80058f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80058f4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80058f8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	781b      	ldrb	r3, [r3, #0]
 80058fe:	015a      	lsls	r2, r3, #5
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	4413      	add	r3, r2
 8005904:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	683a      	ldr	r2, [r7, #0]
 800590c:	7812      	ldrb	r2, [r2, #0]
 800590e:	0151      	lsls	r1, r2, #5
 8005910:	693a      	ldr	r2, [r7, #16]
 8005912:	440a      	add	r2, r1
 8005914:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005918:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800591c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	3301      	adds	r3, #1
 8005922:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f242 7210 	movw	r2, #10000	@ 0x2710
 800592a:	4293      	cmp	r3, r2
 800592c:	d902      	bls.n	8005934 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	75fb      	strb	r3, [r7, #23]
          break;
 8005932:	e00c      	b.n	800594e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	781b      	ldrb	r3, [r3, #0]
 8005938:	015a      	lsls	r2, r3, #5
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	4413      	add	r3, r2
 800593e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005948:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800594c:	d0e7      	beq.n	800591e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800594e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005950:	4618      	mov	r0, r3
 8005952:	371c      	adds	r7, #28
 8005954:	46bd      	mov	sp, r7
 8005956:	bc80      	pop	{r7}
 8005958:	4770      	bx	lr

0800595a <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 800595a:	b480      	push	{r7}
 800595c:	b089      	sub	sp, #36	@ 0x24
 800595e:	af00      	add	r7, sp, #0
 8005960:	60f8      	str	r0, [r7, #12]
 8005962:	60b9      	str	r1, [r7, #8]
 8005964:	4611      	mov	r1, r2
 8005966:	461a      	mov	r2, r3
 8005968:	460b      	mov	r3, r1
 800596a:	71fb      	strb	r3, [r7, #7]
 800596c:	4613      	mov	r3, r2
 800596e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8005978:	88bb      	ldrh	r3, [r7, #4]
 800597a:	3303      	adds	r3, #3
 800597c:	089b      	lsrs	r3, r3, #2
 800597e:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8005980:	2300      	movs	r3, #0
 8005982:	61bb      	str	r3, [r7, #24]
 8005984:	e018      	b.n	80059b8 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005986:	79fb      	ldrb	r3, [r7, #7]
 8005988:	031a      	lsls	r2, r3, #12
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	4413      	add	r3, r2
 800598e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005992:	461a      	mov	r2, r3
 8005994:	69fb      	ldr	r3, [r7, #28]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	6013      	str	r3, [r2, #0]
    pSrc++;
 800599a:	69fb      	ldr	r3, [r7, #28]
 800599c:	3301      	adds	r3, #1
 800599e:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80059a0:	69fb      	ldr	r3, [r7, #28]
 80059a2:	3301      	adds	r3, #1
 80059a4:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80059a6:	69fb      	ldr	r3, [r7, #28]
 80059a8:	3301      	adds	r3, #1
 80059aa:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80059ac:	69fb      	ldr	r3, [r7, #28]
 80059ae:	3301      	adds	r3, #1
 80059b0:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80059b2:	69bb      	ldr	r3, [r7, #24]
 80059b4:	3301      	adds	r3, #1
 80059b6:	61bb      	str	r3, [r7, #24]
 80059b8:	69ba      	ldr	r2, [r7, #24]
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	429a      	cmp	r2, r3
 80059be:	d3e2      	bcc.n	8005986 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 80059c0:	2300      	movs	r3, #0
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3724      	adds	r7, #36	@ 0x24
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bc80      	pop	{r7}
 80059ca:	4770      	bx	lr

080059cc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b08b      	sub	sp, #44	@ 0x2c
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	60f8      	str	r0, [r7, #12]
 80059d4:	60b9      	str	r1, [r7, #8]
 80059d6:	4613      	mov	r3, r2
 80059d8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80059e2:	88fb      	ldrh	r3, [r7, #6]
 80059e4:	089b      	lsrs	r3, r3, #2
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80059ea:	88fb      	ldrh	r3, [r7, #6]
 80059ec:	f003 0303 	and.w	r3, r3, #3
 80059f0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80059f2:	2300      	movs	r3, #0
 80059f4:	623b      	str	r3, [r7, #32]
 80059f6:	e014      	b.n	8005a22 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80059f8:	69bb      	ldr	r3, [r7, #24]
 80059fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a02:	601a      	str	r2, [r3, #0]
    pDest++;
 8005a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a06:	3301      	adds	r3, #1
 8005a08:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a0c:	3301      	adds	r3, #1
 8005a0e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a12:	3301      	adds	r3, #1
 8005a14:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a18:	3301      	adds	r3, #1
 8005a1a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005a1c:	6a3b      	ldr	r3, [r7, #32]
 8005a1e:	3301      	adds	r3, #1
 8005a20:	623b      	str	r3, [r7, #32]
 8005a22:	6a3a      	ldr	r2, [r7, #32]
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	429a      	cmp	r2, r3
 8005a28:	d3e6      	bcc.n	80059f8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005a2a:	8bfb      	ldrh	r3, [r7, #30]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d01e      	beq.n	8005a6e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005a30:	2300      	movs	r3, #0
 8005a32:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005a34:	69bb      	ldr	r3, [r7, #24]
 8005a36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	f107 0310 	add.w	r3, r7, #16
 8005a40:	6812      	ldr	r2, [r2, #0]
 8005a42:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005a44:	693a      	ldr	r2, [r7, #16]
 8005a46:	6a3b      	ldr	r3, [r7, #32]
 8005a48:	b2db      	uxtb	r3, r3
 8005a4a:	00db      	lsls	r3, r3, #3
 8005a4c:	fa22 f303 	lsr.w	r3, r2, r3
 8005a50:	b2da      	uxtb	r2, r3
 8005a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a54:	701a      	strb	r2, [r3, #0]
      i++;
 8005a56:	6a3b      	ldr	r3, [r7, #32]
 8005a58:	3301      	adds	r3, #1
 8005a5a:	623b      	str	r3, [r7, #32]
      pDest++;
 8005a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a5e:	3301      	adds	r3, #1
 8005a60:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005a62:	8bfb      	ldrh	r3, [r7, #30]
 8005a64:	3b01      	subs	r3, #1
 8005a66:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005a68:	8bfb      	ldrh	r3, [r7, #30]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d1ea      	bne.n	8005a44 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	372c      	adds	r7, #44	@ 0x2c
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bc80      	pop	{r7}
 8005a78:	4770      	bx	lr

08005a7a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005a7a:	b480      	push	{r7}
 8005a7c:	b085      	sub	sp, #20
 8005a7e:	af00      	add	r7, sp, #0
 8005a80:	6078      	str	r0, [r7, #4]
 8005a82:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	781b      	ldrb	r3, [r3, #0]
 8005a8c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	785b      	ldrb	r3, [r3, #1]
 8005a92:	2b01      	cmp	r3, #1
 8005a94:	d12c      	bne.n	8005af0 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	015a      	lsls	r2, r3, #5
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	4413      	add	r3, r2
 8005a9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	db12      	blt.n	8005ace <USB_EPSetStall+0x54>
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d00f      	beq.n	8005ace <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	015a      	lsls	r2, r3, #5
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	4413      	add	r3, r2
 8005ab6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	68ba      	ldr	r2, [r7, #8]
 8005abe:	0151      	lsls	r1, r2, #5
 8005ac0:	68fa      	ldr	r2, [r7, #12]
 8005ac2:	440a      	add	r2, r1
 8005ac4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ac8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005acc:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	015a      	lsls	r2, r3, #5
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	4413      	add	r3, r2
 8005ad6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	68ba      	ldr	r2, [r7, #8]
 8005ade:	0151      	lsls	r1, r2, #5
 8005ae0:	68fa      	ldr	r2, [r7, #12]
 8005ae2:	440a      	add	r2, r1
 8005ae4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ae8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005aec:	6013      	str	r3, [r2, #0]
 8005aee:	e02b      	b.n	8005b48 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	015a      	lsls	r2, r3, #5
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	4413      	add	r3, r2
 8005af8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	db12      	blt.n	8005b28 <USB_EPSetStall+0xae>
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d00f      	beq.n	8005b28 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	015a      	lsls	r2, r3, #5
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	4413      	add	r3, r2
 8005b10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	68ba      	ldr	r2, [r7, #8]
 8005b18:	0151      	lsls	r1, r2, #5
 8005b1a:	68fa      	ldr	r2, [r7, #12]
 8005b1c:	440a      	add	r2, r1
 8005b1e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005b22:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005b26:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	015a      	lsls	r2, r3, #5
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	4413      	add	r3, r2
 8005b30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	68ba      	ldr	r2, [r7, #8]
 8005b38:	0151      	lsls	r1, r2, #5
 8005b3a:	68fa      	ldr	r2, [r7, #12]
 8005b3c:	440a      	add	r2, r1
 8005b3e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005b42:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005b46:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005b48:	2300      	movs	r3, #0
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3714      	adds	r7, #20
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bc80      	pop	{r7}
 8005b52:	4770      	bx	lr

08005b54 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b085      	sub	sp, #20
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	781b      	ldrb	r3, [r3, #0]
 8005b66:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	785b      	ldrb	r3, [r3, #1]
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	d128      	bne.n	8005bc2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	015a      	lsls	r2, r3, #5
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	4413      	add	r3, r2
 8005b78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	68ba      	ldr	r2, [r7, #8]
 8005b80:	0151      	lsls	r1, r2, #5
 8005b82:	68fa      	ldr	r2, [r7, #12]
 8005b84:	440a      	add	r2, r1
 8005b86:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b8a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005b8e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	791b      	ldrb	r3, [r3, #4]
 8005b94:	2b03      	cmp	r3, #3
 8005b96:	d003      	beq.n	8005ba0 <USB_EPClearStall+0x4c>
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	791b      	ldrb	r3, [r3, #4]
 8005b9c:	2b02      	cmp	r3, #2
 8005b9e:	d138      	bne.n	8005c12 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	015a      	lsls	r2, r3, #5
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	4413      	add	r3, r2
 8005ba8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	68ba      	ldr	r2, [r7, #8]
 8005bb0:	0151      	lsls	r1, r2, #5
 8005bb2:	68fa      	ldr	r2, [r7, #12]
 8005bb4:	440a      	add	r2, r1
 8005bb6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005bba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005bbe:	6013      	str	r3, [r2, #0]
 8005bc0:	e027      	b.n	8005c12 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	015a      	lsls	r2, r3, #5
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	4413      	add	r3, r2
 8005bca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	68ba      	ldr	r2, [r7, #8]
 8005bd2:	0151      	lsls	r1, r2, #5
 8005bd4:	68fa      	ldr	r2, [r7, #12]
 8005bd6:	440a      	add	r2, r1
 8005bd8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005bdc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005be0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	791b      	ldrb	r3, [r3, #4]
 8005be6:	2b03      	cmp	r3, #3
 8005be8:	d003      	beq.n	8005bf2 <USB_EPClearStall+0x9e>
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	791b      	ldrb	r3, [r3, #4]
 8005bee:	2b02      	cmp	r3, #2
 8005bf0:	d10f      	bne.n	8005c12 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	015a      	lsls	r2, r3, #5
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	4413      	add	r3, r2
 8005bfa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	68ba      	ldr	r2, [r7, #8]
 8005c02:	0151      	lsls	r1, r2, #5
 8005c04:	68fa      	ldr	r2, [r7, #12]
 8005c06:	440a      	add	r2, r1
 8005c08:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005c0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c10:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005c12:	2300      	movs	r3, #0
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	3714      	adds	r7, #20
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bc80      	pop	{r7}
 8005c1c:	4770      	bx	lr

08005c1e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005c1e:	b480      	push	{r7}
 8005c20:	b085      	sub	sp, #20
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	6078      	str	r0, [r7, #4]
 8005c26:	460b      	mov	r3, r1
 8005c28:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	68fa      	ldr	r2, [r7, #12]
 8005c38:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005c3c:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005c40:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	78fb      	ldrb	r3, [r7, #3]
 8005c4c:	011b      	lsls	r3, r3, #4
 8005c4e:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8005c52:	68f9      	ldr	r1, [r7, #12]
 8005c54:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005c5c:	2300      	movs	r3, #0
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3714      	adds	r7, #20
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bc80      	pop	{r7}
 8005c66:	4770      	bx	lr

08005c68 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b085      	sub	sp, #20
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	68fa      	ldr	r2, [r7, #12]
 8005c7e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005c82:	f023 0303 	bic.w	r3, r3, #3
 8005c86:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	68fa      	ldr	r2, [r7, #12]
 8005c92:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005c96:	f023 0302 	bic.w	r3, r3, #2
 8005c9a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005c9c:	2300      	movs	r3, #0
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3714      	adds	r7, #20
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bc80      	pop	{r7}
 8005ca6:	4770      	bx	lr

08005ca8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b085      	sub	sp, #20
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	68fa      	ldr	r2, [r7, #12]
 8005cbe:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005cc2:	f023 0303 	bic.w	r3, r3, #3
 8005cc6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	68fa      	ldr	r2, [r7, #12]
 8005cd2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005cd6:	f043 0302 	orr.w	r3, r3, #2
 8005cda:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005cdc:	2300      	movs	r3, #0
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3714      	adds	r7, #20
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bc80      	pop	{r7}
 8005ce6:	4770      	bx	lr

08005ce8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b085      	sub	sp, #20
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	695b      	ldr	r3, [r3, #20]
 8005cf4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	699b      	ldr	r3, [r3, #24]
 8005cfa:	68fa      	ldr	r2, [r7, #12]
 8005cfc:	4013      	ands	r3, r2
 8005cfe:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005d00:	68fb      	ldr	r3, [r7, #12]
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3714      	adds	r7, #20
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bc80      	pop	{r7}
 8005d0a:	4770      	bx	lr

08005d0c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b085      	sub	sp, #20
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d1e:	699b      	ldr	r3, [r3, #24]
 8005d20:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d28:	69db      	ldr	r3, [r3, #28]
 8005d2a:	68ba      	ldr	r2, [r7, #8]
 8005d2c:	4013      	ands	r3, r2
 8005d2e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	0c1b      	lsrs	r3, r3, #16
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3714      	adds	r7, #20
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bc80      	pop	{r7}
 8005d3c:	4770      	bx	lr

08005d3e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005d3e:	b480      	push	{r7}
 8005d40:	b085      	sub	sp, #20
 8005d42:	af00      	add	r7, sp, #0
 8005d44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d50:	699b      	ldr	r3, [r3, #24]
 8005d52:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d5a:	69db      	ldr	r3, [r3, #28]
 8005d5c:	68ba      	ldr	r2, [r7, #8]
 8005d5e:	4013      	ands	r3, r2
 8005d60:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	b29b      	uxth	r3, r3
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3714      	adds	r7, #20
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bc80      	pop	{r7}
 8005d6e:	4770      	bx	lr

08005d70 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b085      	sub	sp, #20
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
 8005d78:	460b      	mov	r3, r1
 8005d7a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005d80:	78fb      	ldrb	r3, [r7, #3]
 8005d82:	015a      	lsls	r2, r3, #5
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	4413      	add	r3, r2
 8005d88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d96:	695b      	ldr	r3, [r3, #20]
 8005d98:	68ba      	ldr	r2, [r7, #8]
 8005d9a:	4013      	ands	r3, r2
 8005d9c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005d9e:	68bb      	ldr	r3, [r7, #8]
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3714      	adds	r7, #20
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bc80      	pop	{r7}
 8005da8:	4770      	bx	lr

08005daa <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005daa:	b480      	push	{r7}
 8005dac:	b087      	sub	sp, #28
 8005dae:	af00      	add	r7, sp, #0
 8005db0:	6078      	str	r0, [r7, #4]
 8005db2:	460b      	mov	r3, r1
 8005db4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005dc0:	691b      	ldr	r3, [r3, #16]
 8005dc2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005dca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005dcc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005dce:	78fb      	ldrb	r3, [r7, #3]
 8005dd0:	f003 030f 	and.w	r3, r3, #15
 8005dd4:	68fa      	ldr	r2, [r7, #12]
 8005dd6:	fa22 f303 	lsr.w	r3, r2, r3
 8005dda:	01db      	lsls	r3, r3, #7
 8005ddc:	b2db      	uxtb	r3, r3
 8005dde:	693a      	ldr	r2, [r7, #16]
 8005de0:	4313      	orrs	r3, r2
 8005de2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005de4:	78fb      	ldrb	r3, [r7, #3]
 8005de6:	015a      	lsls	r2, r3, #5
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	4413      	add	r3, r2
 8005dec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005df0:	689b      	ldr	r3, [r3, #8]
 8005df2:	693a      	ldr	r2, [r7, #16]
 8005df4:	4013      	ands	r3, r2
 8005df6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005df8:	68bb      	ldr	r3, [r7, #8]
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	371c      	adds	r7, #28
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bc80      	pop	{r7}
 8005e02:	4770      	bx	lr

08005e04 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b083      	sub	sp, #12
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	695b      	ldr	r3, [r3, #20]
 8005e10:	f003 0301 	and.w	r3, r3, #1
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	370c      	adds	r7, #12
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bc80      	pop	{r7}
 8005e1c:	4770      	bx	lr

08005e1e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8005e1e:	b480      	push	{r7}
 8005e20:	b085      	sub	sp, #20
 8005e22:	af00      	add	r7, sp, #0
 8005e24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	68fa      	ldr	r2, [r7, #12]
 8005e34:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e38:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005e3c:	f023 0307 	bic.w	r3, r3, #7
 8005e40:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	68fa      	ldr	r2, [r7, #12]
 8005e4c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005e50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e54:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005e56:	2300      	movs	r3, #0
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	3714      	adds	r7, #20
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bc80      	pop	{r7}
 8005e60:	4770      	bx	lr
	...

08005e64 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, const uint8_t *psetup)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b085      	sub	sp, #20
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
 8005e6c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	333c      	adds	r3, #60	@ 0x3c
 8005e76:	3304      	adds	r3, #4
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	4a1c      	ldr	r2, [pc, #112]	@ (8005ef0 <USB_EP0_OutStart+0x8c>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d90a      	bls.n	8005e9a <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005e90:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005e94:	d101      	bne.n	8005e9a <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8005e96:	2300      	movs	r3, #0
 8005e98:	e024      	b.n	8005ee4 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ea0:	461a      	mov	r2, r3
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005eac:	691b      	ldr	r3, [r3, #16]
 8005eae:	68fa      	ldr	r2, [r7, #12]
 8005eb0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005eb4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005eb8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ec0:	691b      	ldr	r3, [r3, #16]
 8005ec2:	68fa      	ldr	r2, [r7, #12]
 8005ec4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ec8:	f043 0318 	orr.w	r3, r3, #24
 8005ecc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ed4:	691b      	ldr	r3, [r3, #16]
 8005ed6:	68fa      	ldr	r2, [r7, #12]
 8005ed8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005edc:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8005ee0:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8005ee2:	2300      	movs	r3, #0
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3714      	adds	r7, #20
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bc80      	pop	{r7}
 8005eec:	4770      	bx	lr
 8005eee:	bf00      	nop
 8005ef0:	4f54300a 	.word	0x4f54300a

08005ef4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b085      	sub	sp, #20
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005efc:	2300      	movs	r3, #0
 8005efe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	3301      	adds	r3, #1
 8005f04:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005f0c:	d901      	bls.n	8005f12 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005f0e:	2303      	movs	r3, #3
 8005f10:	e01b      	b.n	8005f4a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	691b      	ldr	r3, [r3, #16]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	daf2      	bge.n	8005f00 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	691b      	ldr	r3, [r3, #16]
 8005f22:	f043 0201 	orr.w	r2, r3, #1
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	3301      	adds	r3, #1
 8005f2e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005f36:	d901      	bls.n	8005f3c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005f38:	2303      	movs	r3, #3
 8005f3a:	e006      	b.n	8005f4a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	691b      	ldr	r3, [r3, #16]
 8005f40:	f003 0301 	and.w	r3, r3, #1
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d0f0      	beq.n	8005f2a <USB_CoreReset+0x36>

  return HAL_OK;
 8005f48:	2300      	movs	r3, #0
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3714      	adds	r7, #20
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bc80      	pop	{r7}
 8005f52:	4770      	bx	lr

08005f54 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b084      	sub	sp, #16
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	460b      	mov	r3, r1
 8005f5e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005f60:	2300      	movs	r3, #0
 8005f62:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	7c1b      	ldrb	r3, [r3, #16]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d115      	bne.n	8005f98 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005f6c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005f70:	2202      	movs	r2, #2
 8005f72:	2181      	movs	r1, #129	@ 0x81
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f001 fef2 	bl	8007d5e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2201      	movs	r2, #1
 8005f7e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005f80:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005f84:	2202      	movs	r2, #2
 8005f86:	2101      	movs	r1, #1
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f001 fee8 	bl	8007d5e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2201      	movs	r2, #1
 8005f92:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8005f96:	e012      	b.n	8005fbe <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005f98:	2340      	movs	r3, #64	@ 0x40
 8005f9a:	2202      	movs	r2, #2
 8005f9c:	2181      	movs	r1, #129	@ 0x81
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f001 fedd 	bl	8007d5e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005faa:	2340      	movs	r3, #64	@ 0x40
 8005fac:	2202      	movs	r2, #2
 8005fae:	2101      	movs	r1, #1
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f001 fed4 	bl	8007d5e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2201      	movs	r2, #1
 8005fba:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005fbe:	2308      	movs	r3, #8
 8005fc0:	2203      	movs	r2, #3
 8005fc2:	2182      	movs	r1, #130	@ 0x82
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f001 feca 	bl	8007d5e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2201      	movs	r2, #1
 8005fce:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005fd0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8005fd4:	f001 ffea 	bl	8007fac <USBD_static_malloc>
 8005fd8:	4602      	mov	r2, r0
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d102      	bne.n	8005ff0 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8005fea:	2301      	movs	r3, #1
 8005fec:	73fb      	strb	r3, [r7, #15]
 8005fee:	e026      	b.n	800603e <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005ff6:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	2200      	movs	r2, #0
 8006006:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	2200      	movs	r2, #0
 800600e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	7c1b      	ldrb	r3, [r3, #16]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d109      	bne.n	800602e <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006020:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006024:	2101      	movs	r1, #1
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f001 ff89 	bl	8007f3e <USBD_LL_PrepareReceive>
 800602c:	e007      	b.n	800603e <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006034:	2340      	movs	r3, #64	@ 0x40
 8006036:	2101      	movs	r1, #1
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f001 ff80 	bl	8007f3e <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800603e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006040:	4618      	mov	r0, r3
 8006042:	3710      	adds	r7, #16
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}

08006048 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b084      	sub	sp, #16
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
 8006050:	460b      	mov	r3, r1
 8006052:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006054:	2300      	movs	r3, #0
 8006056:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006058:	2181      	movs	r1, #129	@ 0x81
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f001 fea5 	bl	8007daa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2200      	movs	r2, #0
 8006064:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006066:	2101      	movs	r1, #1
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f001 fe9e 	bl	8007daa <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2200      	movs	r2, #0
 8006072:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006076:	2182      	movs	r1, #130	@ 0x82
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f001 fe96 	bl	8007daa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2200      	movs	r2, #0
 8006082:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800608a:	2b00      	cmp	r3, #0
 800608c:	d00e      	beq.n	80060ac <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800609e:	4618      	mov	r0, r3
 80060a0:	f001 ff90 	bl	8007fc4 <USBD_static_free>
    pdev->pClassData = NULL;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2200      	movs	r2, #0
 80060a8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 80060ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3710      	adds	r7, #16
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}

080060b6 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80060b6:	b580      	push	{r7, lr}
 80060b8:	b086      	sub	sp, #24
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	6078      	str	r0, [r7, #4]
 80060be:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80060c6:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80060c8:	2300      	movs	r3, #0
 80060ca:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80060cc:	2300      	movs	r3, #0
 80060ce:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80060d0:	2300      	movs	r3, #0
 80060d2:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	781b      	ldrb	r3, [r3, #0]
 80060d8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d039      	beq.n	8006154 <USBD_CDC_Setup+0x9e>
 80060e0:	2b20      	cmp	r3, #32
 80060e2:	d17f      	bne.n	80061e4 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	88db      	ldrh	r3, [r3, #6]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d029      	beq.n	8006140 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	781b      	ldrb	r3, [r3, #0]
 80060f0:	b25b      	sxtb	r3, r3
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	da11      	bge.n	800611a <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80060fc:	689b      	ldr	r3, [r3, #8]
 80060fe:	683a      	ldr	r2, [r7, #0]
 8006100:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006102:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006104:	683a      	ldr	r2, [r7, #0]
 8006106:	88d2      	ldrh	r2, [r2, #6]
 8006108:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800610a:	6939      	ldr	r1, [r7, #16]
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	88db      	ldrh	r3, [r3, #6]
 8006110:	461a      	mov	r2, r3
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f001 fa3e 	bl	8007594 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006118:	e06b      	b.n	80061f2 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	785a      	ldrb	r2, [r3, #1]
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	88db      	ldrh	r3, [r3, #6]
 8006128:	b2da      	uxtb	r2, r3
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006130:	6939      	ldr	r1, [r7, #16]
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	88db      	ldrh	r3, [r3, #6]
 8006136:	461a      	mov	r2, r3
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f001 fa59 	bl	80075f0 <USBD_CtlPrepareRx>
      break;
 800613e:	e058      	b.n	80061f2 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	683a      	ldr	r2, [r7, #0]
 800614a:	7850      	ldrb	r0, [r2, #1]
 800614c:	2200      	movs	r2, #0
 800614e:	6839      	ldr	r1, [r7, #0]
 8006150:	4798      	blx	r3
      break;
 8006152:	e04e      	b.n	80061f2 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	785b      	ldrb	r3, [r3, #1]
 8006158:	2b0b      	cmp	r3, #11
 800615a:	d02e      	beq.n	80061ba <USBD_CDC_Setup+0x104>
 800615c:	2b0b      	cmp	r3, #11
 800615e:	dc38      	bgt.n	80061d2 <USBD_CDC_Setup+0x11c>
 8006160:	2b00      	cmp	r3, #0
 8006162:	d002      	beq.n	800616a <USBD_CDC_Setup+0xb4>
 8006164:	2b0a      	cmp	r3, #10
 8006166:	d014      	beq.n	8006192 <USBD_CDC_Setup+0xdc>
 8006168:	e033      	b.n	80061d2 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006170:	2b03      	cmp	r3, #3
 8006172:	d107      	bne.n	8006184 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006174:	f107 030c 	add.w	r3, r7, #12
 8006178:	2202      	movs	r2, #2
 800617a:	4619      	mov	r1, r3
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	f001 fa09 	bl	8007594 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006182:	e02e      	b.n	80061e2 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006184:	6839      	ldr	r1, [r7, #0]
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f001 f99a 	bl	80074c0 <USBD_CtlError>
            ret = USBD_FAIL;
 800618c:	2302      	movs	r3, #2
 800618e:	75fb      	strb	r3, [r7, #23]
          break;
 8006190:	e027      	b.n	80061e2 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006198:	2b03      	cmp	r3, #3
 800619a:	d107      	bne.n	80061ac <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800619c:	f107 030f 	add.w	r3, r7, #15
 80061a0:	2201      	movs	r2, #1
 80061a2:	4619      	mov	r1, r3
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f001 f9f5 	bl	8007594 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80061aa:	e01a      	b.n	80061e2 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80061ac:	6839      	ldr	r1, [r7, #0]
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f001 f986 	bl	80074c0 <USBD_CtlError>
            ret = USBD_FAIL;
 80061b4:	2302      	movs	r3, #2
 80061b6:	75fb      	strb	r3, [r7, #23]
          break;
 80061b8:	e013      	b.n	80061e2 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80061c0:	2b03      	cmp	r3, #3
 80061c2:	d00d      	beq.n	80061e0 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80061c4:	6839      	ldr	r1, [r7, #0]
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f001 f97a 	bl	80074c0 <USBD_CtlError>
            ret = USBD_FAIL;
 80061cc:	2302      	movs	r3, #2
 80061ce:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80061d0:	e006      	b.n	80061e0 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80061d2:	6839      	ldr	r1, [r7, #0]
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f001 f973 	bl	80074c0 <USBD_CtlError>
          ret = USBD_FAIL;
 80061da:	2302      	movs	r3, #2
 80061dc:	75fb      	strb	r3, [r7, #23]
          break;
 80061de:	e000      	b.n	80061e2 <USBD_CDC_Setup+0x12c>
          break;
 80061e0:	bf00      	nop
      }
      break;
 80061e2:	e006      	b.n	80061f2 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80061e4:	6839      	ldr	r1, [r7, #0]
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f001 f96a 	bl	80074c0 <USBD_CtlError>
      ret = USBD_FAIL;
 80061ec:	2302      	movs	r3, #2
 80061ee:	75fb      	strb	r3, [r7, #23]
      break;
 80061f0:	bf00      	nop
  }

  return ret;
 80061f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	3718      	adds	r7, #24
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}

080061fc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b084      	sub	sp, #16
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
 8006204:	460b      	mov	r3, r1
 8006206:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800620e:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8006216:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800621e:	2b00      	cmp	r3, #0
 8006220:	d03a      	beq.n	8006298 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006222:	78fa      	ldrb	r2, [r7, #3]
 8006224:	6879      	ldr	r1, [r7, #4]
 8006226:	4613      	mov	r3, r2
 8006228:	009b      	lsls	r3, r3, #2
 800622a:	4413      	add	r3, r2
 800622c:	009b      	lsls	r3, r3, #2
 800622e:	440b      	add	r3, r1
 8006230:	331c      	adds	r3, #28
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d029      	beq.n	800628c <USBD_CDC_DataIn+0x90>
 8006238:	78fa      	ldrb	r2, [r7, #3]
 800623a:	6879      	ldr	r1, [r7, #4]
 800623c:	4613      	mov	r3, r2
 800623e:	009b      	lsls	r3, r3, #2
 8006240:	4413      	add	r3, r2
 8006242:	009b      	lsls	r3, r3, #2
 8006244:	440b      	add	r3, r1
 8006246:	331c      	adds	r3, #28
 8006248:	681a      	ldr	r2, [r3, #0]
 800624a:	78f9      	ldrb	r1, [r7, #3]
 800624c:	68b8      	ldr	r0, [r7, #8]
 800624e:	460b      	mov	r3, r1
 8006250:	00db      	lsls	r3, r3, #3
 8006252:	440b      	add	r3, r1
 8006254:	009b      	lsls	r3, r3, #2
 8006256:	4403      	add	r3, r0
 8006258:	331c      	adds	r3, #28
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	fbb2 f1f3 	udiv	r1, r2, r3
 8006260:	fb01 f303 	mul.w	r3, r1, r3
 8006264:	1ad3      	subs	r3, r2, r3
 8006266:	2b00      	cmp	r3, #0
 8006268:	d110      	bne.n	800628c <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800626a:	78fa      	ldrb	r2, [r7, #3]
 800626c:	6879      	ldr	r1, [r7, #4]
 800626e:	4613      	mov	r3, r2
 8006270:	009b      	lsls	r3, r3, #2
 8006272:	4413      	add	r3, r2
 8006274:	009b      	lsls	r3, r3, #2
 8006276:	440b      	add	r3, r1
 8006278:	331c      	adds	r3, #28
 800627a:	2200      	movs	r2, #0
 800627c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800627e:	78f9      	ldrb	r1, [r7, #3]
 8006280:	2300      	movs	r3, #0
 8006282:	2200      	movs	r2, #0
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	f001 fe37 	bl	8007ef8 <USBD_LL_Transmit>
 800628a:	e003      	b.n	8006294 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2200      	movs	r2, #0
 8006290:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 8006294:	2300      	movs	r3, #0
 8006296:	e000      	b.n	800629a <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006298:	2302      	movs	r3, #2
  }
}
 800629a:	4618      	mov	r0, r3
 800629c:	3710      	adds	r7, #16
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}

080062a2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80062a2:	b580      	push	{r7, lr}
 80062a4:	b084      	sub	sp, #16
 80062a6:	af00      	add	r7, sp, #0
 80062a8:	6078      	str	r0, [r7, #4]
 80062aa:	460b      	mov	r3, r1
 80062ac:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80062b4:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80062b6:	78fb      	ldrb	r3, [r7, #3]
 80062b8:	4619      	mov	r1, r3
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f001 fe62 	bl	8007f84 <USBD_LL_GetRxDataSize>
 80062c0:	4602      	mov	r2, r0
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d00d      	beq.n	80062ee <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80062d8:	68db      	ldr	r3, [r3, #12]
 80062da:	68fa      	ldr	r2, [r7, #12]
 80062dc:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80062e0:	68fa      	ldr	r2, [r7, #12]
 80062e2:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80062e6:	4611      	mov	r1, r2
 80062e8:	4798      	blx	r3

    return USBD_OK;
 80062ea:	2300      	movs	r3, #0
 80062ec:	e000      	b.n	80062f0 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80062ee:	2302      	movs	r3, #2
  }
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	3710      	adds	r7, #16
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}

080062f8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b084      	sub	sp, #16
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006306:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800630e:	2b00      	cmp	r3, #0
 8006310:	d014      	beq.n	800633c <USBD_CDC_EP0_RxReady+0x44>
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8006318:	2bff      	cmp	r3, #255	@ 0xff
 800631a:	d00f      	beq.n	800633c <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	68fa      	ldr	r2, [r7, #12]
 8006326:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800632a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800632c:	68fa      	ldr	r2, [r7, #12]
 800632e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006332:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	22ff      	movs	r2, #255	@ 0xff
 8006338:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 800633c:	2300      	movs	r3, #0
}
 800633e:	4618      	mov	r0, r3
 8006340:	3710      	adds	r7, #16
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}
	...

08006348 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006348:	b480      	push	{r7}
 800634a:	b083      	sub	sp, #12
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2243      	movs	r2, #67	@ 0x43
 8006354:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006356:	4b03      	ldr	r3, [pc, #12]	@ (8006364 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006358:	4618      	mov	r0, r3
 800635a:	370c      	adds	r7, #12
 800635c:	46bd      	mov	sp, r7
 800635e:	bc80      	pop	{r7}
 8006360:	4770      	bx	lr
 8006362:	bf00      	nop
 8006364:	20000094 	.word	0x20000094

08006368 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006368:	b480      	push	{r7}
 800636a:	b083      	sub	sp, #12
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2243      	movs	r2, #67	@ 0x43
 8006374:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006376:	4b03      	ldr	r3, [pc, #12]	@ (8006384 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006378:	4618      	mov	r0, r3
 800637a:	370c      	adds	r7, #12
 800637c:	46bd      	mov	sp, r7
 800637e:	bc80      	pop	{r7}
 8006380:	4770      	bx	lr
 8006382:	bf00      	nop
 8006384:	20000050 	.word	0x20000050

08006388 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006388:	b480      	push	{r7}
 800638a:	b083      	sub	sp, #12
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2243      	movs	r2, #67	@ 0x43
 8006394:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006396:	4b03      	ldr	r3, [pc, #12]	@ (80063a4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006398:	4618      	mov	r0, r3
 800639a:	370c      	adds	r7, #12
 800639c:	46bd      	mov	sp, r7
 800639e:	bc80      	pop	{r7}
 80063a0:	4770      	bx	lr
 80063a2:	bf00      	nop
 80063a4:	200000d8 	.word	0x200000d8

080063a8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b083      	sub	sp, #12
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	220a      	movs	r2, #10
 80063b4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80063b6:	4b03      	ldr	r3, [pc, #12]	@ (80063c4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	370c      	adds	r7, #12
 80063bc:	46bd      	mov	sp, r7
 80063be:	bc80      	pop	{r7}
 80063c0:	4770      	bx	lr
 80063c2:	bf00      	nop
 80063c4:	2000000c 	.word	0x2000000c

080063c8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b085      	sub	sp, #20
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80063d2:	2302      	movs	r3, #2
 80063d4:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d005      	beq.n	80063e8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	683a      	ldr	r2, [r7, #0]
 80063e0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 80063e4:	2300      	movs	r3, #0
 80063e6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80063e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3714      	adds	r7, #20
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bc80      	pop	{r7}
 80063f2:	4770      	bx	lr

080063f4 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b087      	sub	sp, #28
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	60f8      	str	r0, [r7, #12]
 80063fc:	60b9      	str	r1, [r7, #8]
 80063fe:	4613      	mov	r3, r2
 8006400:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006408:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	68ba      	ldr	r2, [r7, #8]
 800640e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8006412:	88fa      	ldrh	r2, [r7, #6]
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 800641a:	2300      	movs	r3, #0
}
 800641c:	4618      	mov	r0, r3
 800641e:	371c      	adds	r7, #28
 8006420:	46bd      	mov	sp, r7
 8006422:	bc80      	pop	{r7}
 8006424:	4770      	bx	lr

08006426 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8006426:	b480      	push	{r7}
 8006428:	b085      	sub	sp, #20
 800642a:	af00      	add	r7, sp, #0
 800642c:	6078      	str	r0, [r7, #4]
 800642e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006436:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	683a      	ldr	r2, [r7, #0]
 800643c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8006440:	2300      	movs	r3, #0
}
 8006442:	4618      	mov	r0, r3
 8006444:	3714      	adds	r7, #20
 8006446:	46bd      	mov	sp, r7
 8006448:	bc80      	pop	{r7}
 800644a:	4770      	bx	lr

0800644c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b084      	sub	sp, #16
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800645a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006462:	2b00      	cmp	r3, #0
 8006464:	d01c      	beq.n	80064a0 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800646c:	2b00      	cmp	r3, #0
 800646e:	d115      	bne.n	800649c <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2201      	movs	r2, #1
 8006474:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800648e:	b29b      	uxth	r3, r3
 8006490:	2181      	movs	r1, #129	@ 0x81
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f001 fd30 	bl	8007ef8 <USBD_LL_Transmit>

      return USBD_OK;
 8006498:	2300      	movs	r3, #0
 800649a:	e002      	b.n	80064a2 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800649c:	2301      	movs	r3, #1
 800649e:	e000      	b.n	80064a2 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80064a0:	2302      	movs	r3, #2
  }
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3710      	adds	r7, #16
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}

080064aa <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80064aa:	b580      	push	{r7, lr}
 80064ac:	b084      	sub	sp, #16
 80064ae:	af00      	add	r7, sp, #0
 80064b0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80064b8:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d017      	beq.n	80064f4 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	7c1b      	ldrb	r3, [r3, #16]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d109      	bne.n	80064e0 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80064d2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80064d6:	2101      	movs	r1, #1
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f001 fd30 	bl	8007f3e <USBD_LL_PrepareReceive>
 80064de:	e007      	b.n	80064f0 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80064e6:	2340      	movs	r3, #64	@ 0x40
 80064e8:	2101      	movs	r1, #1
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f001 fd27 	bl	8007f3e <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80064f0:	2300      	movs	r3, #0
 80064f2:	e000      	b.n	80064f6 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80064f4:	2302      	movs	r3, #2
  }
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3710      	adds	r7, #16
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}

080064fe <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80064fe:	b580      	push	{r7, lr}
 8006500:	b084      	sub	sp, #16
 8006502:	af00      	add	r7, sp, #0
 8006504:	60f8      	str	r0, [r7, #12]
 8006506:	60b9      	str	r1, [r7, #8]
 8006508:	4613      	mov	r3, r2
 800650a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d101      	bne.n	8006516 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006512:	2302      	movs	r3, #2
 8006514:	e01a      	b.n	800654c <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800651c:	2b00      	cmp	r3, #0
 800651e:	d003      	beq.n	8006528 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	2200      	movs	r2, #0
 8006524:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d003      	beq.n	8006536 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	68ba      	ldr	r2, [r7, #8]
 8006532:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2201      	movs	r2, #1
 800653a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	79fa      	ldrb	r2, [r7, #7]
 8006542:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006544:	68f8      	ldr	r0, [r7, #12]
 8006546:	f001 fbab 	bl	8007ca0 <USBD_LL_Init>

  return USBD_OK;
 800654a:	2300      	movs	r3, #0
}
 800654c:	4618      	mov	r0, r3
 800654e:	3710      	adds	r7, #16
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}

08006554 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006554:	b480      	push	{r7}
 8006556:	b085      	sub	sp, #20
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
 800655c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800655e:	2300      	movs	r3, #0
 8006560:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d006      	beq.n	8006576 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	683a      	ldr	r2, [r7, #0]
 800656c:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8006570:	2300      	movs	r3, #0
 8006572:	73fb      	strb	r3, [r7, #15]
 8006574:	e001      	b.n	800657a <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006576:	2302      	movs	r3, #2
 8006578:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800657a:	7bfb      	ldrb	r3, [r7, #15]
}
 800657c:	4618      	mov	r0, r3
 800657e:	3714      	adds	r7, #20
 8006580:	46bd      	mov	sp, r7
 8006582:	bc80      	pop	{r7}
 8006584:	4770      	bx	lr

08006586 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006586:	b580      	push	{r7, lr}
 8006588:	b082      	sub	sp, #8
 800658a:	af00      	add	r7, sp, #0
 800658c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f001 fbca 	bl	8007d28 <USBD_LL_Start>

  return USBD_OK;
 8006594:	2300      	movs	r3, #0
}
 8006596:	4618      	mov	r0, r3
 8006598:	3708      	adds	r7, #8
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}

0800659e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800659e:	b480      	push	{r7}
 80065a0:	b083      	sub	sp, #12
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80065a6:	2300      	movs	r3, #0
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	370c      	adds	r7, #12
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bc80      	pop	{r7}
 80065b0:	4770      	bx	lr

080065b2 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80065b2:	b580      	push	{r7, lr}
 80065b4:	b084      	sub	sp, #16
 80065b6:	af00      	add	r7, sp, #0
 80065b8:	6078      	str	r0, [r7, #4]
 80065ba:	460b      	mov	r3, r1
 80065bc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80065be:	2302      	movs	r3, #2
 80065c0:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d00c      	beq.n	80065e6 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	78fa      	ldrb	r2, [r7, #3]
 80065d6:	4611      	mov	r1, r2
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	4798      	blx	r3
 80065dc:	4603      	mov	r3, r0
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d101      	bne.n	80065e6 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80065e2:	2300      	movs	r3, #0
 80065e4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80065e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80065e8:	4618      	mov	r0, r3
 80065ea:	3710      	adds	r7, #16
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bd80      	pop	{r7, pc}

080065f0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b082      	sub	sp, #8
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
 80065f8:	460b      	mov	r3, r1
 80065fa:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	78fa      	ldrb	r2, [r7, #3]
 8006606:	4611      	mov	r1, r2
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	4798      	blx	r3

  return USBD_OK;
 800660c:	2300      	movs	r3, #0
}
 800660e:	4618      	mov	r0, r3
 8006610:	3708      	adds	r7, #8
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}

08006616 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006616:	b580      	push	{r7, lr}
 8006618:	b082      	sub	sp, #8
 800661a:	af00      	add	r7, sp, #0
 800661c:	6078      	str	r0, [r7, #4]
 800661e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006626:	6839      	ldr	r1, [r7, #0]
 8006628:	4618      	mov	r0, r3
 800662a:	f000 ff10 	bl	800744e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2201      	movs	r2, #1
 8006632:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800663c:	461a      	mov	r2, r3
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800664a:	f003 031f 	and.w	r3, r3, #31
 800664e:	2b02      	cmp	r3, #2
 8006650:	d016      	beq.n	8006680 <USBD_LL_SetupStage+0x6a>
 8006652:	2b02      	cmp	r3, #2
 8006654:	d81c      	bhi.n	8006690 <USBD_LL_SetupStage+0x7a>
 8006656:	2b00      	cmp	r3, #0
 8006658:	d002      	beq.n	8006660 <USBD_LL_SetupStage+0x4a>
 800665a:	2b01      	cmp	r3, #1
 800665c:	d008      	beq.n	8006670 <USBD_LL_SetupStage+0x5a>
 800665e:	e017      	b.n	8006690 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006666:	4619      	mov	r1, r3
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f000 fa03 	bl	8006a74 <USBD_StdDevReq>
      break;
 800666e:	e01a      	b.n	80066a6 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006676:	4619      	mov	r1, r3
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f000 fa65 	bl	8006b48 <USBD_StdItfReq>
      break;
 800667e:	e012      	b.n	80066a6 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006686:	4619      	mov	r1, r3
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f000 faa5 	bl	8006bd8 <USBD_StdEPReq>
      break;
 800668e:	e00a      	b.n	80066a6 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8006696:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800669a:	b2db      	uxtb	r3, r3
 800669c:	4619      	mov	r1, r3
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f001 fba2 	bl	8007de8 <USBD_LL_StallEP>
      break;
 80066a4:	bf00      	nop
  }

  return USBD_OK;
 80066a6:	2300      	movs	r3, #0
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	3708      	adds	r7, #8
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd80      	pop	{r7, pc}

080066b0 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b086      	sub	sp, #24
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	60f8      	str	r0, [r7, #12]
 80066b8:	460b      	mov	r3, r1
 80066ba:	607a      	str	r2, [r7, #4]
 80066bc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80066be:	7afb      	ldrb	r3, [r7, #11]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d14b      	bne.n	800675c <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80066ca:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80066d2:	2b03      	cmp	r3, #3
 80066d4:	d134      	bne.n	8006740 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	68da      	ldr	r2, [r3, #12]
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	691b      	ldr	r3, [r3, #16]
 80066de:	429a      	cmp	r2, r3
 80066e0:	d919      	bls.n	8006716 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	68da      	ldr	r2, [r3, #12]
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	691b      	ldr	r3, [r3, #16]
 80066ea:	1ad2      	subs	r2, r2, r3
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	68da      	ldr	r2, [r3, #12]
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80066f8:	429a      	cmp	r2, r3
 80066fa:	d203      	bcs.n	8006704 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006700:	b29b      	uxth	r3, r3
 8006702:	e002      	b.n	800670a <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006708:	b29b      	uxth	r3, r3
 800670a:	461a      	mov	r2, r3
 800670c:	6879      	ldr	r1, [r7, #4]
 800670e:	68f8      	ldr	r0, [r7, #12]
 8006710:	f000 ff8c 	bl	800762c <USBD_CtlContinueRx>
 8006714:	e038      	b.n	8006788 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800671c:	691b      	ldr	r3, [r3, #16]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d00a      	beq.n	8006738 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006728:	2b03      	cmp	r3, #3
 800672a:	d105      	bne.n	8006738 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006732:	691b      	ldr	r3, [r3, #16]
 8006734:	68f8      	ldr	r0, [r7, #12]
 8006736:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006738:	68f8      	ldr	r0, [r7, #12]
 800673a:	f000 ff89 	bl	8007650 <USBD_CtlSendStatus>
 800673e:	e023      	b.n	8006788 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006746:	2b05      	cmp	r3, #5
 8006748:	d11e      	bne.n	8006788 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2200      	movs	r2, #0
 800674e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006752:	2100      	movs	r1, #0
 8006754:	68f8      	ldr	r0, [r7, #12]
 8006756:	f001 fb47 	bl	8007de8 <USBD_LL_StallEP>
 800675a:	e015      	b.n	8006788 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006762:	699b      	ldr	r3, [r3, #24]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d00d      	beq.n	8006784 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800676e:	2b03      	cmp	r3, #3
 8006770:	d108      	bne.n	8006784 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006778:	699b      	ldr	r3, [r3, #24]
 800677a:	7afa      	ldrb	r2, [r7, #11]
 800677c:	4611      	mov	r1, r2
 800677e:	68f8      	ldr	r0, [r7, #12]
 8006780:	4798      	blx	r3
 8006782:	e001      	b.n	8006788 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006784:	2302      	movs	r3, #2
 8006786:	e000      	b.n	800678a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006788:	2300      	movs	r3, #0
}
 800678a:	4618      	mov	r0, r3
 800678c:	3718      	adds	r7, #24
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}

08006792 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006792:	b580      	push	{r7, lr}
 8006794:	b086      	sub	sp, #24
 8006796:	af00      	add	r7, sp, #0
 8006798:	60f8      	str	r0, [r7, #12]
 800679a:	460b      	mov	r3, r1
 800679c:	607a      	str	r2, [r7, #4]
 800679e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80067a0:	7afb      	ldrb	r3, [r7, #11]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d17f      	bne.n	80068a6 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	3314      	adds	r3, #20
 80067aa:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80067b2:	2b02      	cmp	r3, #2
 80067b4:	d15c      	bne.n	8006870 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	68da      	ldr	r2, [r3, #12]
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	691b      	ldr	r3, [r3, #16]
 80067be:	429a      	cmp	r2, r3
 80067c0:	d915      	bls.n	80067ee <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	68da      	ldr	r2, [r3, #12]
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	691b      	ldr	r3, [r3, #16]
 80067ca:	1ad2      	subs	r2, r2, r3
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	68db      	ldr	r3, [r3, #12]
 80067d4:	b29b      	uxth	r3, r3
 80067d6:	461a      	mov	r2, r3
 80067d8:	6879      	ldr	r1, [r7, #4]
 80067da:	68f8      	ldr	r0, [r7, #12]
 80067dc:	f000 fef6 	bl	80075cc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80067e0:	2300      	movs	r3, #0
 80067e2:	2200      	movs	r2, #0
 80067e4:	2100      	movs	r1, #0
 80067e6:	68f8      	ldr	r0, [r7, #12]
 80067e8:	f001 fba9 	bl	8007f3e <USBD_LL_PrepareReceive>
 80067ec:	e04e      	b.n	800688c <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	689b      	ldr	r3, [r3, #8]
 80067f2:	697a      	ldr	r2, [r7, #20]
 80067f4:	6912      	ldr	r2, [r2, #16]
 80067f6:	fbb3 f1f2 	udiv	r1, r3, r2
 80067fa:	fb01 f202 	mul.w	r2, r1, r2
 80067fe:	1a9b      	subs	r3, r3, r2
 8006800:	2b00      	cmp	r3, #0
 8006802:	d11c      	bne.n	800683e <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	689a      	ldr	r2, [r3, #8]
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800680c:	429a      	cmp	r2, r3
 800680e:	d316      	bcc.n	800683e <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	689a      	ldr	r2, [r3, #8]
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800681a:	429a      	cmp	r2, r3
 800681c:	d20f      	bcs.n	800683e <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800681e:	2200      	movs	r2, #0
 8006820:	2100      	movs	r1, #0
 8006822:	68f8      	ldr	r0, [r7, #12]
 8006824:	f000 fed2 	bl	80075cc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	2200      	movs	r2, #0
 800682c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006830:	2300      	movs	r3, #0
 8006832:	2200      	movs	r2, #0
 8006834:	2100      	movs	r1, #0
 8006836:	68f8      	ldr	r0, [r7, #12]
 8006838:	f001 fb81 	bl	8007f3e <USBD_LL_PrepareReceive>
 800683c:	e026      	b.n	800688c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006844:	68db      	ldr	r3, [r3, #12]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d00a      	beq.n	8006860 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006850:	2b03      	cmp	r3, #3
 8006852:	d105      	bne.n	8006860 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800685a:	68db      	ldr	r3, [r3, #12]
 800685c:	68f8      	ldr	r0, [r7, #12]
 800685e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006860:	2180      	movs	r1, #128	@ 0x80
 8006862:	68f8      	ldr	r0, [r7, #12]
 8006864:	f001 fac0 	bl	8007de8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006868:	68f8      	ldr	r0, [r7, #12]
 800686a:	f000 ff04 	bl	8007676 <USBD_CtlReceiveStatus>
 800686e:	e00d      	b.n	800688c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006876:	2b04      	cmp	r3, #4
 8006878:	d004      	beq.n	8006884 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006880:	2b00      	cmp	r3, #0
 8006882:	d103      	bne.n	800688c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006884:	2180      	movs	r1, #128	@ 0x80
 8006886:	68f8      	ldr	r0, [r7, #12]
 8006888:	f001 faae 	bl	8007de8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8006892:	2b01      	cmp	r3, #1
 8006894:	d11d      	bne.n	80068d2 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006896:	68f8      	ldr	r0, [r7, #12]
 8006898:	f7ff fe81 	bl	800659e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2200      	movs	r2, #0
 80068a0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80068a4:	e015      	b.n	80068d2 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80068ac:	695b      	ldr	r3, [r3, #20]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d00d      	beq.n	80068ce <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80068b8:	2b03      	cmp	r3, #3
 80068ba:	d108      	bne.n	80068ce <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80068c2:	695b      	ldr	r3, [r3, #20]
 80068c4:	7afa      	ldrb	r2, [r7, #11]
 80068c6:	4611      	mov	r1, r2
 80068c8:	68f8      	ldr	r0, [r7, #12]
 80068ca:	4798      	blx	r3
 80068cc:	e001      	b.n	80068d2 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80068ce:	2302      	movs	r3, #2
 80068d0:	e000      	b.n	80068d4 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80068d2:	2300      	movs	r3, #0
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	3718      	adds	r7, #24
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}

080068dc <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b082      	sub	sp, #8
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80068e4:	2340      	movs	r3, #64	@ 0x40
 80068e6:	2200      	movs	r2, #0
 80068e8:	2100      	movs	r1, #0
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f001 fa37 	bl	8007d5e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2201      	movs	r2, #1
 80068f4:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2240      	movs	r2, #64	@ 0x40
 80068fc:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006900:	2340      	movs	r3, #64	@ 0x40
 8006902:	2200      	movs	r2, #0
 8006904:	2180      	movs	r1, #128	@ 0x80
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f001 fa29 	bl	8007d5e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2201      	movs	r2, #1
 8006910:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2240      	movs	r2, #64	@ 0x40
 8006916:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2201      	movs	r2, #1
 800691c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2200      	movs	r2, #0
 8006924:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2200      	movs	r2, #0
 800692c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2200      	movs	r2, #0
 8006932:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800693c:	2b00      	cmp	r3, #0
 800693e:	d009      	beq.n	8006954 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	687a      	ldr	r2, [r7, #4]
 800694a:	6852      	ldr	r2, [r2, #4]
 800694c:	b2d2      	uxtb	r2, r2
 800694e:	4611      	mov	r1, r2
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	4798      	blx	r3
  }

  return USBD_OK;
 8006954:	2300      	movs	r3, #0
}
 8006956:	4618      	mov	r0, r3
 8006958:	3708      	adds	r7, #8
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}

0800695e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800695e:	b480      	push	{r7}
 8006960:	b083      	sub	sp, #12
 8006962:	af00      	add	r7, sp, #0
 8006964:	6078      	str	r0, [r7, #4]
 8006966:	460b      	mov	r3, r1
 8006968:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	78fa      	ldrb	r2, [r7, #3]
 800696e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006970:	2300      	movs	r3, #0
}
 8006972:	4618      	mov	r0, r3
 8006974:	370c      	adds	r7, #12
 8006976:	46bd      	mov	sp, r7
 8006978:	bc80      	pop	{r7}
 800697a:	4770      	bx	lr

0800697c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800697c:	b480      	push	{r7}
 800697e:	b083      	sub	sp, #12
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2204      	movs	r2, #4
 8006994:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8006998:	2300      	movs	r3, #0
}
 800699a:	4618      	mov	r0, r3
 800699c:	370c      	adds	r7, #12
 800699e:	46bd      	mov	sp, r7
 80069a0:	bc80      	pop	{r7}
 80069a2:	4770      	bx	lr

080069a4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b083      	sub	sp, #12
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80069b2:	2b04      	cmp	r3, #4
 80069b4:	d105      	bne.n	80069c2 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80069c2:	2300      	movs	r3, #0
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	370c      	adds	r7, #12
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bc80      	pop	{r7}
 80069cc:	4770      	bx	lr

080069ce <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80069ce:	b580      	push	{r7, lr}
 80069d0:	b082      	sub	sp, #8
 80069d2:	af00      	add	r7, sp, #0
 80069d4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80069dc:	2b03      	cmp	r3, #3
 80069de:	d10b      	bne.n	80069f8 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80069e6:	69db      	ldr	r3, [r3, #28]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d005      	beq.n	80069f8 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80069f2:	69db      	ldr	r3, [r3, #28]
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80069f8:	2300      	movs	r3, #0
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	3708      	adds	r7, #8
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}

08006a02 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006a02:	b480      	push	{r7}
 8006a04:	b083      	sub	sp, #12
 8006a06:	af00      	add	r7, sp, #0
 8006a08:	6078      	str	r0, [r7, #4]
 8006a0a:	460b      	mov	r3, r1
 8006a0c:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006a0e:	2300      	movs	r3, #0
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	370c      	adds	r7, #12
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bc80      	pop	{r7}
 8006a18:	4770      	bx	lr

08006a1a <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006a1a:	b480      	push	{r7}
 8006a1c:	b083      	sub	sp, #12
 8006a1e:	af00      	add	r7, sp, #0
 8006a20:	6078      	str	r0, [r7, #4]
 8006a22:	460b      	mov	r3, r1
 8006a24:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006a26:	2300      	movs	r3, #0
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	370c      	adds	r7, #12
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bc80      	pop	{r7}
 8006a30:	4770      	bx	lr

08006a32 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006a32:	b480      	push	{r7}
 8006a34:	b083      	sub	sp, #12
 8006a36:	af00      	add	r7, sp, #0
 8006a38:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006a3a:	2300      	movs	r3, #0
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	370c      	adds	r7, #12
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bc80      	pop	{r7}
 8006a44:	4770      	bx	lr

08006a46 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006a46:	b580      	push	{r7, lr}
 8006a48:	b082      	sub	sp, #8
 8006a4a:	af00      	add	r7, sp, #0
 8006a4c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2201      	movs	r2, #1
 8006a52:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	687a      	ldr	r2, [r7, #4]
 8006a60:	6852      	ldr	r2, [r2, #4]
 8006a62:	b2d2      	uxtb	r2, r2
 8006a64:	4611      	mov	r1, r2
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	4798      	blx	r3

  return USBD_OK;
 8006a6a:	2300      	movs	r3, #0
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	3708      	adds	r7, #8
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}

08006a74 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b084      	sub	sp, #16
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
 8006a7c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	781b      	ldrb	r3, [r3, #0]
 8006a86:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006a8a:	2b40      	cmp	r3, #64	@ 0x40
 8006a8c:	d005      	beq.n	8006a9a <USBD_StdDevReq+0x26>
 8006a8e:	2b40      	cmp	r3, #64	@ 0x40
 8006a90:	d84f      	bhi.n	8006b32 <USBD_StdDevReq+0xbe>
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d009      	beq.n	8006aaa <USBD_StdDevReq+0x36>
 8006a96:	2b20      	cmp	r3, #32
 8006a98:	d14b      	bne.n	8006b32 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006aa0:	689b      	ldr	r3, [r3, #8]
 8006aa2:	6839      	ldr	r1, [r7, #0]
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	4798      	blx	r3
      break;
 8006aa8:	e048      	b.n	8006b3c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	785b      	ldrb	r3, [r3, #1]
 8006aae:	2b09      	cmp	r3, #9
 8006ab0:	d839      	bhi.n	8006b26 <USBD_StdDevReq+0xb2>
 8006ab2:	a201      	add	r2, pc, #4	@ (adr r2, 8006ab8 <USBD_StdDevReq+0x44>)
 8006ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ab8:	08006b09 	.word	0x08006b09
 8006abc:	08006b1d 	.word	0x08006b1d
 8006ac0:	08006b27 	.word	0x08006b27
 8006ac4:	08006b13 	.word	0x08006b13
 8006ac8:	08006b27 	.word	0x08006b27
 8006acc:	08006aeb 	.word	0x08006aeb
 8006ad0:	08006ae1 	.word	0x08006ae1
 8006ad4:	08006b27 	.word	0x08006b27
 8006ad8:	08006aff 	.word	0x08006aff
 8006adc:	08006af5 	.word	0x08006af5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006ae0:	6839      	ldr	r1, [r7, #0]
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f000 f9dc 	bl	8006ea0 <USBD_GetDescriptor>
          break;
 8006ae8:	e022      	b.n	8006b30 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006aea:	6839      	ldr	r1, [r7, #0]
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f000 fb3f 	bl	8007170 <USBD_SetAddress>
          break;
 8006af2:	e01d      	b.n	8006b30 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006af4:	6839      	ldr	r1, [r7, #0]
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f000 fb7e 	bl	80071f8 <USBD_SetConfig>
          break;
 8006afc:	e018      	b.n	8006b30 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006afe:	6839      	ldr	r1, [r7, #0]
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f000 fc07 	bl	8007314 <USBD_GetConfig>
          break;
 8006b06:	e013      	b.n	8006b30 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006b08:	6839      	ldr	r1, [r7, #0]
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f000 fc37 	bl	800737e <USBD_GetStatus>
          break;
 8006b10:	e00e      	b.n	8006b30 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006b12:	6839      	ldr	r1, [r7, #0]
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f000 fc65 	bl	80073e4 <USBD_SetFeature>
          break;
 8006b1a:	e009      	b.n	8006b30 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006b1c:	6839      	ldr	r1, [r7, #0]
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f000 fc74 	bl	800740c <USBD_ClrFeature>
          break;
 8006b24:	e004      	b.n	8006b30 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006b26:	6839      	ldr	r1, [r7, #0]
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f000 fcc9 	bl	80074c0 <USBD_CtlError>
          break;
 8006b2e:	bf00      	nop
      }
      break;
 8006b30:	e004      	b.n	8006b3c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8006b32:	6839      	ldr	r1, [r7, #0]
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f000 fcc3 	bl	80074c0 <USBD_CtlError>
      break;
 8006b3a:	bf00      	nop
  }

  return ret;
 8006b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3710      	adds	r7, #16
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}
 8006b46:	bf00      	nop

08006b48 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b084      	sub	sp, #16
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
 8006b50:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b52:	2300      	movs	r3, #0
 8006b54:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	781b      	ldrb	r3, [r3, #0]
 8006b5a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006b5e:	2b40      	cmp	r3, #64	@ 0x40
 8006b60:	d005      	beq.n	8006b6e <USBD_StdItfReq+0x26>
 8006b62:	2b40      	cmp	r3, #64	@ 0x40
 8006b64:	d82e      	bhi.n	8006bc4 <USBD_StdItfReq+0x7c>
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d001      	beq.n	8006b6e <USBD_StdItfReq+0x26>
 8006b6a:	2b20      	cmp	r3, #32
 8006b6c:	d12a      	bne.n	8006bc4 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b74:	3b01      	subs	r3, #1
 8006b76:	2b02      	cmp	r3, #2
 8006b78:	d81d      	bhi.n	8006bb6 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	889b      	ldrh	r3, [r3, #4]
 8006b7e:	b2db      	uxtb	r3, r3
 8006b80:	2b01      	cmp	r3, #1
 8006b82:	d813      	bhi.n	8006bac <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006b8a:	689b      	ldr	r3, [r3, #8]
 8006b8c:	6839      	ldr	r1, [r7, #0]
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	4798      	blx	r3
 8006b92:	4603      	mov	r3, r0
 8006b94:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	88db      	ldrh	r3, [r3, #6]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d110      	bne.n	8006bc0 <USBD_StdItfReq+0x78>
 8006b9e:	7bfb      	ldrb	r3, [r7, #15]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d10d      	bne.n	8006bc0 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f000 fd53 	bl	8007650 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006baa:	e009      	b.n	8006bc0 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8006bac:	6839      	ldr	r1, [r7, #0]
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f000 fc86 	bl	80074c0 <USBD_CtlError>
          break;
 8006bb4:	e004      	b.n	8006bc0 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8006bb6:	6839      	ldr	r1, [r7, #0]
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f000 fc81 	bl	80074c0 <USBD_CtlError>
          break;
 8006bbe:	e000      	b.n	8006bc2 <USBD_StdItfReq+0x7a>
          break;
 8006bc0:	bf00      	nop
      }
      break;
 8006bc2:	e004      	b.n	8006bce <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8006bc4:	6839      	ldr	r1, [r7, #0]
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f000 fc7a 	bl	80074c0 <USBD_CtlError>
      break;
 8006bcc:	bf00      	nop
  }

  return USBD_OK;
 8006bce:	2300      	movs	r3, #0
}
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	3710      	adds	r7, #16
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd80      	pop	{r7, pc}

08006bd8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b084      	sub	sp, #16
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
 8006be0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006be2:	2300      	movs	r3, #0
 8006be4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	889b      	ldrh	r3, [r3, #4]
 8006bea:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	781b      	ldrb	r3, [r3, #0]
 8006bf0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006bf4:	2b40      	cmp	r3, #64	@ 0x40
 8006bf6:	d007      	beq.n	8006c08 <USBD_StdEPReq+0x30>
 8006bf8:	2b40      	cmp	r3, #64	@ 0x40
 8006bfa:	f200 8146 	bhi.w	8006e8a <USBD_StdEPReq+0x2b2>
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d00a      	beq.n	8006c18 <USBD_StdEPReq+0x40>
 8006c02:	2b20      	cmp	r3, #32
 8006c04:	f040 8141 	bne.w	8006e8a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c0e:	689b      	ldr	r3, [r3, #8]
 8006c10:	6839      	ldr	r1, [r7, #0]
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	4798      	blx	r3
      break;
 8006c16:	e13d      	b.n	8006e94 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	781b      	ldrb	r3, [r3, #0]
 8006c1c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006c20:	2b20      	cmp	r3, #32
 8006c22:	d10a      	bne.n	8006c3a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c2a:	689b      	ldr	r3, [r3, #8]
 8006c2c:	6839      	ldr	r1, [r7, #0]
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	4798      	blx	r3
 8006c32:	4603      	mov	r3, r0
 8006c34:	73fb      	strb	r3, [r7, #15]

        return ret;
 8006c36:	7bfb      	ldrb	r3, [r7, #15]
 8006c38:	e12d      	b.n	8006e96 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	785b      	ldrb	r3, [r3, #1]
 8006c3e:	2b03      	cmp	r3, #3
 8006c40:	d007      	beq.n	8006c52 <USBD_StdEPReq+0x7a>
 8006c42:	2b03      	cmp	r3, #3
 8006c44:	f300 811b 	bgt.w	8006e7e <USBD_StdEPReq+0x2a6>
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d072      	beq.n	8006d32 <USBD_StdEPReq+0x15a>
 8006c4c:	2b01      	cmp	r3, #1
 8006c4e:	d03a      	beq.n	8006cc6 <USBD_StdEPReq+0xee>
 8006c50:	e115      	b.n	8006e7e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c58:	2b02      	cmp	r3, #2
 8006c5a:	d002      	beq.n	8006c62 <USBD_StdEPReq+0x8a>
 8006c5c:	2b03      	cmp	r3, #3
 8006c5e:	d015      	beq.n	8006c8c <USBD_StdEPReq+0xb4>
 8006c60:	e02b      	b.n	8006cba <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006c62:	7bbb      	ldrb	r3, [r7, #14]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d00c      	beq.n	8006c82 <USBD_StdEPReq+0xaa>
 8006c68:	7bbb      	ldrb	r3, [r7, #14]
 8006c6a:	2b80      	cmp	r3, #128	@ 0x80
 8006c6c:	d009      	beq.n	8006c82 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006c6e:	7bbb      	ldrb	r3, [r7, #14]
 8006c70:	4619      	mov	r1, r3
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f001 f8b8 	bl	8007de8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006c78:	2180      	movs	r1, #128	@ 0x80
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f001 f8b4 	bl	8007de8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006c80:	e020      	b.n	8006cc4 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8006c82:	6839      	ldr	r1, [r7, #0]
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f000 fc1b 	bl	80074c0 <USBD_CtlError>
              break;
 8006c8a:	e01b      	b.n	8006cc4 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	885b      	ldrh	r3, [r3, #2]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d10e      	bne.n	8006cb2 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8006c94:	7bbb      	ldrb	r3, [r7, #14]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d00b      	beq.n	8006cb2 <USBD_StdEPReq+0xda>
 8006c9a:	7bbb      	ldrb	r3, [r7, #14]
 8006c9c:	2b80      	cmp	r3, #128	@ 0x80
 8006c9e:	d008      	beq.n	8006cb2 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	88db      	ldrh	r3, [r3, #6]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d104      	bne.n	8006cb2 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006ca8:	7bbb      	ldrb	r3, [r7, #14]
 8006caa:	4619      	mov	r1, r3
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f001 f89b 	bl	8007de8 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f000 fccc 	bl	8007650 <USBD_CtlSendStatus>

              break;
 8006cb8:	e004      	b.n	8006cc4 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8006cba:	6839      	ldr	r1, [r7, #0]
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	f000 fbff 	bl	80074c0 <USBD_CtlError>
              break;
 8006cc2:	bf00      	nop
          }
          break;
 8006cc4:	e0e0      	b.n	8006e88 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ccc:	2b02      	cmp	r3, #2
 8006cce:	d002      	beq.n	8006cd6 <USBD_StdEPReq+0xfe>
 8006cd0:	2b03      	cmp	r3, #3
 8006cd2:	d015      	beq.n	8006d00 <USBD_StdEPReq+0x128>
 8006cd4:	e026      	b.n	8006d24 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006cd6:	7bbb      	ldrb	r3, [r7, #14]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d00c      	beq.n	8006cf6 <USBD_StdEPReq+0x11e>
 8006cdc:	7bbb      	ldrb	r3, [r7, #14]
 8006cde:	2b80      	cmp	r3, #128	@ 0x80
 8006ce0:	d009      	beq.n	8006cf6 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006ce2:	7bbb      	ldrb	r3, [r7, #14]
 8006ce4:	4619      	mov	r1, r3
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f001 f87e 	bl	8007de8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006cec:	2180      	movs	r1, #128	@ 0x80
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f001 f87a 	bl	8007de8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006cf4:	e01c      	b.n	8006d30 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8006cf6:	6839      	ldr	r1, [r7, #0]
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f000 fbe1 	bl	80074c0 <USBD_CtlError>
              break;
 8006cfe:	e017      	b.n	8006d30 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	885b      	ldrh	r3, [r3, #2]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d112      	bne.n	8006d2e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006d08:	7bbb      	ldrb	r3, [r7, #14]
 8006d0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d004      	beq.n	8006d1c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006d12:	7bbb      	ldrb	r3, [r7, #14]
 8006d14:	4619      	mov	r1, r3
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f001 f885 	bl	8007e26 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f000 fc97 	bl	8007650 <USBD_CtlSendStatus>
              }
              break;
 8006d22:	e004      	b.n	8006d2e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8006d24:	6839      	ldr	r1, [r7, #0]
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f000 fbca 	bl	80074c0 <USBD_CtlError>
              break;
 8006d2c:	e000      	b.n	8006d30 <USBD_StdEPReq+0x158>
              break;
 8006d2e:	bf00      	nop
          }
          break;
 8006d30:	e0aa      	b.n	8006e88 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d38:	2b02      	cmp	r3, #2
 8006d3a:	d002      	beq.n	8006d42 <USBD_StdEPReq+0x16a>
 8006d3c:	2b03      	cmp	r3, #3
 8006d3e:	d032      	beq.n	8006da6 <USBD_StdEPReq+0x1ce>
 8006d40:	e097      	b.n	8006e72 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006d42:	7bbb      	ldrb	r3, [r7, #14]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d007      	beq.n	8006d58 <USBD_StdEPReq+0x180>
 8006d48:	7bbb      	ldrb	r3, [r7, #14]
 8006d4a:	2b80      	cmp	r3, #128	@ 0x80
 8006d4c:	d004      	beq.n	8006d58 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8006d4e:	6839      	ldr	r1, [r7, #0]
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f000 fbb5 	bl	80074c0 <USBD_CtlError>
                break;
 8006d56:	e091      	b.n	8006e7c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	da0b      	bge.n	8006d78 <USBD_StdEPReq+0x1a0>
 8006d60:	7bbb      	ldrb	r3, [r7, #14]
 8006d62:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006d66:	4613      	mov	r3, r2
 8006d68:	009b      	lsls	r3, r3, #2
 8006d6a:	4413      	add	r3, r2
 8006d6c:	009b      	lsls	r3, r3, #2
 8006d6e:	3310      	adds	r3, #16
 8006d70:	687a      	ldr	r2, [r7, #4]
 8006d72:	4413      	add	r3, r2
 8006d74:	3304      	adds	r3, #4
 8006d76:	e00b      	b.n	8006d90 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006d78:	7bbb      	ldrb	r3, [r7, #14]
 8006d7a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d7e:	4613      	mov	r3, r2
 8006d80:	009b      	lsls	r3, r3, #2
 8006d82:	4413      	add	r3, r2
 8006d84:	009b      	lsls	r3, r3, #2
 8006d86:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006d8a:	687a      	ldr	r2, [r7, #4]
 8006d8c:	4413      	add	r3, r2
 8006d8e:	3304      	adds	r3, #4
 8006d90:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	2200      	movs	r2, #0
 8006d96:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	2202      	movs	r2, #2
 8006d9c:	4619      	mov	r1, r3
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f000 fbf8 	bl	8007594 <USBD_CtlSendData>
              break;
 8006da4:	e06a      	b.n	8006e7c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006da6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	da11      	bge.n	8006dd2 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006dae:	7bbb      	ldrb	r3, [r7, #14]
 8006db0:	f003 020f 	and.w	r2, r3, #15
 8006db4:	6879      	ldr	r1, [r7, #4]
 8006db6:	4613      	mov	r3, r2
 8006db8:	009b      	lsls	r3, r3, #2
 8006dba:	4413      	add	r3, r2
 8006dbc:	009b      	lsls	r3, r3, #2
 8006dbe:	440b      	add	r3, r1
 8006dc0:	3318      	adds	r3, #24
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d117      	bne.n	8006df8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8006dc8:	6839      	ldr	r1, [r7, #0]
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f000 fb78 	bl	80074c0 <USBD_CtlError>
                  break;
 8006dd0:	e054      	b.n	8006e7c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006dd2:	7bbb      	ldrb	r3, [r7, #14]
 8006dd4:	f003 020f 	and.w	r2, r3, #15
 8006dd8:	6879      	ldr	r1, [r7, #4]
 8006dda:	4613      	mov	r3, r2
 8006ddc:	009b      	lsls	r3, r3, #2
 8006dde:	4413      	add	r3, r2
 8006de0:	009b      	lsls	r3, r3, #2
 8006de2:	440b      	add	r3, r1
 8006de4:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d104      	bne.n	8006df8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8006dee:	6839      	ldr	r1, [r7, #0]
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f000 fb65 	bl	80074c0 <USBD_CtlError>
                  break;
 8006df6:	e041      	b.n	8006e7c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006df8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	da0b      	bge.n	8006e18 <USBD_StdEPReq+0x240>
 8006e00:	7bbb      	ldrb	r3, [r7, #14]
 8006e02:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006e06:	4613      	mov	r3, r2
 8006e08:	009b      	lsls	r3, r3, #2
 8006e0a:	4413      	add	r3, r2
 8006e0c:	009b      	lsls	r3, r3, #2
 8006e0e:	3310      	adds	r3, #16
 8006e10:	687a      	ldr	r2, [r7, #4]
 8006e12:	4413      	add	r3, r2
 8006e14:	3304      	adds	r3, #4
 8006e16:	e00b      	b.n	8006e30 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006e18:	7bbb      	ldrb	r3, [r7, #14]
 8006e1a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e1e:	4613      	mov	r3, r2
 8006e20:	009b      	lsls	r3, r3, #2
 8006e22:	4413      	add	r3, r2
 8006e24:	009b      	lsls	r3, r3, #2
 8006e26:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006e2a:	687a      	ldr	r2, [r7, #4]
 8006e2c:	4413      	add	r3, r2
 8006e2e:	3304      	adds	r3, #4
 8006e30:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006e32:	7bbb      	ldrb	r3, [r7, #14]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d002      	beq.n	8006e3e <USBD_StdEPReq+0x266>
 8006e38:	7bbb      	ldrb	r3, [r7, #14]
 8006e3a:	2b80      	cmp	r3, #128	@ 0x80
 8006e3c:	d103      	bne.n	8006e46 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	2200      	movs	r2, #0
 8006e42:	601a      	str	r2, [r3, #0]
 8006e44:	e00e      	b.n	8006e64 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006e46:	7bbb      	ldrb	r3, [r7, #14]
 8006e48:	4619      	mov	r1, r3
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f001 f80a 	bl	8007e64 <USBD_LL_IsStallEP>
 8006e50:	4603      	mov	r3, r0
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d003      	beq.n	8006e5e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	2201      	movs	r2, #1
 8006e5a:	601a      	str	r2, [r3, #0]
 8006e5c:	e002      	b.n	8006e64 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	2200      	movs	r2, #0
 8006e62:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	2202      	movs	r2, #2
 8006e68:	4619      	mov	r1, r3
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f000 fb92 	bl	8007594 <USBD_CtlSendData>
              break;
 8006e70:	e004      	b.n	8006e7c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8006e72:	6839      	ldr	r1, [r7, #0]
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f000 fb23 	bl	80074c0 <USBD_CtlError>
              break;
 8006e7a:	bf00      	nop
          }
          break;
 8006e7c:	e004      	b.n	8006e88 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8006e7e:	6839      	ldr	r1, [r7, #0]
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f000 fb1d 	bl	80074c0 <USBD_CtlError>
          break;
 8006e86:	bf00      	nop
      }
      break;
 8006e88:	e004      	b.n	8006e94 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8006e8a:	6839      	ldr	r1, [r7, #0]
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f000 fb17 	bl	80074c0 <USBD_CtlError>
      break;
 8006e92:	bf00      	nop
  }

  return ret;
 8006e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	3710      	adds	r7, #16
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}
	...

08006ea0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b084      	sub	sp, #16
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
 8006ea8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	885b      	ldrh	r3, [r3, #2]
 8006eba:	0a1b      	lsrs	r3, r3, #8
 8006ebc:	b29b      	uxth	r3, r3
 8006ebe:	3b01      	subs	r3, #1
 8006ec0:	2b06      	cmp	r3, #6
 8006ec2:	f200 8128 	bhi.w	8007116 <USBD_GetDescriptor+0x276>
 8006ec6:	a201      	add	r2, pc, #4	@ (adr r2, 8006ecc <USBD_GetDescriptor+0x2c>)
 8006ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ecc:	08006ee9 	.word	0x08006ee9
 8006ed0:	08006f01 	.word	0x08006f01
 8006ed4:	08006f41 	.word	0x08006f41
 8006ed8:	08007117 	.word	0x08007117
 8006edc:	08007117 	.word	0x08007117
 8006ee0:	080070b7 	.word	0x080070b7
 8006ee4:	080070e3 	.word	0x080070e3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	687a      	ldr	r2, [r7, #4]
 8006ef2:	7c12      	ldrb	r2, [r2, #16]
 8006ef4:	f107 0108 	add.w	r1, r7, #8
 8006ef8:	4610      	mov	r0, r2
 8006efa:	4798      	blx	r3
 8006efc:	60f8      	str	r0, [r7, #12]
      break;
 8006efe:	e112      	b.n	8007126 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	7c1b      	ldrb	r3, [r3, #16]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d10d      	bne.n	8006f24 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f10:	f107 0208 	add.w	r2, r7, #8
 8006f14:	4610      	mov	r0, r2
 8006f16:	4798      	blx	r3
 8006f18:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	3301      	adds	r3, #1
 8006f1e:	2202      	movs	r2, #2
 8006f20:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006f22:	e100      	b.n	8007126 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f2c:	f107 0208 	add.w	r2, r7, #8
 8006f30:	4610      	mov	r0, r2
 8006f32:	4798      	blx	r3
 8006f34:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	3301      	adds	r3, #1
 8006f3a:	2202      	movs	r2, #2
 8006f3c:	701a      	strb	r2, [r3, #0]
      break;
 8006f3e:	e0f2      	b.n	8007126 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	885b      	ldrh	r3, [r3, #2]
 8006f44:	b2db      	uxtb	r3, r3
 8006f46:	2b05      	cmp	r3, #5
 8006f48:	f200 80ac 	bhi.w	80070a4 <USBD_GetDescriptor+0x204>
 8006f4c:	a201      	add	r2, pc, #4	@ (adr r2, 8006f54 <USBD_GetDescriptor+0xb4>)
 8006f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f52:	bf00      	nop
 8006f54:	08006f6d 	.word	0x08006f6d
 8006f58:	08006fa1 	.word	0x08006fa1
 8006f5c:	08006fd5 	.word	0x08006fd5
 8006f60:	08007009 	.word	0x08007009
 8006f64:	0800703d 	.word	0x0800703d
 8006f68:	08007071 	.word	0x08007071
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006f72:	685b      	ldr	r3, [r3, #4]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d00b      	beq.n	8006f90 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	687a      	ldr	r2, [r7, #4]
 8006f82:	7c12      	ldrb	r2, [r2, #16]
 8006f84:	f107 0108 	add.w	r1, r7, #8
 8006f88:	4610      	mov	r0, r2
 8006f8a:	4798      	blx	r3
 8006f8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f8e:	e091      	b.n	80070b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f90:	6839      	ldr	r1, [r7, #0]
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f000 fa94 	bl	80074c0 <USBD_CtlError>
            err++;
 8006f98:	7afb      	ldrb	r3, [r7, #11]
 8006f9a:	3301      	adds	r3, #1
 8006f9c:	72fb      	strb	r3, [r7, #11]
          break;
 8006f9e:	e089      	b.n	80070b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006fa6:	689b      	ldr	r3, [r3, #8]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d00b      	beq.n	8006fc4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006fb2:	689b      	ldr	r3, [r3, #8]
 8006fb4:	687a      	ldr	r2, [r7, #4]
 8006fb6:	7c12      	ldrb	r2, [r2, #16]
 8006fb8:	f107 0108 	add.w	r1, r7, #8
 8006fbc:	4610      	mov	r0, r2
 8006fbe:	4798      	blx	r3
 8006fc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006fc2:	e077      	b.n	80070b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006fc4:	6839      	ldr	r1, [r7, #0]
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f000 fa7a 	bl	80074c0 <USBD_CtlError>
            err++;
 8006fcc:	7afb      	ldrb	r3, [r7, #11]
 8006fce:	3301      	adds	r3, #1
 8006fd0:	72fb      	strb	r3, [r7, #11]
          break;
 8006fd2:	e06f      	b.n	80070b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006fda:	68db      	ldr	r3, [r3, #12]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d00b      	beq.n	8006ff8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006fe6:	68db      	ldr	r3, [r3, #12]
 8006fe8:	687a      	ldr	r2, [r7, #4]
 8006fea:	7c12      	ldrb	r2, [r2, #16]
 8006fec:	f107 0108 	add.w	r1, r7, #8
 8006ff0:	4610      	mov	r0, r2
 8006ff2:	4798      	blx	r3
 8006ff4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ff6:	e05d      	b.n	80070b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ff8:	6839      	ldr	r1, [r7, #0]
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f000 fa60 	bl	80074c0 <USBD_CtlError>
            err++;
 8007000:	7afb      	ldrb	r3, [r7, #11]
 8007002:	3301      	adds	r3, #1
 8007004:	72fb      	strb	r3, [r7, #11]
          break;
 8007006:	e055      	b.n	80070b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800700e:	691b      	ldr	r3, [r3, #16]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d00b      	beq.n	800702c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800701a:	691b      	ldr	r3, [r3, #16]
 800701c:	687a      	ldr	r2, [r7, #4]
 800701e:	7c12      	ldrb	r2, [r2, #16]
 8007020:	f107 0108 	add.w	r1, r7, #8
 8007024:	4610      	mov	r0, r2
 8007026:	4798      	blx	r3
 8007028:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800702a:	e043      	b.n	80070b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800702c:	6839      	ldr	r1, [r7, #0]
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f000 fa46 	bl	80074c0 <USBD_CtlError>
            err++;
 8007034:	7afb      	ldrb	r3, [r7, #11]
 8007036:	3301      	adds	r3, #1
 8007038:	72fb      	strb	r3, [r7, #11]
          break;
 800703a:	e03b      	b.n	80070b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007042:	695b      	ldr	r3, [r3, #20]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d00b      	beq.n	8007060 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800704e:	695b      	ldr	r3, [r3, #20]
 8007050:	687a      	ldr	r2, [r7, #4]
 8007052:	7c12      	ldrb	r2, [r2, #16]
 8007054:	f107 0108 	add.w	r1, r7, #8
 8007058:	4610      	mov	r0, r2
 800705a:	4798      	blx	r3
 800705c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800705e:	e029      	b.n	80070b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007060:	6839      	ldr	r1, [r7, #0]
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f000 fa2c 	bl	80074c0 <USBD_CtlError>
            err++;
 8007068:	7afb      	ldrb	r3, [r7, #11]
 800706a:	3301      	adds	r3, #1
 800706c:	72fb      	strb	r3, [r7, #11]
          break;
 800706e:	e021      	b.n	80070b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007076:	699b      	ldr	r3, [r3, #24]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d00b      	beq.n	8007094 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007082:	699b      	ldr	r3, [r3, #24]
 8007084:	687a      	ldr	r2, [r7, #4]
 8007086:	7c12      	ldrb	r2, [r2, #16]
 8007088:	f107 0108 	add.w	r1, r7, #8
 800708c:	4610      	mov	r0, r2
 800708e:	4798      	blx	r3
 8007090:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007092:	e00f      	b.n	80070b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007094:	6839      	ldr	r1, [r7, #0]
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f000 fa12 	bl	80074c0 <USBD_CtlError>
            err++;
 800709c:	7afb      	ldrb	r3, [r7, #11]
 800709e:	3301      	adds	r3, #1
 80070a0:	72fb      	strb	r3, [r7, #11]
          break;
 80070a2:	e007      	b.n	80070b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80070a4:	6839      	ldr	r1, [r7, #0]
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f000 fa0a 	bl	80074c0 <USBD_CtlError>
          err++;
 80070ac:	7afb      	ldrb	r3, [r7, #11]
 80070ae:	3301      	adds	r3, #1
 80070b0:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80070b2:	e038      	b.n	8007126 <USBD_GetDescriptor+0x286>
 80070b4:	e037      	b.n	8007126 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	7c1b      	ldrb	r3, [r3, #16]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d109      	bne.n	80070d2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80070c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070c6:	f107 0208 	add.w	r2, r7, #8
 80070ca:	4610      	mov	r0, r2
 80070cc:	4798      	blx	r3
 80070ce:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80070d0:	e029      	b.n	8007126 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80070d2:	6839      	ldr	r1, [r7, #0]
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f000 f9f3 	bl	80074c0 <USBD_CtlError>
        err++;
 80070da:	7afb      	ldrb	r3, [r7, #11]
 80070dc:	3301      	adds	r3, #1
 80070de:	72fb      	strb	r3, [r7, #11]
      break;
 80070e0:	e021      	b.n	8007126 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	7c1b      	ldrb	r3, [r3, #16]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d10d      	bne.n	8007106 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80070f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070f2:	f107 0208 	add.w	r2, r7, #8
 80070f6:	4610      	mov	r0, r2
 80070f8:	4798      	blx	r3
 80070fa:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	3301      	adds	r3, #1
 8007100:	2207      	movs	r2, #7
 8007102:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007104:	e00f      	b.n	8007126 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007106:	6839      	ldr	r1, [r7, #0]
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f000 f9d9 	bl	80074c0 <USBD_CtlError>
        err++;
 800710e:	7afb      	ldrb	r3, [r7, #11]
 8007110:	3301      	adds	r3, #1
 8007112:	72fb      	strb	r3, [r7, #11]
      break;
 8007114:	e007      	b.n	8007126 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007116:	6839      	ldr	r1, [r7, #0]
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f000 f9d1 	bl	80074c0 <USBD_CtlError>
      err++;
 800711e:	7afb      	ldrb	r3, [r7, #11]
 8007120:	3301      	adds	r3, #1
 8007122:	72fb      	strb	r3, [r7, #11]
      break;
 8007124:	bf00      	nop
  }

  if (err != 0U)
 8007126:	7afb      	ldrb	r3, [r7, #11]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d11c      	bne.n	8007166 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800712c:	893b      	ldrh	r3, [r7, #8]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d011      	beq.n	8007156 <USBD_GetDescriptor+0x2b6>
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	88db      	ldrh	r3, [r3, #6]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d00d      	beq.n	8007156 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	88da      	ldrh	r2, [r3, #6]
 800713e:	893b      	ldrh	r3, [r7, #8]
 8007140:	4293      	cmp	r3, r2
 8007142:	bf28      	it	cs
 8007144:	4613      	movcs	r3, r2
 8007146:	b29b      	uxth	r3, r3
 8007148:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800714a:	893b      	ldrh	r3, [r7, #8]
 800714c:	461a      	mov	r2, r3
 800714e:	68f9      	ldr	r1, [r7, #12]
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f000 fa1f 	bl	8007594 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	88db      	ldrh	r3, [r3, #6]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d104      	bne.n	8007168 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f000 fa76 	bl	8007650 <USBD_CtlSendStatus>
 8007164:	e000      	b.n	8007168 <USBD_GetDescriptor+0x2c8>
    return;
 8007166:	bf00      	nop
    }
  }
}
 8007168:	3710      	adds	r7, #16
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}
 800716e:	bf00      	nop

08007170 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b084      	sub	sp, #16
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
 8007178:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	889b      	ldrh	r3, [r3, #4]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d130      	bne.n	80071e4 <USBD_SetAddress+0x74>
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	88db      	ldrh	r3, [r3, #6]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d12c      	bne.n	80071e4 <USBD_SetAddress+0x74>
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	885b      	ldrh	r3, [r3, #2]
 800718e:	2b7f      	cmp	r3, #127	@ 0x7f
 8007190:	d828      	bhi.n	80071e4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	885b      	ldrh	r3, [r3, #2]
 8007196:	b2db      	uxtb	r3, r3
 8007198:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800719c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80071a4:	2b03      	cmp	r3, #3
 80071a6:	d104      	bne.n	80071b2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80071a8:	6839      	ldr	r1, [r7, #0]
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f000 f988 	bl	80074c0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071b0:	e01d      	b.n	80071ee <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	7bfa      	ldrb	r2, [r7, #15]
 80071b6:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80071ba:	7bfb      	ldrb	r3, [r7, #15]
 80071bc:	4619      	mov	r1, r3
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f000 fe7b 	bl	8007eba <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f000 fa43 	bl	8007650 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80071ca:	7bfb      	ldrb	r3, [r7, #15]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d004      	beq.n	80071da <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2202      	movs	r2, #2
 80071d4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071d8:	e009      	b.n	80071ee <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2201      	movs	r2, #1
 80071de:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071e2:	e004      	b.n	80071ee <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80071e4:	6839      	ldr	r1, [r7, #0]
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f000 f96a 	bl	80074c0 <USBD_CtlError>
  }
}
 80071ec:	bf00      	nop
 80071ee:	bf00      	nop
 80071f0:	3710      	adds	r7, #16
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}
	...

080071f8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b082      	sub	sp, #8
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
 8007200:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	885b      	ldrh	r3, [r3, #2]
 8007206:	b2da      	uxtb	r2, r3
 8007208:	4b41      	ldr	r3, [pc, #260]	@ (8007310 <USBD_SetConfig+0x118>)
 800720a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800720c:	4b40      	ldr	r3, [pc, #256]	@ (8007310 <USBD_SetConfig+0x118>)
 800720e:	781b      	ldrb	r3, [r3, #0]
 8007210:	2b01      	cmp	r3, #1
 8007212:	d904      	bls.n	800721e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007214:	6839      	ldr	r1, [r7, #0]
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f000 f952 	bl	80074c0 <USBD_CtlError>
 800721c:	e075      	b.n	800730a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007224:	2b02      	cmp	r3, #2
 8007226:	d002      	beq.n	800722e <USBD_SetConfig+0x36>
 8007228:	2b03      	cmp	r3, #3
 800722a:	d023      	beq.n	8007274 <USBD_SetConfig+0x7c>
 800722c:	e062      	b.n	80072f4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800722e:	4b38      	ldr	r3, [pc, #224]	@ (8007310 <USBD_SetConfig+0x118>)
 8007230:	781b      	ldrb	r3, [r3, #0]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d01a      	beq.n	800726c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007236:	4b36      	ldr	r3, [pc, #216]	@ (8007310 <USBD_SetConfig+0x118>)
 8007238:	781b      	ldrb	r3, [r3, #0]
 800723a:	461a      	mov	r2, r3
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2203      	movs	r2, #3
 8007244:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007248:	4b31      	ldr	r3, [pc, #196]	@ (8007310 <USBD_SetConfig+0x118>)
 800724a:	781b      	ldrb	r3, [r3, #0]
 800724c:	4619      	mov	r1, r3
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f7ff f9af 	bl	80065b2 <USBD_SetClassConfig>
 8007254:	4603      	mov	r3, r0
 8007256:	2b02      	cmp	r3, #2
 8007258:	d104      	bne.n	8007264 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800725a:	6839      	ldr	r1, [r7, #0]
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f000 f92f 	bl	80074c0 <USBD_CtlError>
            return;
 8007262:	e052      	b.n	800730a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f000 f9f3 	bl	8007650 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800726a:	e04e      	b.n	800730a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f000 f9ef 	bl	8007650 <USBD_CtlSendStatus>
        break;
 8007272:	e04a      	b.n	800730a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007274:	4b26      	ldr	r3, [pc, #152]	@ (8007310 <USBD_SetConfig+0x118>)
 8007276:	781b      	ldrb	r3, [r3, #0]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d112      	bne.n	80072a2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2202      	movs	r2, #2
 8007280:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8007284:	4b22      	ldr	r3, [pc, #136]	@ (8007310 <USBD_SetConfig+0x118>)
 8007286:	781b      	ldrb	r3, [r3, #0]
 8007288:	461a      	mov	r2, r3
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800728e:	4b20      	ldr	r3, [pc, #128]	@ (8007310 <USBD_SetConfig+0x118>)
 8007290:	781b      	ldrb	r3, [r3, #0]
 8007292:	4619      	mov	r1, r3
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f7ff f9ab 	bl	80065f0 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f000 f9d8 	bl	8007650 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80072a0:	e033      	b.n	800730a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80072a2:	4b1b      	ldr	r3, [pc, #108]	@ (8007310 <USBD_SetConfig+0x118>)
 80072a4:	781b      	ldrb	r3, [r3, #0]
 80072a6:	461a      	mov	r2, r3
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	685b      	ldr	r3, [r3, #4]
 80072ac:	429a      	cmp	r2, r3
 80072ae:	d01d      	beq.n	80072ec <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	685b      	ldr	r3, [r3, #4]
 80072b4:	b2db      	uxtb	r3, r3
 80072b6:	4619      	mov	r1, r3
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f7ff f999 	bl	80065f0 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80072be:	4b14      	ldr	r3, [pc, #80]	@ (8007310 <USBD_SetConfig+0x118>)
 80072c0:	781b      	ldrb	r3, [r3, #0]
 80072c2:	461a      	mov	r2, r3
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80072c8:	4b11      	ldr	r3, [pc, #68]	@ (8007310 <USBD_SetConfig+0x118>)
 80072ca:	781b      	ldrb	r3, [r3, #0]
 80072cc:	4619      	mov	r1, r3
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f7ff f96f 	bl	80065b2 <USBD_SetClassConfig>
 80072d4:	4603      	mov	r3, r0
 80072d6:	2b02      	cmp	r3, #2
 80072d8:	d104      	bne.n	80072e4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80072da:	6839      	ldr	r1, [r7, #0]
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f000 f8ef 	bl	80074c0 <USBD_CtlError>
            return;
 80072e2:	e012      	b.n	800730a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f000 f9b3 	bl	8007650 <USBD_CtlSendStatus>
        break;
 80072ea:	e00e      	b.n	800730a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f000 f9af 	bl	8007650 <USBD_CtlSendStatus>
        break;
 80072f2:	e00a      	b.n	800730a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80072f4:	6839      	ldr	r1, [r7, #0]
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f000 f8e2 	bl	80074c0 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80072fc:	4b04      	ldr	r3, [pc, #16]	@ (8007310 <USBD_SetConfig+0x118>)
 80072fe:	781b      	ldrb	r3, [r3, #0]
 8007300:	4619      	mov	r1, r3
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f7ff f974 	bl	80065f0 <USBD_ClrClassConfig>
        break;
 8007308:	bf00      	nop
    }
  }
}
 800730a:	3708      	adds	r7, #8
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}
 8007310:	20000450 	.word	0x20000450

08007314 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b082      	sub	sp, #8
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	88db      	ldrh	r3, [r3, #6]
 8007322:	2b01      	cmp	r3, #1
 8007324:	d004      	beq.n	8007330 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007326:	6839      	ldr	r1, [r7, #0]
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	f000 f8c9 	bl	80074c0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800732e:	e022      	b.n	8007376 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007336:	2b02      	cmp	r3, #2
 8007338:	dc02      	bgt.n	8007340 <USBD_GetConfig+0x2c>
 800733a:	2b00      	cmp	r3, #0
 800733c:	dc03      	bgt.n	8007346 <USBD_GetConfig+0x32>
 800733e:	e015      	b.n	800736c <USBD_GetConfig+0x58>
 8007340:	2b03      	cmp	r3, #3
 8007342:	d00b      	beq.n	800735c <USBD_GetConfig+0x48>
 8007344:	e012      	b.n	800736c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2200      	movs	r2, #0
 800734a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	3308      	adds	r3, #8
 8007350:	2201      	movs	r2, #1
 8007352:	4619      	mov	r1, r3
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f000 f91d 	bl	8007594 <USBD_CtlSendData>
        break;
 800735a:	e00c      	b.n	8007376 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	3304      	adds	r3, #4
 8007360:	2201      	movs	r2, #1
 8007362:	4619      	mov	r1, r3
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f000 f915 	bl	8007594 <USBD_CtlSendData>
        break;
 800736a:	e004      	b.n	8007376 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800736c:	6839      	ldr	r1, [r7, #0]
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f000 f8a6 	bl	80074c0 <USBD_CtlError>
        break;
 8007374:	bf00      	nop
}
 8007376:	bf00      	nop
 8007378:	3708      	adds	r7, #8
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}

0800737e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800737e:	b580      	push	{r7, lr}
 8007380:	b082      	sub	sp, #8
 8007382:	af00      	add	r7, sp, #0
 8007384:	6078      	str	r0, [r7, #4]
 8007386:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800738e:	3b01      	subs	r3, #1
 8007390:	2b02      	cmp	r3, #2
 8007392:	d81e      	bhi.n	80073d2 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	88db      	ldrh	r3, [r3, #6]
 8007398:	2b02      	cmp	r3, #2
 800739a:	d004      	beq.n	80073a6 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800739c:	6839      	ldr	r1, [r7, #0]
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f000 f88e 	bl	80074c0 <USBD_CtlError>
        break;
 80073a4:	e01a      	b.n	80073dc <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2201      	movs	r2, #1
 80073aa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d005      	beq.n	80073c2 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	68db      	ldr	r3, [r3, #12]
 80073ba:	f043 0202 	orr.w	r2, r3, #2
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	330c      	adds	r3, #12
 80073c6:	2202      	movs	r2, #2
 80073c8:	4619      	mov	r1, r3
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f000 f8e2 	bl	8007594 <USBD_CtlSendData>
      break;
 80073d0:	e004      	b.n	80073dc <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80073d2:	6839      	ldr	r1, [r7, #0]
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f000 f873 	bl	80074c0 <USBD_CtlError>
      break;
 80073da:	bf00      	nop
  }
}
 80073dc:	bf00      	nop
 80073de:	3708      	adds	r7, #8
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}

080073e4 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b082      	sub	sp, #8
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
 80073ec:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	885b      	ldrh	r3, [r3, #2]
 80073f2:	2b01      	cmp	r3, #1
 80073f4:	d106      	bne.n	8007404 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2201      	movs	r2, #1
 80073fa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f000 f926 	bl	8007650 <USBD_CtlSendStatus>
  }
}
 8007404:	bf00      	nop
 8007406:	3708      	adds	r7, #8
 8007408:	46bd      	mov	sp, r7
 800740a:	bd80      	pop	{r7, pc}

0800740c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b082      	sub	sp, #8
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
 8007414:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800741c:	3b01      	subs	r3, #1
 800741e:	2b02      	cmp	r3, #2
 8007420:	d80b      	bhi.n	800743a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	885b      	ldrh	r3, [r3, #2]
 8007426:	2b01      	cmp	r3, #1
 8007428:	d10c      	bne.n	8007444 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2200      	movs	r2, #0
 800742e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f000 f90c 	bl	8007650 <USBD_CtlSendStatus>
      }
      break;
 8007438:	e004      	b.n	8007444 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800743a:	6839      	ldr	r1, [r7, #0]
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f000 f83f 	bl	80074c0 <USBD_CtlError>
      break;
 8007442:	e000      	b.n	8007446 <USBD_ClrFeature+0x3a>
      break;
 8007444:	bf00      	nop
  }
}
 8007446:	bf00      	nop
 8007448:	3708      	adds	r7, #8
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}

0800744e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800744e:	b480      	push	{r7}
 8007450:	b083      	sub	sp, #12
 8007452:	af00      	add	r7, sp, #0
 8007454:	6078      	str	r0, [r7, #4]
 8007456:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	781a      	ldrb	r2, [r3, #0]
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	785a      	ldrb	r2, [r3, #1]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	3302      	adds	r3, #2
 800746c:	781b      	ldrb	r3, [r3, #0]
 800746e:	461a      	mov	r2, r3
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	3303      	adds	r3, #3
 8007474:	781b      	ldrb	r3, [r3, #0]
 8007476:	021b      	lsls	r3, r3, #8
 8007478:	b29b      	uxth	r3, r3
 800747a:	4413      	add	r3, r2
 800747c:	b29a      	uxth	r2, r3
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	3304      	adds	r3, #4
 8007486:	781b      	ldrb	r3, [r3, #0]
 8007488:	461a      	mov	r2, r3
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	3305      	adds	r3, #5
 800748e:	781b      	ldrb	r3, [r3, #0]
 8007490:	021b      	lsls	r3, r3, #8
 8007492:	b29b      	uxth	r3, r3
 8007494:	4413      	add	r3, r2
 8007496:	b29a      	uxth	r2, r3
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	3306      	adds	r3, #6
 80074a0:	781b      	ldrb	r3, [r3, #0]
 80074a2:	461a      	mov	r2, r3
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	3307      	adds	r3, #7
 80074a8:	781b      	ldrb	r3, [r3, #0]
 80074aa:	021b      	lsls	r3, r3, #8
 80074ac:	b29b      	uxth	r3, r3
 80074ae:	4413      	add	r3, r2
 80074b0:	b29a      	uxth	r2, r3
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	80da      	strh	r2, [r3, #6]

}
 80074b6:	bf00      	nop
 80074b8:	370c      	adds	r7, #12
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bc80      	pop	{r7}
 80074be:	4770      	bx	lr

080074c0 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b082      	sub	sp, #8
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
 80074c8:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80074ca:	2180      	movs	r1, #128	@ 0x80
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f000 fc8b 	bl	8007de8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80074d2:	2100      	movs	r1, #0
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f000 fc87 	bl	8007de8 <USBD_LL_StallEP>
}
 80074da:	bf00      	nop
 80074dc:	3708      	adds	r7, #8
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}

080074e2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80074e2:	b580      	push	{r7, lr}
 80074e4:	b086      	sub	sp, #24
 80074e6:	af00      	add	r7, sp, #0
 80074e8:	60f8      	str	r0, [r7, #12]
 80074ea:	60b9      	str	r1, [r7, #8]
 80074ec:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80074ee:	2300      	movs	r3, #0
 80074f0:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d032      	beq.n	800755e <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80074f8:	68f8      	ldr	r0, [r7, #12]
 80074fa:	f000 f834 	bl	8007566 <USBD_GetLen>
 80074fe:	4603      	mov	r3, r0
 8007500:	3301      	adds	r3, #1
 8007502:	b29b      	uxth	r3, r3
 8007504:	005b      	lsls	r3, r3, #1
 8007506:	b29a      	uxth	r2, r3
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800750c:	7dfb      	ldrb	r3, [r7, #23]
 800750e:	1c5a      	adds	r2, r3, #1
 8007510:	75fa      	strb	r2, [r7, #23]
 8007512:	461a      	mov	r2, r3
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	4413      	add	r3, r2
 8007518:	687a      	ldr	r2, [r7, #4]
 800751a:	7812      	ldrb	r2, [r2, #0]
 800751c:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800751e:	7dfb      	ldrb	r3, [r7, #23]
 8007520:	1c5a      	adds	r2, r3, #1
 8007522:	75fa      	strb	r2, [r7, #23]
 8007524:	461a      	mov	r2, r3
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	4413      	add	r3, r2
 800752a:	2203      	movs	r2, #3
 800752c:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800752e:	e012      	b.n	8007556 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	1c5a      	adds	r2, r3, #1
 8007534:	60fa      	str	r2, [r7, #12]
 8007536:	7dfa      	ldrb	r2, [r7, #23]
 8007538:	1c51      	adds	r1, r2, #1
 800753a:	75f9      	strb	r1, [r7, #23]
 800753c:	4611      	mov	r1, r2
 800753e:	68ba      	ldr	r2, [r7, #8]
 8007540:	440a      	add	r2, r1
 8007542:	781b      	ldrb	r3, [r3, #0]
 8007544:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007546:	7dfb      	ldrb	r3, [r7, #23]
 8007548:	1c5a      	adds	r2, r3, #1
 800754a:	75fa      	strb	r2, [r7, #23]
 800754c:	461a      	mov	r2, r3
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	4413      	add	r3, r2
 8007552:	2200      	movs	r2, #0
 8007554:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	781b      	ldrb	r3, [r3, #0]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d1e8      	bne.n	8007530 <USBD_GetString+0x4e>
    }
  }
}
 800755e:	bf00      	nop
 8007560:	3718      	adds	r7, #24
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}

08007566 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007566:	b480      	push	{r7}
 8007568:	b085      	sub	sp, #20
 800756a:	af00      	add	r7, sp, #0
 800756c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800756e:	2300      	movs	r3, #0
 8007570:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007572:	e005      	b.n	8007580 <USBD_GetLen+0x1a>
  {
    len++;
 8007574:	7bfb      	ldrb	r3, [r7, #15]
 8007576:	3301      	adds	r3, #1
 8007578:	73fb      	strb	r3, [r7, #15]
    buf++;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	3301      	adds	r3, #1
 800757e:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	781b      	ldrb	r3, [r3, #0]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d1f5      	bne.n	8007574 <USBD_GetLen+0xe>
  }

  return len;
 8007588:	7bfb      	ldrb	r3, [r7, #15]
}
 800758a:	4618      	mov	r0, r3
 800758c:	3714      	adds	r7, #20
 800758e:	46bd      	mov	sp, r7
 8007590:	bc80      	pop	{r7}
 8007592:	4770      	bx	lr

08007594 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b084      	sub	sp, #16
 8007598:	af00      	add	r7, sp, #0
 800759a:	60f8      	str	r0, [r7, #12]
 800759c:	60b9      	str	r1, [r7, #8]
 800759e:	4613      	mov	r3, r2
 80075a0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2202      	movs	r2, #2
 80075a6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80075aa:	88fa      	ldrh	r2, [r7, #6]
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80075b0:	88fa      	ldrh	r2, [r7, #6]
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80075b6:	88fb      	ldrh	r3, [r7, #6]
 80075b8:	68ba      	ldr	r2, [r7, #8]
 80075ba:	2100      	movs	r1, #0
 80075bc:	68f8      	ldr	r0, [r7, #12]
 80075be:	f000 fc9b 	bl	8007ef8 <USBD_LL_Transmit>

  return USBD_OK;
 80075c2:	2300      	movs	r3, #0
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3710      	adds	r7, #16
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}

080075cc <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b084      	sub	sp, #16
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	60f8      	str	r0, [r7, #12]
 80075d4:	60b9      	str	r1, [r7, #8]
 80075d6:	4613      	mov	r3, r2
 80075d8:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80075da:	88fb      	ldrh	r3, [r7, #6]
 80075dc:	68ba      	ldr	r2, [r7, #8]
 80075de:	2100      	movs	r1, #0
 80075e0:	68f8      	ldr	r0, [r7, #12]
 80075e2:	f000 fc89 	bl	8007ef8 <USBD_LL_Transmit>

  return USBD_OK;
 80075e6:	2300      	movs	r3, #0
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	3710      	adds	r7, #16
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd80      	pop	{r7, pc}

080075f0 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b084      	sub	sp, #16
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	60f8      	str	r0, [r7, #12]
 80075f8:	60b9      	str	r1, [r7, #8]
 80075fa:	4613      	mov	r3, r2
 80075fc:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	2203      	movs	r2, #3
 8007602:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8007606:	88fa      	ldrh	r2, [r7, #6]
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 800760e:	88fa      	ldrh	r2, [r7, #6]
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007616:	88fb      	ldrh	r3, [r7, #6]
 8007618:	68ba      	ldr	r2, [r7, #8]
 800761a:	2100      	movs	r1, #0
 800761c:	68f8      	ldr	r0, [r7, #12]
 800761e:	f000 fc8e 	bl	8007f3e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007622:	2300      	movs	r3, #0
}
 8007624:	4618      	mov	r0, r3
 8007626:	3710      	adds	r7, #16
 8007628:	46bd      	mov	sp, r7
 800762a:	bd80      	pop	{r7, pc}

0800762c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b084      	sub	sp, #16
 8007630:	af00      	add	r7, sp, #0
 8007632:	60f8      	str	r0, [r7, #12]
 8007634:	60b9      	str	r1, [r7, #8]
 8007636:	4613      	mov	r3, r2
 8007638:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800763a:	88fb      	ldrh	r3, [r7, #6]
 800763c:	68ba      	ldr	r2, [r7, #8]
 800763e:	2100      	movs	r1, #0
 8007640:	68f8      	ldr	r0, [r7, #12]
 8007642:	f000 fc7c 	bl	8007f3e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007646:	2300      	movs	r3, #0
}
 8007648:	4618      	mov	r0, r3
 800764a:	3710      	adds	r7, #16
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}

08007650 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b082      	sub	sp, #8
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2204      	movs	r2, #4
 800765c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007660:	2300      	movs	r3, #0
 8007662:	2200      	movs	r2, #0
 8007664:	2100      	movs	r1, #0
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f000 fc46 	bl	8007ef8 <USBD_LL_Transmit>

  return USBD_OK;
 800766c:	2300      	movs	r3, #0
}
 800766e:	4618      	mov	r0, r3
 8007670:	3708      	adds	r7, #8
 8007672:	46bd      	mov	sp, r7
 8007674:	bd80      	pop	{r7, pc}

08007676 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007676:	b580      	push	{r7, lr}
 8007678:	b082      	sub	sp, #8
 800767a:	af00      	add	r7, sp, #0
 800767c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2205      	movs	r2, #5
 8007682:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007686:	2300      	movs	r3, #0
 8007688:	2200      	movs	r2, #0
 800768a:	2100      	movs	r1, #0
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f000 fc56 	bl	8007f3e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007692:	2300      	movs	r3, #0
}
 8007694:	4618      	mov	r0, r3
 8007696:	3708      	adds	r7, #8
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}

0800769c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80076a0:	2200      	movs	r2, #0
 80076a2:	4912      	ldr	r1, [pc, #72]	@ (80076ec <MX_USB_DEVICE_Init+0x50>)
 80076a4:	4812      	ldr	r0, [pc, #72]	@ (80076f0 <MX_USB_DEVICE_Init+0x54>)
 80076a6:	f7fe ff2a 	bl	80064fe <USBD_Init>
 80076aa:	4603      	mov	r3, r0
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d001      	beq.n	80076b4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80076b0:	f7f9 fe5c 	bl	800136c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80076b4:	490f      	ldr	r1, [pc, #60]	@ (80076f4 <MX_USB_DEVICE_Init+0x58>)
 80076b6:	480e      	ldr	r0, [pc, #56]	@ (80076f0 <MX_USB_DEVICE_Init+0x54>)
 80076b8:	f7fe ff4c 	bl	8006554 <USBD_RegisterClass>
 80076bc:	4603      	mov	r3, r0
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d001      	beq.n	80076c6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80076c2:	f7f9 fe53 	bl	800136c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80076c6:	490c      	ldr	r1, [pc, #48]	@ (80076f8 <MX_USB_DEVICE_Init+0x5c>)
 80076c8:	4809      	ldr	r0, [pc, #36]	@ (80076f0 <MX_USB_DEVICE_Init+0x54>)
 80076ca:	f7fe fe7d 	bl	80063c8 <USBD_CDC_RegisterInterface>
 80076ce:	4603      	mov	r3, r0
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d001      	beq.n	80076d8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80076d4:	f7f9 fe4a 	bl	800136c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80076d8:	4805      	ldr	r0, [pc, #20]	@ (80076f0 <MX_USB_DEVICE_Init+0x54>)
 80076da:	f7fe ff54 	bl	8006586 <USBD_Start>
 80076de:	4603      	mov	r3, r0
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d001      	beq.n	80076e8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80076e4:	f7f9 fe42 	bl	800136c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80076e8:	bf00      	nop
 80076ea:	bd80      	pop	{r7, pc}
 80076ec:	2000012c 	.word	0x2000012c
 80076f0:	20000454 	.word	0x20000454
 80076f4:	20000018 	.word	0x20000018
 80076f8:	2000011c 	.word	0x2000011c

080076fc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007700:	2200      	movs	r2, #0
 8007702:	4905      	ldr	r1, [pc, #20]	@ (8007718 <CDC_Init_FS+0x1c>)
 8007704:	4805      	ldr	r0, [pc, #20]	@ (800771c <CDC_Init_FS+0x20>)
 8007706:	f7fe fe75 	bl	80063f4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800770a:	4905      	ldr	r1, [pc, #20]	@ (8007720 <CDC_Init_FS+0x24>)
 800770c:	4803      	ldr	r0, [pc, #12]	@ (800771c <CDC_Init_FS+0x20>)
 800770e:	f7fe fe8a 	bl	8006426 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007712:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007714:	4618      	mov	r0, r3
 8007716:	bd80      	pop	{r7, pc}
 8007718:	20000b18 	.word	0x20000b18
 800771c:	20000454 	.word	0x20000454
 8007720:	20000718 	.word	0x20000718

08007724 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007724:	b480      	push	{r7}
 8007726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007728:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800772a:	4618      	mov	r0, r3
 800772c:	46bd      	mov	sp, r7
 800772e:	bc80      	pop	{r7}
 8007730:	4770      	bx	lr
	...

08007734 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007734:	b480      	push	{r7}
 8007736:	b083      	sub	sp, #12
 8007738:	af00      	add	r7, sp, #0
 800773a:	4603      	mov	r3, r0
 800773c:	6039      	str	r1, [r7, #0]
 800773e:	71fb      	strb	r3, [r7, #7]
 8007740:	4613      	mov	r3, r2
 8007742:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007744:	79fb      	ldrb	r3, [r7, #7]
 8007746:	2b23      	cmp	r3, #35	@ 0x23
 8007748:	d84a      	bhi.n	80077e0 <CDC_Control_FS+0xac>
 800774a:	a201      	add	r2, pc, #4	@ (adr r2, 8007750 <CDC_Control_FS+0x1c>)
 800774c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007750:	080077e1 	.word	0x080077e1
 8007754:	080077e1 	.word	0x080077e1
 8007758:	080077e1 	.word	0x080077e1
 800775c:	080077e1 	.word	0x080077e1
 8007760:	080077e1 	.word	0x080077e1
 8007764:	080077e1 	.word	0x080077e1
 8007768:	080077e1 	.word	0x080077e1
 800776c:	080077e1 	.word	0x080077e1
 8007770:	080077e1 	.word	0x080077e1
 8007774:	080077e1 	.word	0x080077e1
 8007778:	080077e1 	.word	0x080077e1
 800777c:	080077e1 	.word	0x080077e1
 8007780:	080077e1 	.word	0x080077e1
 8007784:	080077e1 	.word	0x080077e1
 8007788:	080077e1 	.word	0x080077e1
 800778c:	080077e1 	.word	0x080077e1
 8007790:	080077e1 	.word	0x080077e1
 8007794:	080077e1 	.word	0x080077e1
 8007798:	080077e1 	.word	0x080077e1
 800779c:	080077e1 	.word	0x080077e1
 80077a0:	080077e1 	.word	0x080077e1
 80077a4:	080077e1 	.word	0x080077e1
 80077a8:	080077e1 	.word	0x080077e1
 80077ac:	080077e1 	.word	0x080077e1
 80077b0:	080077e1 	.word	0x080077e1
 80077b4:	080077e1 	.word	0x080077e1
 80077b8:	080077e1 	.word	0x080077e1
 80077bc:	080077e1 	.word	0x080077e1
 80077c0:	080077e1 	.word	0x080077e1
 80077c4:	080077e1 	.word	0x080077e1
 80077c8:	080077e1 	.word	0x080077e1
 80077cc:	080077e1 	.word	0x080077e1
 80077d0:	080077e1 	.word	0x080077e1
 80077d4:	080077e1 	.word	0x080077e1
 80077d8:	080077e1 	.word	0x080077e1
 80077dc:	080077e1 	.word	0x080077e1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80077e0:	bf00      	nop
  }

  return (USBD_OK);
 80077e2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	370c      	adds	r7, #12
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bc80      	pop	{r7}
 80077ec:	4770      	bx	lr
 80077ee:	bf00      	nop

080077f0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b082      	sub	sp, #8
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
 80077f8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  CDC_Receive(Buf,&Len);
 80077fa:	463b      	mov	r3, r7
 80077fc:	4619      	mov	r1, r3
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f7f8 fefe 	bl	8000600 <CDC_Receive>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007804:	6879      	ldr	r1, [r7, #4]
 8007806:	4805      	ldr	r0, [pc, #20]	@ (800781c <CDC_Receive_FS+0x2c>)
 8007808:	f7fe fe0d 	bl	8006426 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800780c:	4803      	ldr	r0, [pc, #12]	@ (800781c <CDC_Receive_FS+0x2c>)
 800780e:	f7fe fe4c 	bl	80064aa <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007812:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007814:	4618      	mov	r0, r3
 8007816:	3708      	adds	r7, #8
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}
 800781c:	20000454 	.word	0x20000454

08007820 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b084      	sub	sp, #16
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
 8007828:	460b      	mov	r3, r1
 800782a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800782c:	2300      	movs	r3, #0
 800782e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007830:	4b0d      	ldr	r3, [pc, #52]	@ (8007868 <CDC_Transmit_FS+0x48>)
 8007832:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007836:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800783e:	2b00      	cmp	r3, #0
 8007840:	d001      	beq.n	8007846 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007842:	2301      	movs	r3, #1
 8007844:	e00b      	b.n	800785e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007846:	887b      	ldrh	r3, [r7, #2]
 8007848:	461a      	mov	r2, r3
 800784a:	6879      	ldr	r1, [r7, #4]
 800784c:	4806      	ldr	r0, [pc, #24]	@ (8007868 <CDC_Transmit_FS+0x48>)
 800784e:	f7fe fdd1 	bl	80063f4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007852:	4805      	ldr	r0, [pc, #20]	@ (8007868 <CDC_Transmit_FS+0x48>)
 8007854:	f7fe fdfa 	bl	800644c <USBD_CDC_TransmitPacket>
 8007858:	4603      	mov	r3, r0
 800785a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800785c:	7bfb      	ldrb	r3, [r7, #15]
}
 800785e:	4618      	mov	r0, r3
 8007860:	3710      	adds	r7, #16
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}
 8007866:	bf00      	nop
 8007868:	20000454 	.word	0x20000454

0800786c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800786c:	b480      	push	{r7}
 800786e:	b083      	sub	sp, #12
 8007870:	af00      	add	r7, sp, #0
 8007872:	4603      	mov	r3, r0
 8007874:	6039      	str	r1, [r7, #0]
 8007876:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	2212      	movs	r2, #18
 800787c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800787e:	4b03      	ldr	r3, [pc, #12]	@ (800788c <USBD_FS_DeviceDescriptor+0x20>)
}
 8007880:	4618      	mov	r0, r3
 8007882:	370c      	adds	r7, #12
 8007884:	46bd      	mov	sp, r7
 8007886:	bc80      	pop	{r7}
 8007888:	4770      	bx	lr
 800788a:	bf00      	nop
 800788c:	20000148 	.word	0x20000148

08007890 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007890:	b480      	push	{r7}
 8007892:	b083      	sub	sp, #12
 8007894:	af00      	add	r7, sp, #0
 8007896:	4603      	mov	r3, r0
 8007898:	6039      	str	r1, [r7, #0]
 800789a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	2204      	movs	r2, #4
 80078a0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80078a2:	4b03      	ldr	r3, [pc, #12]	@ (80078b0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	370c      	adds	r7, #12
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bc80      	pop	{r7}
 80078ac:	4770      	bx	lr
 80078ae:	bf00      	nop
 80078b0:	2000015c 	.word	0x2000015c

080078b4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b082      	sub	sp, #8
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	4603      	mov	r3, r0
 80078bc:	6039      	str	r1, [r7, #0]
 80078be:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80078c0:	79fb      	ldrb	r3, [r7, #7]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d105      	bne.n	80078d2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80078c6:	683a      	ldr	r2, [r7, #0]
 80078c8:	4907      	ldr	r1, [pc, #28]	@ (80078e8 <USBD_FS_ProductStrDescriptor+0x34>)
 80078ca:	4808      	ldr	r0, [pc, #32]	@ (80078ec <USBD_FS_ProductStrDescriptor+0x38>)
 80078cc:	f7ff fe09 	bl	80074e2 <USBD_GetString>
 80078d0:	e004      	b.n	80078dc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80078d2:	683a      	ldr	r2, [r7, #0]
 80078d4:	4904      	ldr	r1, [pc, #16]	@ (80078e8 <USBD_FS_ProductStrDescriptor+0x34>)
 80078d6:	4805      	ldr	r0, [pc, #20]	@ (80078ec <USBD_FS_ProductStrDescriptor+0x38>)
 80078d8:	f7ff fe03 	bl	80074e2 <USBD_GetString>
  }
  return USBD_StrDesc;
 80078dc:	4b02      	ldr	r3, [pc, #8]	@ (80078e8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80078de:	4618      	mov	r0, r3
 80078e0:	3708      	adds	r7, #8
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bd80      	pop	{r7, pc}
 80078e6:	bf00      	nop
 80078e8:	20000f18 	.word	0x20000f18
 80078ec:	08008b50 	.word	0x08008b50

080078f0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b082      	sub	sp, #8
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	4603      	mov	r3, r0
 80078f8:	6039      	str	r1, [r7, #0]
 80078fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80078fc:	683a      	ldr	r2, [r7, #0]
 80078fe:	4904      	ldr	r1, [pc, #16]	@ (8007910 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007900:	4804      	ldr	r0, [pc, #16]	@ (8007914 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007902:	f7ff fdee 	bl	80074e2 <USBD_GetString>
  return USBD_StrDesc;
 8007906:	4b02      	ldr	r3, [pc, #8]	@ (8007910 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007908:	4618      	mov	r0, r3
 800790a:	3708      	adds	r7, #8
 800790c:	46bd      	mov	sp, r7
 800790e:	bd80      	pop	{r7, pc}
 8007910:	20000f18 	.word	0x20000f18
 8007914:	08008b68 	.word	0x08008b68

08007918 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b082      	sub	sp, #8
 800791c:	af00      	add	r7, sp, #0
 800791e:	4603      	mov	r3, r0
 8007920:	6039      	str	r1, [r7, #0]
 8007922:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	221a      	movs	r2, #26
 8007928:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800792a:	f000 f843 	bl	80079b4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800792e:	4b02      	ldr	r3, [pc, #8]	@ (8007938 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007930:	4618      	mov	r0, r3
 8007932:	3708      	adds	r7, #8
 8007934:	46bd      	mov	sp, r7
 8007936:	bd80      	pop	{r7, pc}
 8007938:	20000160 	.word	0x20000160

0800793c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b082      	sub	sp, #8
 8007940:	af00      	add	r7, sp, #0
 8007942:	4603      	mov	r3, r0
 8007944:	6039      	str	r1, [r7, #0]
 8007946:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007948:	79fb      	ldrb	r3, [r7, #7]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d105      	bne.n	800795a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800794e:	683a      	ldr	r2, [r7, #0]
 8007950:	4907      	ldr	r1, [pc, #28]	@ (8007970 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007952:	4808      	ldr	r0, [pc, #32]	@ (8007974 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007954:	f7ff fdc5 	bl	80074e2 <USBD_GetString>
 8007958:	e004      	b.n	8007964 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800795a:	683a      	ldr	r2, [r7, #0]
 800795c:	4904      	ldr	r1, [pc, #16]	@ (8007970 <USBD_FS_ConfigStrDescriptor+0x34>)
 800795e:	4805      	ldr	r0, [pc, #20]	@ (8007974 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007960:	f7ff fdbf 	bl	80074e2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007964:	4b02      	ldr	r3, [pc, #8]	@ (8007970 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007966:	4618      	mov	r0, r3
 8007968:	3708      	adds	r7, #8
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}
 800796e:	bf00      	nop
 8007970:	20000f18 	.word	0x20000f18
 8007974:	08008b7c 	.word	0x08008b7c

08007978 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b082      	sub	sp, #8
 800797c:	af00      	add	r7, sp, #0
 800797e:	4603      	mov	r3, r0
 8007980:	6039      	str	r1, [r7, #0]
 8007982:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007984:	79fb      	ldrb	r3, [r7, #7]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d105      	bne.n	8007996 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800798a:	683a      	ldr	r2, [r7, #0]
 800798c:	4907      	ldr	r1, [pc, #28]	@ (80079ac <USBD_FS_InterfaceStrDescriptor+0x34>)
 800798e:	4808      	ldr	r0, [pc, #32]	@ (80079b0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007990:	f7ff fda7 	bl	80074e2 <USBD_GetString>
 8007994:	e004      	b.n	80079a0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007996:	683a      	ldr	r2, [r7, #0]
 8007998:	4904      	ldr	r1, [pc, #16]	@ (80079ac <USBD_FS_InterfaceStrDescriptor+0x34>)
 800799a:	4805      	ldr	r0, [pc, #20]	@ (80079b0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800799c:	f7ff fda1 	bl	80074e2 <USBD_GetString>
  }
  return USBD_StrDesc;
 80079a0:	4b02      	ldr	r3, [pc, #8]	@ (80079ac <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	3708      	adds	r7, #8
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}
 80079aa:	bf00      	nop
 80079ac:	20000f18 	.word	0x20000f18
 80079b0:	08008b88 	.word	0x08008b88

080079b4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b084      	sub	sp, #16
 80079b8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80079ba:	4b0f      	ldr	r3, [pc, #60]	@ (80079f8 <Get_SerialNum+0x44>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80079c0:	4b0e      	ldr	r3, [pc, #56]	@ (80079fc <Get_SerialNum+0x48>)
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80079c6:	4b0e      	ldr	r3, [pc, #56]	@ (8007a00 <Get_SerialNum+0x4c>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80079cc:	68fa      	ldr	r2, [r7, #12]
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	4413      	add	r3, r2
 80079d2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d009      	beq.n	80079ee <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80079da:	2208      	movs	r2, #8
 80079dc:	4909      	ldr	r1, [pc, #36]	@ (8007a04 <Get_SerialNum+0x50>)
 80079de:	68f8      	ldr	r0, [r7, #12]
 80079e0:	f000 f814 	bl	8007a0c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80079e4:	2204      	movs	r2, #4
 80079e6:	4908      	ldr	r1, [pc, #32]	@ (8007a08 <Get_SerialNum+0x54>)
 80079e8:	68b8      	ldr	r0, [r7, #8]
 80079ea:	f000 f80f 	bl	8007a0c <IntToUnicode>
  }
}
 80079ee:	bf00      	nop
 80079f0:	3710      	adds	r7, #16
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}
 80079f6:	bf00      	nop
 80079f8:	1ffff7e8 	.word	0x1ffff7e8
 80079fc:	1ffff7ec 	.word	0x1ffff7ec
 8007a00:	1ffff7f0 	.word	0x1ffff7f0
 8007a04:	20000162 	.word	0x20000162
 8007a08:	20000172 	.word	0x20000172

08007a0c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	b087      	sub	sp, #28
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	60f8      	str	r0, [r7, #12]
 8007a14:	60b9      	str	r1, [r7, #8]
 8007a16:	4613      	mov	r3, r2
 8007a18:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007a1e:	2300      	movs	r3, #0
 8007a20:	75fb      	strb	r3, [r7, #23]
 8007a22:	e027      	b.n	8007a74 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	0f1b      	lsrs	r3, r3, #28
 8007a28:	2b09      	cmp	r3, #9
 8007a2a:	d80b      	bhi.n	8007a44 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	0f1b      	lsrs	r3, r3, #28
 8007a30:	b2da      	uxtb	r2, r3
 8007a32:	7dfb      	ldrb	r3, [r7, #23]
 8007a34:	005b      	lsls	r3, r3, #1
 8007a36:	4619      	mov	r1, r3
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	440b      	add	r3, r1
 8007a3c:	3230      	adds	r2, #48	@ 0x30
 8007a3e:	b2d2      	uxtb	r2, r2
 8007a40:	701a      	strb	r2, [r3, #0]
 8007a42:	e00a      	b.n	8007a5a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	0f1b      	lsrs	r3, r3, #28
 8007a48:	b2da      	uxtb	r2, r3
 8007a4a:	7dfb      	ldrb	r3, [r7, #23]
 8007a4c:	005b      	lsls	r3, r3, #1
 8007a4e:	4619      	mov	r1, r3
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	440b      	add	r3, r1
 8007a54:	3237      	adds	r2, #55	@ 0x37
 8007a56:	b2d2      	uxtb	r2, r2
 8007a58:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	011b      	lsls	r3, r3, #4
 8007a5e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007a60:	7dfb      	ldrb	r3, [r7, #23]
 8007a62:	005b      	lsls	r3, r3, #1
 8007a64:	3301      	adds	r3, #1
 8007a66:	68ba      	ldr	r2, [r7, #8]
 8007a68:	4413      	add	r3, r2
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007a6e:	7dfb      	ldrb	r3, [r7, #23]
 8007a70:	3301      	adds	r3, #1
 8007a72:	75fb      	strb	r3, [r7, #23]
 8007a74:	7dfa      	ldrb	r2, [r7, #23]
 8007a76:	79fb      	ldrb	r3, [r7, #7]
 8007a78:	429a      	cmp	r2, r3
 8007a7a:	d3d3      	bcc.n	8007a24 <IntToUnicode+0x18>
  }
}
 8007a7c:	bf00      	nop
 8007a7e:	bf00      	nop
 8007a80:	371c      	adds	r7, #28
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bc80      	pop	{r7}
 8007a86:	4770      	bx	lr

08007a88 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b084      	sub	sp, #16
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007a98:	d113      	bne.n	8007ac2 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007a9a:	4b0c      	ldr	r3, [pc, #48]	@ (8007acc <HAL_PCD_MspInit+0x44>)
 8007a9c:	695b      	ldr	r3, [r3, #20]
 8007a9e:	4a0b      	ldr	r2, [pc, #44]	@ (8007acc <HAL_PCD_MspInit+0x44>)
 8007aa0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007aa4:	6153      	str	r3, [r2, #20]
 8007aa6:	4b09      	ldr	r3, [pc, #36]	@ (8007acc <HAL_PCD_MspInit+0x44>)
 8007aa8:	695b      	ldr	r3, [r3, #20]
 8007aaa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007aae:	60fb      	str	r3, [r7, #12]
 8007ab0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	2100      	movs	r1, #0
 8007ab6:	2043      	movs	r0, #67	@ 0x43
 8007ab8:	f7fa fc0f 	bl	80022da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007abc:	2043      	movs	r0, #67	@ 0x43
 8007abe:	f7fa fc28 	bl	8002312 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007ac2:	bf00      	nop
 8007ac4:	3710      	adds	r7, #16
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}
 8007aca:	bf00      	nop
 8007acc:	40021000 	.word	0x40021000

08007ad0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b082      	sub	sp, #8
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f8d3 24d8 	ldr.w	r2, [r3, #1240]	@ 0x4d8
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007ae4:	4619      	mov	r1, r3
 8007ae6:	4610      	mov	r0, r2
 8007ae8:	f7fe fd95 	bl	8006616 <USBD_LL_SetupStage>
}
 8007aec:	bf00      	nop
 8007aee:	3708      	adds	r7, #8
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}

08007af4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b082      	sub	sp, #8
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
 8007afc:	460b      	mov	r3, r1
 8007afe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f8d3 04d8 	ldr.w	r0, [r3, #1240]	@ 0x4d8
 8007b06:	78fa      	ldrb	r2, [r7, #3]
 8007b08:	6879      	ldr	r1, [r7, #4]
 8007b0a:	4613      	mov	r3, r2
 8007b0c:	00db      	lsls	r3, r3, #3
 8007b0e:	4413      	add	r3, r2
 8007b10:	009b      	lsls	r3, r3, #2
 8007b12:	440b      	add	r3, r1
 8007b14:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007b18:	681a      	ldr	r2, [r3, #0]
 8007b1a:	78fb      	ldrb	r3, [r7, #3]
 8007b1c:	4619      	mov	r1, r3
 8007b1e:	f7fe fdc7 	bl	80066b0 <USBD_LL_DataOutStage>
}
 8007b22:	bf00      	nop
 8007b24:	3708      	adds	r7, #8
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bd80      	pop	{r7, pc}

08007b2a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b2a:	b580      	push	{r7, lr}
 8007b2c:	b082      	sub	sp, #8
 8007b2e:	af00      	add	r7, sp, #0
 8007b30:	6078      	str	r0, [r7, #4]
 8007b32:	460b      	mov	r3, r1
 8007b34:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f8d3 04d8 	ldr.w	r0, [r3, #1240]	@ 0x4d8
 8007b3c:	78fa      	ldrb	r2, [r7, #3]
 8007b3e:	6879      	ldr	r1, [r7, #4]
 8007b40:	4613      	mov	r3, r2
 8007b42:	00db      	lsls	r3, r3, #3
 8007b44:	4413      	add	r3, r2
 8007b46:	009b      	lsls	r3, r3, #2
 8007b48:	440b      	add	r3, r1
 8007b4a:	3320      	adds	r3, #32
 8007b4c:	681a      	ldr	r2, [r3, #0]
 8007b4e:	78fb      	ldrb	r3, [r7, #3]
 8007b50:	4619      	mov	r1, r3
 8007b52:	f7fe fe1e 	bl	8006792 <USBD_LL_DataInStage>
}
 8007b56:	bf00      	nop
 8007b58:	3708      	adds	r7, #8
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}

08007b5e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b5e:	b580      	push	{r7, lr}
 8007b60:	b082      	sub	sp, #8
 8007b62:	af00      	add	r7, sp, #0
 8007b64:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f8d3 34d8 	ldr.w	r3, [r3, #1240]	@ 0x4d8
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	f7fe ff2e 	bl	80069ce <USBD_LL_SOF>
}
 8007b72:	bf00      	nop
 8007b74:	3708      	adds	r7, #8
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}

08007b7a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b7a:	b580      	push	{r7, lr}
 8007b7c:	b084      	sub	sp, #16
 8007b7e:	af00      	add	r7, sp, #0
 8007b80:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007b82:	2301      	movs	r3, #1
 8007b84:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	79db      	ldrb	r3, [r3, #7]
 8007b8a:	2b02      	cmp	r3, #2
 8007b8c:	d001      	beq.n	8007b92 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007b8e:	f7f9 fbed 	bl	800136c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f8d3 34d8 	ldr.w	r3, [r3, #1240]	@ 0x4d8
 8007b98:	7bfa      	ldrb	r2, [r7, #15]
 8007b9a:	4611      	mov	r1, r2
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	f7fe fede 	bl	800695e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f8d3 34d8 	ldr.w	r3, [r3, #1240]	@ 0x4d8
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f7fe fe97 	bl	80068dc <USBD_LL_Reset>
}
 8007bae:	bf00      	nop
 8007bb0:	3710      	adds	r7, #16
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bd80      	pop	{r7, pc}
	...

08007bb8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b082      	sub	sp, #8
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f8d3 34d8 	ldr.w	r3, [r3, #1240]	@ 0x4d8
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	f7fe fed8 	bl	800697c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	687a      	ldr	r2, [r7, #4]
 8007bd8:	6812      	ldr	r2, [r2, #0]
 8007bda:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007bde:	f043 0301 	orr.w	r3, r3, #1
 8007be2:	6013      	str	r3, [r2, #0]
  if (hpcd->Init.low_power_enable)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	7adb      	ldrb	r3, [r3, #11]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d005      	beq.n	8007bf8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007bec:	4b04      	ldr	r3, [pc, #16]	@ (8007c00 <HAL_PCD_SuspendCallback+0x48>)
 8007bee:	691b      	ldr	r3, [r3, #16]
 8007bf0:	4a03      	ldr	r2, [pc, #12]	@ (8007c00 <HAL_PCD_SuspendCallback+0x48>)
 8007bf2:	f043 0306 	orr.w	r3, r3, #6
 8007bf6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007bf8:	bf00      	nop
 8007bfa:	3708      	adds	r7, #8
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}
 8007c00:	e000ed00 	.word	0xe000ed00

08007c04 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b082      	sub	sp, #8
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f8d3 34d8 	ldr.w	r3, [r3, #1240]	@ 0x4d8
 8007c12:	4618      	mov	r0, r3
 8007c14:	f7fe fec6 	bl	80069a4 <USBD_LL_Resume>
}
 8007c18:	bf00      	nop
 8007c1a:	3708      	adds	r7, #8
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bd80      	pop	{r7, pc}

08007c20 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b082      	sub	sp, #8
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
 8007c28:	460b      	mov	r3, r1
 8007c2a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f8d3 34d8 	ldr.w	r3, [r3, #1240]	@ 0x4d8
 8007c32:	78fa      	ldrb	r2, [r7, #3]
 8007c34:	4611      	mov	r1, r2
 8007c36:	4618      	mov	r0, r3
 8007c38:	f7fe feef 	bl	8006a1a <USBD_LL_IsoOUTIncomplete>
}
 8007c3c:	bf00      	nop
 8007c3e:	3708      	adds	r7, #8
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd80      	pop	{r7, pc}

08007c44 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b082      	sub	sp, #8
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
 8007c4c:	460b      	mov	r3, r1
 8007c4e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f8d3 34d8 	ldr.w	r3, [r3, #1240]	@ 0x4d8
 8007c56:	78fa      	ldrb	r2, [r7, #3]
 8007c58:	4611      	mov	r1, r2
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	f7fe fed1 	bl	8006a02 <USBD_LL_IsoINIncomplete>
}
 8007c60:	bf00      	nop
 8007c62:	3708      	adds	r7, #8
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}

08007c68 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b082      	sub	sp, #8
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f8d3 34d8 	ldr.w	r3, [r3, #1240]	@ 0x4d8
 8007c76:	4618      	mov	r0, r3
 8007c78:	f7fe fedb 	bl	8006a32 <USBD_LL_DevConnected>
}
 8007c7c:	bf00      	nop
 8007c7e:	3708      	adds	r7, #8
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bd80      	pop	{r7, pc}

08007c84 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b082      	sub	sp, #8
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f8d3 34d8 	ldr.w	r3, [r3, #1240]	@ 0x4d8
 8007c92:	4618      	mov	r0, r3
 8007c94:	f7fe fed7 	bl	8006a46 <USBD_LL_DevDisconnected>
}
 8007c98:	bf00      	nop
 8007c9a:	3708      	adds	r7, #8
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd80      	pop	{r7, pc}

08007ca0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b082      	sub	sp, #8
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	781b      	ldrb	r3, [r3, #0]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d133      	bne.n	8007d18 <USBD_LL_Init+0x78>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007cb0:	4a1c      	ldr	r2, [pc, #112]	@ (8007d24 <USBD_LL_Init+0x84>)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	f8c2 34d8 	str.w	r3, [r2, #1240]	@ 0x4d8
  pdev->pData = &hpcd_USB_OTG_FS;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	4a1a      	ldr	r2, [pc, #104]	@ (8007d24 <USBD_LL_Init+0x84>)
 8007cbc:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007cc0:	4b18      	ldr	r3, [pc, #96]	@ (8007d24 <USBD_LL_Init+0x84>)
 8007cc2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8007cc6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007cc8:	4b16      	ldr	r3, [pc, #88]	@ (8007d24 <USBD_LL_Init+0x84>)
 8007cca:	2204      	movs	r2, #4
 8007ccc:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007cce:	4b15      	ldr	r3, [pc, #84]	@ (8007d24 <USBD_LL_Init+0x84>)
 8007cd0:	2202      	movs	r2, #2
 8007cd2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007cd4:	4b13      	ldr	r3, [pc, #76]	@ (8007d24 <USBD_LL_Init+0x84>)
 8007cd6:	2202      	movs	r2, #2
 8007cd8:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007cda:	4b12      	ldr	r3, [pc, #72]	@ (8007d24 <USBD_LL_Init+0x84>)
 8007cdc:	2200      	movs	r2, #0
 8007cde:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007ce0:	4b10      	ldr	r3, [pc, #64]	@ (8007d24 <USBD_LL_Init+0x84>)
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007ce6:	4b0f      	ldr	r3, [pc, #60]	@ (8007d24 <USBD_LL_Init+0x84>)
 8007ce8:	2200      	movs	r2, #0
 8007cea:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007cec:	480d      	ldr	r0, [pc, #52]	@ (8007d24 <USBD_LL_Init+0x84>)
 8007cee:	f7fa fcc7 	bl	8002680 <HAL_PCD_Init>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d001      	beq.n	8007cfc <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8007cf8:	f7f9 fb38 	bl	800136c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007cfc:	2180      	movs	r1, #128	@ 0x80
 8007cfe:	4809      	ldr	r0, [pc, #36]	@ (8007d24 <USBD_LL_Init+0x84>)
 8007d00:	f7fb fdcc 	bl	800389c <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007d04:	2240      	movs	r2, #64	@ 0x40
 8007d06:	2100      	movs	r1, #0
 8007d08:	4806      	ldr	r0, [pc, #24]	@ (8007d24 <USBD_LL_Init+0x84>)
 8007d0a:	f7fb fd81 	bl	8003810 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007d0e:	2280      	movs	r2, #128	@ 0x80
 8007d10:	2101      	movs	r1, #1
 8007d12:	4804      	ldr	r0, [pc, #16]	@ (8007d24 <USBD_LL_Init+0x84>)
 8007d14:	f7fb fd7c 	bl	8003810 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007d18:	2300      	movs	r3, #0
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3708      	adds	r7, #8
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}
 8007d22:	bf00      	nop
 8007d24:	20001118 	.word	0x20001118

08007d28 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b084      	sub	sp, #16
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d30:	2300      	movs	r3, #0
 8007d32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d34:	2300      	movs	r3, #0
 8007d36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007d3e:	4618      	mov	r0, r3
 8007d40:	f7fa fda6 	bl	8002890 <HAL_PCD_Start>
 8007d44:	4603      	mov	r3, r0
 8007d46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d48:	7bfb      	ldrb	r3, [r7, #15]
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	f000 f944 	bl	8007fd8 <USBD_Get_USB_Status>
 8007d50:	4603      	mov	r3, r0
 8007d52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d54:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	3710      	adds	r7, #16
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}

08007d5e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007d5e:	b580      	push	{r7, lr}
 8007d60:	b084      	sub	sp, #16
 8007d62:	af00      	add	r7, sp, #0
 8007d64:	6078      	str	r0, [r7, #4]
 8007d66:	4608      	mov	r0, r1
 8007d68:	4611      	mov	r1, r2
 8007d6a:	461a      	mov	r2, r3
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	70fb      	strb	r3, [r7, #3]
 8007d70:	460b      	mov	r3, r1
 8007d72:	70bb      	strb	r3, [r7, #2]
 8007d74:	4613      	mov	r3, r2
 8007d76:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d78:	2300      	movs	r3, #0
 8007d7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8007d86:	78bb      	ldrb	r3, [r7, #2]
 8007d88:	883a      	ldrh	r2, [r7, #0]
 8007d8a:	78f9      	ldrb	r1, [r7, #3]
 8007d8c:	f7fb fa21 	bl	80031d2 <HAL_PCD_EP_Open>
 8007d90:	4603      	mov	r3, r0
 8007d92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d94:	7bfb      	ldrb	r3, [r7, #15]
 8007d96:	4618      	mov	r0, r3
 8007d98:	f000 f91e 	bl	8007fd8 <USBD_Get_USB_Status>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007da0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	3710      	adds	r7, #16
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}

08007daa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007daa:	b580      	push	{r7, lr}
 8007dac:	b084      	sub	sp, #16
 8007dae:	af00      	add	r7, sp, #0
 8007db0:	6078      	str	r0, [r7, #4]
 8007db2:	460b      	mov	r3, r1
 8007db4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007db6:	2300      	movs	r3, #0
 8007db8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007dba:	2300      	movs	r3, #0
 8007dbc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007dc4:	78fa      	ldrb	r2, [r7, #3]
 8007dc6:	4611      	mov	r1, r2
 8007dc8:	4618      	mov	r0, r3
 8007dca:	f7fb fa6a 	bl	80032a2 <HAL_PCD_EP_Close>
 8007dce:	4603      	mov	r3, r0
 8007dd0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007dd2:	7bfb      	ldrb	r3, [r7, #15]
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	f000 f8ff 	bl	8007fd8 <USBD_Get_USB_Status>
 8007dda:	4603      	mov	r3, r0
 8007ddc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007dde:	7bbb      	ldrb	r3, [r7, #14]
}
 8007de0:	4618      	mov	r0, r3
 8007de2:	3710      	adds	r7, #16
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bd80      	pop	{r7, pc}

08007de8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b084      	sub	sp, #16
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
 8007df0:	460b      	mov	r3, r1
 8007df2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007df4:	2300      	movs	r3, #0
 8007df6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007df8:	2300      	movs	r3, #0
 8007dfa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007e02:	78fa      	ldrb	r2, [r7, #3]
 8007e04:	4611      	mov	r1, r2
 8007e06:	4618      	mov	r0, r3
 8007e08:	f7fb fb0f 	bl	800342a <HAL_PCD_EP_SetStall>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e10:	7bfb      	ldrb	r3, [r7, #15]
 8007e12:	4618      	mov	r0, r3
 8007e14:	f000 f8e0 	bl	8007fd8 <USBD_Get_USB_Status>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e1c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	3710      	adds	r7, #16
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}

08007e26 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e26:	b580      	push	{r7, lr}
 8007e28:	b084      	sub	sp, #16
 8007e2a:	af00      	add	r7, sp, #0
 8007e2c:	6078      	str	r0, [r7, #4]
 8007e2e:	460b      	mov	r3, r1
 8007e30:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e32:	2300      	movs	r3, #0
 8007e34:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e36:	2300      	movs	r3, #0
 8007e38:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007e40:	78fa      	ldrb	r2, [r7, #3]
 8007e42:	4611      	mov	r1, r2
 8007e44:	4618      	mov	r0, r3
 8007e46:	f7fb fb52 	bl	80034ee <HAL_PCD_EP_ClrStall>
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e4e:	7bfb      	ldrb	r3, [r7, #15]
 8007e50:	4618      	mov	r0, r3
 8007e52:	f000 f8c1 	bl	8007fd8 <USBD_Get_USB_Status>
 8007e56:	4603      	mov	r3, r0
 8007e58:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e5a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	3710      	adds	r7, #16
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}

08007e64 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e64:	b480      	push	{r7}
 8007e66:	b085      	sub	sp, #20
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
 8007e6c:	460b      	mov	r3, r1
 8007e6e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007e76:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007e78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	da0b      	bge.n	8007e98 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007e80:	78fb      	ldrb	r3, [r7, #3]
 8007e82:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007e86:	68f9      	ldr	r1, [r7, #12]
 8007e88:	4613      	mov	r3, r2
 8007e8a:	00db      	lsls	r3, r3, #3
 8007e8c:	4413      	add	r3, r2
 8007e8e:	009b      	lsls	r3, r3, #2
 8007e90:	440b      	add	r3, r1
 8007e92:	3316      	adds	r3, #22
 8007e94:	781b      	ldrb	r3, [r3, #0]
 8007e96:	e00b      	b.n	8007eb0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007e98:	78fb      	ldrb	r3, [r7, #3]
 8007e9a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007e9e:	68f9      	ldr	r1, [r7, #12]
 8007ea0:	4613      	mov	r3, r2
 8007ea2:	00db      	lsls	r3, r3, #3
 8007ea4:	4413      	add	r3, r2
 8007ea6:	009b      	lsls	r3, r3, #2
 8007ea8:	440b      	add	r3, r1
 8007eaa:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8007eae:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	3714      	adds	r7, #20
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bc80      	pop	{r7}
 8007eb8:	4770      	bx	lr

08007eba <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007eba:	b580      	push	{r7, lr}
 8007ebc:	b084      	sub	sp, #16
 8007ebe:	af00      	add	r7, sp, #0
 8007ec0:	6078      	str	r0, [r7, #4]
 8007ec2:	460b      	mov	r3, r1
 8007ec4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007ed4:	78fa      	ldrb	r2, [r7, #3]
 8007ed6:	4611      	mov	r1, r2
 8007ed8:	4618      	mov	r0, r3
 8007eda:	f7fb f956 	bl	800318a <HAL_PCD_SetAddress>
 8007ede:	4603      	mov	r3, r0
 8007ee0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ee2:	7bfb      	ldrb	r3, [r7, #15]
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	f000 f877 	bl	8007fd8 <USBD_Get_USB_Status>
 8007eea:	4603      	mov	r3, r0
 8007eec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007eee:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	3710      	adds	r7, #16
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}

08007ef8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b086      	sub	sp, #24
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	60f8      	str	r0, [r7, #12]
 8007f00:	607a      	str	r2, [r7, #4]
 8007f02:	461a      	mov	r2, r3
 8007f04:	460b      	mov	r3, r1
 8007f06:	72fb      	strb	r3, [r7, #11]
 8007f08:	4613      	mov	r3, r2
 8007f0a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f10:	2300      	movs	r3, #0
 8007f12:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8007f1a:	893b      	ldrh	r3, [r7, #8]
 8007f1c:	7af9      	ldrb	r1, [r7, #11]
 8007f1e:	687a      	ldr	r2, [r7, #4]
 8007f20:	f7fb fa52 	bl	80033c8 <HAL_PCD_EP_Transmit>
 8007f24:	4603      	mov	r3, r0
 8007f26:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f28:	7dfb      	ldrb	r3, [r7, #23]
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f000 f854 	bl	8007fd8 <USBD_Get_USB_Status>
 8007f30:	4603      	mov	r3, r0
 8007f32:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007f34:	7dbb      	ldrb	r3, [r7, #22]
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	3718      	adds	r7, #24
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd80      	pop	{r7, pc}

08007f3e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007f3e:	b580      	push	{r7, lr}
 8007f40:	b086      	sub	sp, #24
 8007f42:	af00      	add	r7, sp, #0
 8007f44:	60f8      	str	r0, [r7, #12]
 8007f46:	607a      	str	r2, [r7, #4]
 8007f48:	461a      	mov	r2, r3
 8007f4a:	460b      	mov	r3, r1
 8007f4c:	72fb      	strb	r3, [r7, #11]
 8007f4e:	4613      	mov	r3, r2
 8007f50:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f52:	2300      	movs	r3, #0
 8007f54:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f56:	2300      	movs	r3, #0
 8007f58:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8007f60:	893b      	ldrh	r3, [r7, #8]
 8007f62:	7af9      	ldrb	r1, [r7, #11]
 8007f64:	687a      	ldr	r2, [r7, #4]
 8007f66:	f7fb f9e6 	bl	8003336 <HAL_PCD_EP_Receive>
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f6e:	7dfb      	ldrb	r3, [r7, #23]
 8007f70:	4618      	mov	r0, r3
 8007f72:	f000 f831 	bl	8007fd8 <USBD_Get_USB_Status>
 8007f76:	4603      	mov	r3, r0
 8007f78:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007f7a:	7dbb      	ldrb	r3, [r7, #22]
}
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	3718      	adds	r7, #24
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bd80      	pop	{r7, pc}

08007f84 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b082      	sub	sp, #8
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
 8007f8c:	460b      	mov	r3, r1
 8007f8e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007f96:	78fa      	ldrb	r2, [r7, #3]
 8007f98:	4611      	mov	r1, r2
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f7fb f9fd 	bl	800339a <HAL_PCD_EP_GetRxCount>
 8007fa0:	4603      	mov	r3, r0
}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	3708      	adds	r7, #8
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}
	...

08007fac <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007fac:	b480      	push	{r7}
 8007fae:	b083      	sub	sp, #12
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007fb4:	4b02      	ldr	r3, [pc, #8]	@ (8007fc0 <USBD_static_malloc+0x14>)
}
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	370c      	adds	r7, #12
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	bc80      	pop	{r7}
 8007fbe:	4770      	bx	lr
 8007fc0:	200015f4 	.word	0x200015f4

08007fc4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b083      	sub	sp, #12
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]

}
 8007fcc:	bf00      	nop
 8007fce:	370c      	adds	r7, #12
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bc80      	pop	{r7}
 8007fd4:	4770      	bx	lr
	...

08007fd8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b085      	sub	sp, #20
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	4603      	mov	r3, r0
 8007fe0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007fe6:	79fb      	ldrb	r3, [r7, #7]
 8007fe8:	2b03      	cmp	r3, #3
 8007fea:	d817      	bhi.n	800801c <USBD_Get_USB_Status+0x44>
 8007fec:	a201      	add	r2, pc, #4	@ (adr r2, 8007ff4 <USBD_Get_USB_Status+0x1c>)
 8007fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ff2:	bf00      	nop
 8007ff4:	08008005 	.word	0x08008005
 8007ff8:	0800800b 	.word	0x0800800b
 8007ffc:	08008011 	.word	0x08008011
 8008000:	08008017 	.word	0x08008017
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008004:	2300      	movs	r3, #0
 8008006:	73fb      	strb	r3, [r7, #15]
    break;
 8008008:	e00b      	b.n	8008022 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800800a:	2302      	movs	r3, #2
 800800c:	73fb      	strb	r3, [r7, #15]
    break;
 800800e:	e008      	b.n	8008022 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008010:	2301      	movs	r3, #1
 8008012:	73fb      	strb	r3, [r7, #15]
    break;
 8008014:	e005      	b.n	8008022 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008016:	2302      	movs	r3, #2
 8008018:	73fb      	strb	r3, [r7, #15]
    break;
 800801a:	e002      	b.n	8008022 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800801c:	2302      	movs	r3, #2
 800801e:	73fb      	strb	r3, [r7, #15]
    break;
 8008020:	bf00      	nop
  }
  return usb_status;
 8008022:	7bfb      	ldrb	r3, [r7, #15]
}
 8008024:	4618      	mov	r0, r3
 8008026:	3714      	adds	r7, #20
 8008028:	46bd      	mov	sp, r7
 800802a:	bc80      	pop	{r7}
 800802c:	4770      	bx	lr
 800802e:	bf00      	nop

08008030 <_strtol_l.constprop.0>:
 8008030:	2b24      	cmp	r3, #36	@ 0x24
 8008032:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008036:	4686      	mov	lr, r0
 8008038:	4690      	mov	r8, r2
 800803a:	d801      	bhi.n	8008040 <_strtol_l.constprop.0+0x10>
 800803c:	2b01      	cmp	r3, #1
 800803e:	d106      	bne.n	800804e <_strtol_l.constprop.0+0x1e>
 8008040:	f000 f8b6 	bl	80081b0 <__errno>
 8008044:	2316      	movs	r3, #22
 8008046:	6003      	str	r3, [r0, #0]
 8008048:	2000      	movs	r0, #0
 800804a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800804e:	460d      	mov	r5, r1
 8008050:	4833      	ldr	r0, [pc, #204]	@ (8008120 <_strtol_l.constprop.0+0xf0>)
 8008052:	462a      	mov	r2, r5
 8008054:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008058:	5d06      	ldrb	r6, [r0, r4]
 800805a:	f016 0608 	ands.w	r6, r6, #8
 800805e:	d1f8      	bne.n	8008052 <_strtol_l.constprop.0+0x22>
 8008060:	2c2d      	cmp	r4, #45	@ 0x2d
 8008062:	d12d      	bne.n	80080c0 <_strtol_l.constprop.0+0x90>
 8008064:	2601      	movs	r6, #1
 8008066:	782c      	ldrb	r4, [r5, #0]
 8008068:	1c95      	adds	r5, r2, #2
 800806a:	f033 0210 	bics.w	r2, r3, #16
 800806e:	d109      	bne.n	8008084 <_strtol_l.constprop.0+0x54>
 8008070:	2c30      	cmp	r4, #48	@ 0x30
 8008072:	d12a      	bne.n	80080ca <_strtol_l.constprop.0+0x9a>
 8008074:	782a      	ldrb	r2, [r5, #0]
 8008076:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800807a:	2a58      	cmp	r2, #88	@ 0x58
 800807c:	d125      	bne.n	80080ca <_strtol_l.constprop.0+0x9a>
 800807e:	2310      	movs	r3, #16
 8008080:	786c      	ldrb	r4, [r5, #1]
 8008082:	3502      	adds	r5, #2
 8008084:	2200      	movs	r2, #0
 8008086:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800808a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800808e:	fbbc f9f3 	udiv	r9, ip, r3
 8008092:	4610      	mov	r0, r2
 8008094:	fb03 ca19 	mls	sl, r3, r9, ip
 8008098:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800809c:	2f09      	cmp	r7, #9
 800809e:	d81b      	bhi.n	80080d8 <_strtol_l.constprop.0+0xa8>
 80080a0:	463c      	mov	r4, r7
 80080a2:	42a3      	cmp	r3, r4
 80080a4:	dd27      	ble.n	80080f6 <_strtol_l.constprop.0+0xc6>
 80080a6:	1c57      	adds	r7, r2, #1
 80080a8:	d007      	beq.n	80080ba <_strtol_l.constprop.0+0x8a>
 80080aa:	4581      	cmp	r9, r0
 80080ac:	d320      	bcc.n	80080f0 <_strtol_l.constprop.0+0xc0>
 80080ae:	d101      	bne.n	80080b4 <_strtol_l.constprop.0+0x84>
 80080b0:	45a2      	cmp	sl, r4
 80080b2:	db1d      	blt.n	80080f0 <_strtol_l.constprop.0+0xc0>
 80080b4:	2201      	movs	r2, #1
 80080b6:	fb00 4003 	mla	r0, r0, r3, r4
 80080ba:	f815 4b01 	ldrb.w	r4, [r5], #1
 80080be:	e7eb      	b.n	8008098 <_strtol_l.constprop.0+0x68>
 80080c0:	2c2b      	cmp	r4, #43	@ 0x2b
 80080c2:	bf04      	itt	eq
 80080c4:	782c      	ldrbeq	r4, [r5, #0]
 80080c6:	1c95      	addeq	r5, r2, #2
 80080c8:	e7cf      	b.n	800806a <_strtol_l.constprop.0+0x3a>
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d1da      	bne.n	8008084 <_strtol_l.constprop.0+0x54>
 80080ce:	2c30      	cmp	r4, #48	@ 0x30
 80080d0:	bf0c      	ite	eq
 80080d2:	2308      	moveq	r3, #8
 80080d4:	230a      	movne	r3, #10
 80080d6:	e7d5      	b.n	8008084 <_strtol_l.constprop.0+0x54>
 80080d8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80080dc:	2f19      	cmp	r7, #25
 80080de:	d801      	bhi.n	80080e4 <_strtol_l.constprop.0+0xb4>
 80080e0:	3c37      	subs	r4, #55	@ 0x37
 80080e2:	e7de      	b.n	80080a2 <_strtol_l.constprop.0+0x72>
 80080e4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80080e8:	2f19      	cmp	r7, #25
 80080ea:	d804      	bhi.n	80080f6 <_strtol_l.constprop.0+0xc6>
 80080ec:	3c57      	subs	r4, #87	@ 0x57
 80080ee:	e7d8      	b.n	80080a2 <_strtol_l.constprop.0+0x72>
 80080f0:	f04f 32ff 	mov.w	r2, #4294967295
 80080f4:	e7e1      	b.n	80080ba <_strtol_l.constprop.0+0x8a>
 80080f6:	1c53      	adds	r3, r2, #1
 80080f8:	d108      	bne.n	800810c <_strtol_l.constprop.0+0xdc>
 80080fa:	2322      	movs	r3, #34	@ 0x22
 80080fc:	4660      	mov	r0, ip
 80080fe:	f8ce 3000 	str.w	r3, [lr]
 8008102:	f1b8 0f00 	cmp.w	r8, #0
 8008106:	d0a0      	beq.n	800804a <_strtol_l.constprop.0+0x1a>
 8008108:	1e69      	subs	r1, r5, #1
 800810a:	e006      	b.n	800811a <_strtol_l.constprop.0+0xea>
 800810c:	b106      	cbz	r6, 8008110 <_strtol_l.constprop.0+0xe0>
 800810e:	4240      	negs	r0, r0
 8008110:	f1b8 0f00 	cmp.w	r8, #0
 8008114:	d099      	beq.n	800804a <_strtol_l.constprop.0+0x1a>
 8008116:	2a00      	cmp	r2, #0
 8008118:	d1f6      	bne.n	8008108 <_strtol_l.constprop.0+0xd8>
 800811a:	f8c8 1000 	str.w	r1, [r8]
 800811e:	e794      	b.n	800804a <_strtol_l.constprop.0+0x1a>
 8008120:	08008bc9 	.word	0x08008bc9

08008124 <strtol>:
 8008124:	4613      	mov	r3, r2
 8008126:	460a      	mov	r2, r1
 8008128:	4601      	mov	r1, r0
 800812a:	4802      	ldr	r0, [pc, #8]	@ (8008134 <strtol+0x10>)
 800812c:	6800      	ldr	r0, [r0, #0]
 800812e:	f7ff bf7f 	b.w	8008030 <_strtol_l.constprop.0>
 8008132:	bf00      	nop
 8008134:	2000017c 	.word	0x2000017c

08008138 <siprintf>:
 8008138:	b40e      	push	{r1, r2, r3}
 800813a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800813e:	b500      	push	{lr}
 8008140:	b09c      	sub	sp, #112	@ 0x70
 8008142:	ab1d      	add	r3, sp, #116	@ 0x74
 8008144:	9002      	str	r0, [sp, #8]
 8008146:	9006      	str	r0, [sp, #24]
 8008148:	9107      	str	r1, [sp, #28]
 800814a:	9104      	str	r1, [sp, #16]
 800814c:	4808      	ldr	r0, [pc, #32]	@ (8008170 <siprintf+0x38>)
 800814e:	4909      	ldr	r1, [pc, #36]	@ (8008174 <siprintf+0x3c>)
 8008150:	f853 2b04 	ldr.w	r2, [r3], #4
 8008154:	9105      	str	r1, [sp, #20]
 8008156:	6800      	ldr	r0, [r0, #0]
 8008158:	a902      	add	r1, sp, #8
 800815a:	9301      	str	r3, [sp, #4]
 800815c:	f000 f9a6 	bl	80084ac <_svfiprintf_r>
 8008160:	2200      	movs	r2, #0
 8008162:	9b02      	ldr	r3, [sp, #8]
 8008164:	701a      	strb	r2, [r3, #0]
 8008166:	b01c      	add	sp, #112	@ 0x70
 8008168:	f85d eb04 	ldr.w	lr, [sp], #4
 800816c:	b003      	add	sp, #12
 800816e:	4770      	bx	lr
 8008170:	2000017c 	.word	0x2000017c
 8008174:	ffff0208 	.word	0xffff0208

08008178 <memset>:
 8008178:	4603      	mov	r3, r0
 800817a:	4402      	add	r2, r0
 800817c:	4293      	cmp	r3, r2
 800817e:	d100      	bne.n	8008182 <memset+0xa>
 8008180:	4770      	bx	lr
 8008182:	f803 1b01 	strb.w	r1, [r3], #1
 8008186:	e7f9      	b.n	800817c <memset+0x4>

08008188 <strncpy>:
 8008188:	4603      	mov	r3, r0
 800818a:	b510      	push	{r4, lr}
 800818c:	3901      	subs	r1, #1
 800818e:	b132      	cbz	r2, 800819e <strncpy+0x16>
 8008190:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008194:	3a01      	subs	r2, #1
 8008196:	f803 4b01 	strb.w	r4, [r3], #1
 800819a:	2c00      	cmp	r4, #0
 800819c:	d1f7      	bne.n	800818e <strncpy+0x6>
 800819e:	2100      	movs	r1, #0
 80081a0:	441a      	add	r2, r3
 80081a2:	4293      	cmp	r3, r2
 80081a4:	d100      	bne.n	80081a8 <strncpy+0x20>
 80081a6:	bd10      	pop	{r4, pc}
 80081a8:	f803 1b01 	strb.w	r1, [r3], #1
 80081ac:	e7f9      	b.n	80081a2 <strncpy+0x1a>
	...

080081b0 <__errno>:
 80081b0:	4b01      	ldr	r3, [pc, #4]	@ (80081b8 <__errno+0x8>)
 80081b2:	6818      	ldr	r0, [r3, #0]
 80081b4:	4770      	bx	lr
 80081b6:	bf00      	nop
 80081b8:	2000017c 	.word	0x2000017c

080081bc <__libc_init_array>:
 80081bc:	b570      	push	{r4, r5, r6, lr}
 80081be:	2600      	movs	r6, #0
 80081c0:	4d0c      	ldr	r5, [pc, #48]	@ (80081f4 <__libc_init_array+0x38>)
 80081c2:	4c0d      	ldr	r4, [pc, #52]	@ (80081f8 <__libc_init_array+0x3c>)
 80081c4:	1b64      	subs	r4, r4, r5
 80081c6:	10a4      	asrs	r4, r4, #2
 80081c8:	42a6      	cmp	r6, r4
 80081ca:	d109      	bne.n	80081e0 <__libc_init_array+0x24>
 80081cc:	f000 fc78 	bl	8008ac0 <_init>
 80081d0:	2600      	movs	r6, #0
 80081d2:	4d0a      	ldr	r5, [pc, #40]	@ (80081fc <__libc_init_array+0x40>)
 80081d4:	4c0a      	ldr	r4, [pc, #40]	@ (8008200 <__libc_init_array+0x44>)
 80081d6:	1b64      	subs	r4, r4, r5
 80081d8:	10a4      	asrs	r4, r4, #2
 80081da:	42a6      	cmp	r6, r4
 80081dc:	d105      	bne.n	80081ea <__libc_init_array+0x2e>
 80081de:	bd70      	pop	{r4, r5, r6, pc}
 80081e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80081e4:	4798      	blx	r3
 80081e6:	3601      	adds	r6, #1
 80081e8:	e7ee      	b.n	80081c8 <__libc_init_array+0xc>
 80081ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80081ee:	4798      	blx	r3
 80081f0:	3601      	adds	r6, #1
 80081f2:	e7f2      	b.n	80081da <__libc_init_array+0x1e>
 80081f4:	08008d04 	.word	0x08008d04
 80081f8:	08008d04 	.word	0x08008d04
 80081fc:	08008d04 	.word	0x08008d04
 8008200:	08008d08 	.word	0x08008d08

08008204 <__retarget_lock_acquire_recursive>:
 8008204:	4770      	bx	lr

08008206 <__retarget_lock_release_recursive>:
 8008206:	4770      	bx	lr

08008208 <_free_r>:
 8008208:	b538      	push	{r3, r4, r5, lr}
 800820a:	4605      	mov	r5, r0
 800820c:	2900      	cmp	r1, #0
 800820e:	d040      	beq.n	8008292 <_free_r+0x8a>
 8008210:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008214:	1f0c      	subs	r4, r1, #4
 8008216:	2b00      	cmp	r3, #0
 8008218:	bfb8      	it	lt
 800821a:	18e4      	addlt	r4, r4, r3
 800821c:	f000 f8de 	bl	80083dc <__malloc_lock>
 8008220:	4a1c      	ldr	r2, [pc, #112]	@ (8008294 <_free_r+0x8c>)
 8008222:	6813      	ldr	r3, [r2, #0]
 8008224:	b933      	cbnz	r3, 8008234 <_free_r+0x2c>
 8008226:	6063      	str	r3, [r4, #4]
 8008228:	6014      	str	r4, [r2, #0]
 800822a:	4628      	mov	r0, r5
 800822c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008230:	f000 b8da 	b.w	80083e8 <__malloc_unlock>
 8008234:	42a3      	cmp	r3, r4
 8008236:	d908      	bls.n	800824a <_free_r+0x42>
 8008238:	6820      	ldr	r0, [r4, #0]
 800823a:	1821      	adds	r1, r4, r0
 800823c:	428b      	cmp	r3, r1
 800823e:	bf01      	itttt	eq
 8008240:	6819      	ldreq	r1, [r3, #0]
 8008242:	685b      	ldreq	r3, [r3, #4]
 8008244:	1809      	addeq	r1, r1, r0
 8008246:	6021      	streq	r1, [r4, #0]
 8008248:	e7ed      	b.n	8008226 <_free_r+0x1e>
 800824a:	461a      	mov	r2, r3
 800824c:	685b      	ldr	r3, [r3, #4]
 800824e:	b10b      	cbz	r3, 8008254 <_free_r+0x4c>
 8008250:	42a3      	cmp	r3, r4
 8008252:	d9fa      	bls.n	800824a <_free_r+0x42>
 8008254:	6811      	ldr	r1, [r2, #0]
 8008256:	1850      	adds	r0, r2, r1
 8008258:	42a0      	cmp	r0, r4
 800825a:	d10b      	bne.n	8008274 <_free_r+0x6c>
 800825c:	6820      	ldr	r0, [r4, #0]
 800825e:	4401      	add	r1, r0
 8008260:	1850      	adds	r0, r2, r1
 8008262:	4283      	cmp	r3, r0
 8008264:	6011      	str	r1, [r2, #0]
 8008266:	d1e0      	bne.n	800822a <_free_r+0x22>
 8008268:	6818      	ldr	r0, [r3, #0]
 800826a:	685b      	ldr	r3, [r3, #4]
 800826c:	4408      	add	r0, r1
 800826e:	6010      	str	r0, [r2, #0]
 8008270:	6053      	str	r3, [r2, #4]
 8008272:	e7da      	b.n	800822a <_free_r+0x22>
 8008274:	d902      	bls.n	800827c <_free_r+0x74>
 8008276:	230c      	movs	r3, #12
 8008278:	602b      	str	r3, [r5, #0]
 800827a:	e7d6      	b.n	800822a <_free_r+0x22>
 800827c:	6820      	ldr	r0, [r4, #0]
 800827e:	1821      	adds	r1, r4, r0
 8008280:	428b      	cmp	r3, r1
 8008282:	bf01      	itttt	eq
 8008284:	6819      	ldreq	r1, [r3, #0]
 8008286:	685b      	ldreq	r3, [r3, #4]
 8008288:	1809      	addeq	r1, r1, r0
 800828a:	6021      	streq	r1, [r4, #0]
 800828c:	6063      	str	r3, [r4, #4]
 800828e:	6054      	str	r4, [r2, #4]
 8008290:	e7cb      	b.n	800822a <_free_r+0x22>
 8008292:	bd38      	pop	{r3, r4, r5, pc}
 8008294:	20001958 	.word	0x20001958

08008298 <sbrk_aligned>:
 8008298:	b570      	push	{r4, r5, r6, lr}
 800829a:	4e0f      	ldr	r6, [pc, #60]	@ (80082d8 <sbrk_aligned+0x40>)
 800829c:	460c      	mov	r4, r1
 800829e:	6831      	ldr	r1, [r6, #0]
 80082a0:	4605      	mov	r5, r0
 80082a2:	b911      	cbnz	r1, 80082aa <sbrk_aligned+0x12>
 80082a4:	f000 fbaa 	bl	80089fc <_sbrk_r>
 80082a8:	6030      	str	r0, [r6, #0]
 80082aa:	4621      	mov	r1, r4
 80082ac:	4628      	mov	r0, r5
 80082ae:	f000 fba5 	bl	80089fc <_sbrk_r>
 80082b2:	1c43      	adds	r3, r0, #1
 80082b4:	d103      	bne.n	80082be <sbrk_aligned+0x26>
 80082b6:	f04f 34ff 	mov.w	r4, #4294967295
 80082ba:	4620      	mov	r0, r4
 80082bc:	bd70      	pop	{r4, r5, r6, pc}
 80082be:	1cc4      	adds	r4, r0, #3
 80082c0:	f024 0403 	bic.w	r4, r4, #3
 80082c4:	42a0      	cmp	r0, r4
 80082c6:	d0f8      	beq.n	80082ba <sbrk_aligned+0x22>
 80082c8:	1a21      	subs	r1, r4, r0
 80082ca:	4628      	mov	r0, r5
 80082cc:	f000 fb96 	bl	80089fc <_sbrk_r>
 80082d0:	3001      	adds	r0, #1
 80082d2:	d1f2      	bne.n	80082ba <sbrk_aligned+0x22>
 80082d4:	e7ef      	b.n	80082b6 <sbrk_aligned+0x1e>
 80082d6:	bf00      	nop
 80082d8:	20001954 	.word	0x20001954

080082dc <_malloc_r>:
 80082dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082e0:	1ccd      	adds	r5, r1, #3
 80082e2:	f025 0503 	bic.w	r5, r5, #3
 80082e6:	3508      	adds	r5, #8
 80082e8:	2d0c      	cmp	r5, #12
 80082ea:	bf38      	it	cc
 80082ec:	250c      	movcc	r5, #12
 80082ee:	2d00      	cmp	r5, #0
 80082f0:	4606      	mov	r6, r0
 80082f2:	db01      	blt.n	80082f8 <_malloc_r+0x1c>
 80082f4:	42a9      	cmp	r1, r5
 80082f6:	d904      	bls.n	8008302 <_malloc_r+0x26>
 80082f8:	230c      	movs	r3, #12
 80082fa:	6033      	str	r3, [r6, #0]
 80082fc:	2000      	movs	r0, #0
 80082fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008302:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80083d8 <_malloc_r+0xfc>
 8008306:	f000 f869 	bl	80083dc <__malloc_lock>
 800830a:	f8d8 3000 	ldr.w	r3, [r8]
 800830e:	461c      	mov	r4, r3
 8008310:	bb44      	cbnz	r4, 8008364 <_malloc_r+0x88>
 8008312:	4629      	mov	r1, r5
 8008314:	4630      	mov	r0, r6
 8008316:	f7ff ffbf 	bl	8008298 <sbrk_aligned>
 800831a:	1c43      	adds	r3, r0, #1
 800831c:	4604      	mov	r4, r0
 800831e:	d158      	bne.n	80083d2 <_malloc_r+0xf6>
 8008320:	f8d8 4000 	ldr.w	r4, [r8]
 8008324:	4627      	mov	r7, r4
 8008326:	2f00      	cmp	r7, #0
 8008328:	d143      	bne.n	80083b2 <_malloc_r+0xd6>
 800832a:	2c00      	cmp	r4, #0
 800832c:	d04b      	beq.n	80083c6 <_malloc_r+0xea>
 800832e:	6823      	ldr	r3, [r4, #0]
 8008330:	4639      	mov	r1, r7
 8008332:	4630      	mov	r0, r6
 8008334:	eb04 0903 	add.w	r9, r4, r3
 8008338:	f000 fb60 	bl	80089fc <_sbrk_r>
 800833c:	4581      	cmp	r9, r0
 800833e:	d142      	bne.n	80083c6 <_malloc_r+0xea>
 8008340:	6821      	ldr	r1, [r4, #0]
 8008342:	4630      	mov	r0, r6
 8008344:	1a6d      	subs	r5, r5, r1
 8008346:	4629      	mov	r1, r5
 8008348:	f7ff ffa6 	bl	8008298 <sbrk_aligned>
 800834c:	3001      	adds	r0, #1
 800834e:	d03a      	beq.n	80083c6 <_malloc_r+0xea>
 8008350:	6823      	ldr	r3, [r4, #0]
 8008352:	442b      	add	r3, r5
 8008354:	6023      	str	r3, [r4, #0]
 8008356:	f8d8 3000 	ldr.w	r3, [r8]
 800835a:	685a      	ldr	r2, [r3, #4]
 800835c:	bb62      	cbnz	r2, 80083b8 <_malloc_r+0xdc>
 800835e:	f8c8 7000 	str.w	r7, [r8]
 8008362:	e00f      	b.n	8008384 <_malloc_r+0xa8>
 8008364:	6822      	ldr	r2, [r4, #0]
 8008366:	1b52      	subs	r2, r2, r5
 8008368:	d420      	bmi.n	80083ac <_malloc_r+0xd0>
 800836a:	2a0b      	cmp	r2, #11
 800836c:	d917      	bls.n	800839e <_malloc_r+0xc2>
 800836e:	1961      	adds	r1, r4, r5
 8008370:	42a3      	cmp	r3, r4
 8008372:	6025      	str	r5, [r4, #0]
 8008374:	bf18      	it	ne
 8008376:	6059      	strne	r1, [r3, #4]
 8008378:	6863      	ldr	r3, [r4, #4]
 800837a:	bf08      	it	eq
 800837c:	f8c8 1000 	streq.w	r1, [r8]
 8008380:	5162      	str	r2, [r4, r5]
 8008382:	604b      	str	r3, [r1, #4]
 8008384:	4630      	mov	r0, r6
 8008386:	f000 f82f 	bl	80083e8 <__malloc_unlock>
 800838a:	f104 000b 	add.w	r0, r4, #11
 800838e:	1d23      	adds	r3, r4, #4
 8008390:	f020 0007 	bic.w	r0, r0, #7
 8008394:	1ac2      	subs	r2, r0, r3
 8008396:	bf1c      	itt	ne
 8008398:	1a1b      	subne	r3, r3, r0
 800839a:	50a3      	strne	r3, [r4, r2]
 800839c:	e7af      	b.n	80082fe <_malloc_r+0x22>
 800839e:	6862      	ldr	r2, [r4, #4]
 80083a0:	42a3      	cmp	r3, r4
 80083a2:	bf0c      	ite	eq
 80083a4:	f8c8 2000 	streq.w	r2, [r8]
 80083a8:	605a      	strne	r2, [r3, #4]
 80083aa:	e7eb      	b.n	8008384 <_malloc_r+0xa8>
 80083ac:	4623      	mov	r3, r4
 80083ae:	6864      	ldr	r4, [r4, #4]
 80083b0:	e7ae      	b.n	8008310 <_malloc_r+0x34>
 80083b2:	463c      	mov	r4, r7
 80083b4:	687f      	ldr	r7, [r7, #4]
 80083b6:	e7b6      	b.n	8008326 <_malloc_r+0x4a>
 80083b8:	461a      	mov	r2, r3
 80083ba:	685b      	ldr	r3, [r3, #4]
 80083bc:	42a3      	cmp	r3, r4
 80083be:	d1fb      	bne.n	80083b8 <_malloc_r+0xdc>
 80083c0:	2300      	movs	r3, #0
 80083c2:	6053      	str	r3, [r2, #4]
 80083c4:	e7de      	b.n	8008384 <_malloc_r+0xa8>
 80083c6:	230c      	movs	r3, #12
 80083c8:	4630      	mov	r0, r6
 80083ca:	6033      	str	r3, [r6, #0]
 80083cc:	f000 f80c 	bl	80083e8 <__malloc_unlock>
 80083d0:	e794      	b.n	80082fc <_malloc_r+0x20>
 80083d2:	6005      	str	r5, [r0, #0]
 80083d4:	e7d6      	b.n	8008384 <_malloc_r+0xa8>
 80083d6:	bf00      	nop
 80083d8:	20001958 	.word	0x20001958

080083dc <__malloc_lock>:
 80083dc:	4801      	ldr	r0, [pc, #4]	@ (80083e4 <__malloc_lock+0x8>)
 80083de:	f7ff bf11 	b.w	8008204 <__retarget_lock_acquire_recursive>
 80083e2:	bf00      	nop
 80083e4:	20001950 	.word	0x20001950

080083e8 <__malloc_unlock>:
 80083e8:	4801      	ldr	r0, [pc, #4]	@ (80083f0 <__malloc_unlock+0x8>)
 80083ea:	f7ff bf0c 	b.w	8008206 <__retarget_lock_release_recursive>
 80083ee:	bf00      	nop
 80083f0:	20001950 	.word	0x20001950

080083f4 <__ssputs_r>:
 80083f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083f8:	461f      	mov	r7, r3
 80083fa:	688e      	ldr	r6, [r1, #8]
 80083fc:	4682      	mov	sl, r0
 80083fe:	42be      	cmp	r6, r7
 8008400:	460c      	mov	r4, r1
 8008402:	4690      	mov	r8, r2
 8008404:	680b      	ldr	r3, [r1, #0]
 8008406:	d82d      	bhi.n	8008464 <__ssputs_r+0x70>
 8008408:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800840c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008410:	d026      	beq.n	8008460 <__ssputs_r+0x6c>
 8008412:	6965      	ldr	r5, [r4, #20]
 8008414:	6909      	ldr	r1, [r1, #16]
 8008416:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800841a:	eba3 0901 	sub.w	r9, r3, r1
 800841e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008422:	1c7b      	adds	r3, r7, #1
 8008424:	444b      	add	r3, r9
 8008426:	106d      	asrs	r5, r5, #1
 8008428:	429d      	cmp	r5, r3
 800842a:	bf38      	it	cc
 800842c:	461d      	movcc	r5, r3
 800842e:	0553      	lsls	r3, r2, #21
 8008430:	d527      	bpl.n	8008482 <__ssputs_r+0x8e>
 8008432:	4629      	mov	r1, r5
 8008434:	f7ff ff52 	bl	80082dc <_malloc_r>
 8008438:	4606      	mov	r6, r0
 800843a:	b360      	cbz	r0, 8008496 <__ssputs_r+0xa2>
 800843c:	464a      	mov	r2, r9
 800843e:	6921      	ldr	r1, [r4, #16]
 8008440:	f000 fafa 	bl	8008a38 <memcpy>
 8008444:	89a3      	ldrh	r3, [r4, #12]
 8008446:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800844a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800844e:	81a3      	strh	r3, [r4, #12]
 8008450:	6126      	str	r6, [r4, #16]
 8008452:	444e      	add	r6, r9
 8008454:	6026      	str	r6, [r4, #0]
 8008456:	463e      	mov	r6, r7
 8008458:	6165      	str	r5, [r4, #20]
 800845a:	eba5 0509 	sub.w	r5, r5, r9
 800845e:	60a5      	str	r5, [r4, #8]
 8008460:	42be      	cmp	r6, r7
 8008462:	d900      	bls.n	8008466 <__ssputs_r+0x72>
 8008464:	463e      	mov	r6, r7
 8008466:	4632      	mov	r2, r6
 8008468:	4641      	mov	r1, r8
 800846a:	6820      	ldr	r0, [r4, #0]
 800846c:	f000 faac 	bl	80089c8 <memmove>
 8008470:	2000      	movs	r0, #0
 8008472:	68a3      	ldr	r3, [r4, #8]
 8008474:	1b9b      	subs	r3, r3, r6
 8008476:	60a3      	str	r3, [r4, #8]
 8008478:	6823      	ldr	r3, [r4, #0]
 800847a:	4433      	add	r3, r6
 800847c:	6023      	str	r3, [r4, #0]
 800847e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008482:	462a      	mov	r2, r5
 8008484:	f000 fae6 	bl	8008a54 <_realloc_r>
 8008488:	4606      	mov	r6, r0
 800848a:	2800      	cmp	r0, #0
 800848c:	d1e0      	bne.n	8008450 <__ssputs_r+0x5c>
 800848e:	4650      	mov	r0, sl
 8008490:	6921      	ldr	r1, [r4, #16]
 8008492:	f7ff feb9 	bl	8008208 <_free_r>
 8008496:	230c      	movs	r3, #12
 8008498:	f8ca 3000 	str.w	r3, [sl]
 800849c:	89a3      	ldrh	r3, [r4, #12]
 800849e:	f04f 30ff 	mov.w	r0, #4294967295
 80084a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80084a6:	81a3      	strh	r3, [r4, #12]
 80084a8:	e7e9      	b.n	800847e <__ssputs_r+0x8a>
	...

080084ac <_svfiprintf_r>:
 80084ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084b0:	4698      	mov	r8, r3
 80084b2:	898b      	ldrh	r3, [r1, #12]
 80084b4:	4607      	mov	r7, r0
 80084b6:	061b      	lsls	r3, r3, #24
 80084b8:	460d      	mov	r5, r1
 80084ba:	4614      	mov	r4, r2
 80084bc:	b09d      	sub	sp, #116	@ 0x74
 80084be:	d510      	bpl.n	80084e2 <_svfiprintf_r+0x36>
 80084c0:	690b      	ldr	r3, [r1, #16]
 80084c2:	b973      	cbnz	r3, 80084e2 <_svfiprintf_r+0x36>
 80084c4:	2140      	movs	r1, #64	@ 0x40
 80084c6:	f7ff ff09 	bl	80082dc <_malloc_r>
 80084ca:	6028      	str	r0, [r5, #0]
 80084cc:	6128      	str	r0, [r5, #16]
 80084ce:	b930      	cbnz	r0, 80084de <_svfiprintf_r+0x32>
 80084d0:	230c      	movs	r3, #12
 80084d2:	603b      	str	r3, [r7, #0]
 80084d4:	f04f 30ff 	mov.w	r0, #4294967295
 80084d8:	b01d      	add	sp, #116	@ 0x74
 80084da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084de:	2340      	movs	r3, #64	@ 0x40
 80084e0:	616b      	str	r3, [r5, #20]
 80084e2:	2300      	movs	r3, #0
 80084e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80084e6:	2320      	movs	r3, #32
 80084e8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80084ec:	2330      	movs	r3, #48	@ 0x30
 80084ee:	f04f 0901 	mov.w	r9, #1
 80084f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80084f6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8008690 <_svfiprintf_r+0x1e4>
 80084fa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80084fe:	4623      	mov	r3, r4
 8008500:	469a      	mov	sl, r3
 8008502:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008506:	b10a      	cbz	r2, 800850c <_svfiprintf_r+0x60>
 8008508:	2a25      	cmp	r2, #37	@ 0x25
 800850a:	d1f9      	bne.n	8008500 <_svfiprintf_r+0x54>
 800850c:	ebba 0b04 	subs.w	fp, sl, r4
 8008510:	d00b      	beq.n	800852a <_svfiprintf_r+0x7e>
 8008512:	465b      	mov	r3, fp
 8008514:	4622      	mov	r2, r4
 8008516:	4629      	mov	r1, r5
 8008518:	4638      	mov	r0, r7
 800851a:	f7ff ff6b 	bl	80083f4 <__ssputs_r>
 800851e:	3001      	adds	r0, #1
 8008520:	f000 80a7 	beq.w	8008672 <_svfiprintf_r+0x1c6>
 8008524:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008526:	445a      	add	r2, fp
 8008528:	9209      	str	r2, [sp, #36]	@ 0x24
 800852a:	f89a 3000 	ldrb.w	r3, [sl]
 800852e:	2b00      	cmp	r3, #0
 8008530:	f000 809f 	beq.w	8008672 <_svfiprintf_r+0x1c6>
 8008534:	2300      	movs	r3, #0
 8008536:	f04f 32ff 	mov.w	r2, #4294967295
 800853a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800853e:	f10a 0a01 	add.w	sl, sl, #1
 8008542:	9304      	str	r3, [sp, #16]
 8008544:	9307      	str	r3, [sp, #28]
 8008546:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800854a:	931a      	str	r3, [sp, #104]	@ 0x68
 800854c:	4654      	mov	r4, sl
 800854e:	2205      	movs	r2, #5
 8008550:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008554:	484e      	ldr	r0, [pc, #312]	@ (8008690 <_svfiprintf_r+0x1e4>)
 8008556:	f000 fa61 	bl	8008a1c <memchr>
 800855a:	9a04      	ldr	r2, [sp, #16]
 800855c:	b9d8      	cbnz	r0, 8008596 <_svfiprintf_r+0xea>
 800855e:	06d0      	lsls	r0, r2, #27
 8008560:	bf44      	itt	mi
 8008562:	2320      	movmi	r3, #32
 8008564:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008568:	0711      	lsls	r1, r2, #28
 800856a:	bf44      	itt	mi
 800856c:	232b      	movmi	r3, #43	@ 0x2b
 800856e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008572:	f89a 3000 	ldrb.w	r3, [sl]
 8008576:	2b2a      	cmp	r3, #42	@ 0x2a
 8008578:	d015      	beq.n	80085a6 <_svfiprintf_r+0xfa>
 800857a:	4654      	mov	r4, sl
 800857c:	2000      	movs	r0, #0
 800857e:	f04f 0c0a 	mov.w	ip, #10
 8008582:	9a07      	ldr	r2, [sp, #28]
 8008584:	4621      	mov	r1, r4
 8008586:	f811 3b01 	ldrb.w	r3, [r1], #1
 800858a:	3b30      	subs	r3, #48	@ 0x30
 800858c:	2b09      	cmp	r3, #9
 800858e:	d94b      	bls.n	8008628 <_svfiprintf_r+0x17c>
 8008590:	b1b0      	cbz	r0, 80085c0 <_svfiprintf_r+0x114>
 8008592:	9207      	str	r2, [sp, #28]
 8008594:	e014      	b.n	80085c0 <_svfiprintf_r+0x114>
 8008596:	eba0 0308 	sub.w	r3, r0, r8
 800859a:	fa09 f303 	lsl.w	r3, r9, r3
 800859e:	4313      	orrs	r3, r2
 80085a0:	46a2      	mov	sl, r4
 80085a2:	9304      	str	r3, [sp, #16]
 80085a4:	e7d2      	b.n	800854c <_svfiprintf_r+0xa0>
 80085a6:	9b03      	ldr	r3, [sp, #12]
 80085a8:	1d19      	adds	r1, r3, #4
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	9103      	str	r1, [sp, #12]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	bfbb      	ittet	lt
 80085b2:	425b      	neglt	r3, r3
 80085b4:	f042 0202 	orrlt.w	r2, r2, #2
 80085b8:	9307      	strge	r3, [sp, #28]
 80085ba:	9307      	strlt	r3, [sp, #28]
 80085bc:	bfb8      	it	lt
 80085be:	9204      	strlt	r2, [sp, #16]
 80085c0:	7823      	ldrb	r3, [r4, #0]
 80085c2:	2b2e      	cmp	r3, #46	@ 0x2e
 80085c4:	d10a      	bne.n	80085dc <_svfiprintf_r+0x130>
 80085c6:	7863      	ldrb	r3, [r4, #1]
 80085c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80085ca:	d132      	bne.n	8008632 <_svfiprintf_r+0x186>
 80085cc:	9b03      	ldr	r3, [sp, #12]
 80085ce:	3402      	adds	r4, #2
 80085d0:	1d1a      	adds	r2, r3, #4
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	9203      	str	r2, [sp, #12]
 80085d6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80085da:	9305      	str	r3, [sp, #20]
 80085dc:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8008694 <_svfiprintf_r+0x1e8>
 80085e0:	2203      	movs	r2, #3
 80085e2:	4650      	mov	r0, sl
 80085e4:	7821      	ldrb	r1, [r4, #0]
 80085e6:	f000 fa19 	bl	8008a1c <memchr>
 80085ea:	b138      	cbz	r0, 80085fc <_svfiprintf_r+0x150>
 80085ec:	2240      	movs	r2, #64	@ 0x40
 80085ee:	9b04      	ldr	r3, [sp, #16]
 80085f0:	eba0 000a 	sub.w	r0, r0, sl
 80085f4:	4082      	lsls	r2, r0
 80085f6:	4313      	orrs	r3, r2
 80085f8:	3401      	adds	r4, #1
 80085fa:	9304      	str	r3, [sp, #16]
 80085fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008600:	2206      	movs	r2, #6
 8008602:	4825      	ldr	r0, [pc, #148]	@ (8008698 <_svfiprintf_r+0x1ec>)
 8008604:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008608:	f000 fa08 	bl	8008a1c <memchr>
 800860c:	2800      	cmp	r0, #0
 800860e:	d036      	beq.n	800867e <_svfiprintf_r+0x1d2>
 8008610:	4b22      	ldr	r3, [pc, #136]	@ (800869c <_svfiprintf_r+0x1f0>)
 8008612:	bb1b      	cbnz	r3, 800865c <_svfiprintf_r+0x1b0>
 8008614:	9b03      	ldr	r3, [sp, #12]
 8008616:	3307      	adds	r3, #7
 8008618:	f023 0307 	bic.w	r3, r3, #7
 800861c:	3308      	adds	r3, #8
 800861e:	9303      	str	r3, [sp, #12]
 8008620:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008622:	4433      	add	r3, r6
 8008624:	9309      	str	r3, [sp, #36]	@ 0x24
 8008626:	e76a      	b.n	80084fe <_svfiprintf_r+0x52>
 8008628:	460c      	mov	r4, r1
 800862a:	2001      	movs	r0, #1
 800862c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008630:	e7a8      	b.n	8008584 <_svfiprintf_r+0xd8>
 8008632:	2300      	movs	r3, #0
 8008634:	f04f 0c0a 	mov.w	ip, #10
 8008638:	4619      	mov	r1, r3
 800863a:	3401      	adds	r4, #1
 800863c:	9305      	str	r3, [sp, #20]
 800863e:	4620      	mov	r0, r4
 8008640:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008644:	3a30      	subs	r2, #48	@ 0x30
 8008646:	2a09      	cmp	r2, #9
 8008648:	d903      	bls.n	8008652 <_svfiprintf_r+0x1a6>
 800864a:	2b00      	cmp	r3, #0
 800864c:	d0c6      	beq.n	80085dc <_svfiprintf_r+0x130>
 800864e:	9105      	str	r1, [sp, #20]
 8008650:	e7c4      	b.n	80085dc <_svfiprintf_r+0x130>
 8008652:	4604      	mov	r4, r0
 8008654:	2301      	movs	r3, #1
 8008656:	fb0c 2101 	mla	r1, ip, r1, r2
 800865a:	e7f0      	b.n	800863e <_svfiprintf_r+0x192>
 800865c:	ab03      	add	r3, sp, #12
 800865e:	9300      	str	r3, [sp, #0]
 8008660:	462a      	mov	r2, r5
 8008662:	4638      	mov	r0, r7
 8008664:	4b0e      	ldr	r3, [pc, #56]	@ (80086a0 <_svfiprintf_r+0x1f4>)
 8008666:	a904      	add	r1, sp, #16
 8008668:	f3af 8000 	nop.w
 800866c:	1c42      	adds	r2, r0, #1
 800866e:	4606      	mov	r6, r0
 8008670:	d1d6      	bne.n	8008620 <_svfiprintf_r+0x174>
 8008672:	89ab      	ldrh	r3, [r5, #12]
 8008674:	065b      	lsls	r3, r3, #25
 8008676:	f53f af2d 	bmi.w	80084d4 <_svfiprintf_r+0x28>
 800867a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800867c:	e72c      	b.n	80084d8 <_svfiprintf_r+0x2c>
 800867e:	ab03      	add	r3, sp, #12
 8008680:	9300      	str	r3, [sp, #0]
 8008682:	462a      	mov	r2, r5
 8008684:	4638      	mov	r0, r7
 8008686:	4b06      	ldr	r3, [pc, #24]	@ (80086a0 <_svfiprintf_r+0x1f4>)
 8008688:	a904      	add	r1, sp, #16
 800868a:	f000 f87d 	bl	8008788 <_printf_i>
 800868e:	e7ed      	b.n	800866c <_svfiprintf_r+0x1c0>
 8008690:	08008cc9 	.word	0x08008cc9
 8008694:	08008ccf 	.word	0x08008ccf
 8008698:	08008cd3 	.word	0x08008cd3
 800869c:	00000000 	.word	0x00000000
 80086a0:	080083f5 	.word	0x080083f5

080086a4 <_printf_common>:
 80086a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086a8:	4616      	mov	r6, r2
 80086aa:	4698      	mov	r8, r3
 80086ac:	688a      	ldr	r2, [r1, #8]
 80086ae:	690b      	ldr	r3, [r1, #16]
 80086b0:	4607      	mov	r7, r0
 80086b2:	4293      	cmp	r3, r2
 80086b4:	bfb8      	it	lt
 80086b6:	4613      	movlt	r3, r2
 80086b8:	6033      	str	r3, [r6, #0]
 80086ba:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80086be:	460c      	mov	r4, r1
 80086c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80086c4:	b10a      	cbz	r2, 80086ca <_printf_common+0x26>
 80086c6:	3301      	adds	r3, #1
 80086c8:	6033      	str	r3, [r6, #0]
 80086ca:	6823      	ldr	r3, [r4, #0]
 80086cc:	0699      	lsls	r1, r3, #26
 80086ce:	bf42      	ittt	mi
 80086d0:	6833      	ldrmi	r3, [r6, #0]
 80086d2:	3302      	addmi	r3, #2
 80086d4:	6033      	strmi	r3, [r6, #0]
 80086d6:	6825      	ldr	r5, [r4, #0]
 80086d8:	f015 0506 	ands.w	r5, r5, #6
 80086dc:	d106      	bne.n	80086ec <_printf_common+0x48>
 80086de:	f104 0a19 	add.w	sl, r4, #25
 80086e2:	68e3      	ldr	r3, [r4, #12]
 80086e4:	6832      	ldr	r2, [r6, #0]
 80086e6:	1a9b      	subs	r3, r3, r2
 80086e8:	42ab      	cmp	r3, r5
 80086ea:	dc2b      	bgt.n	8008744 <_printf_common+0xa0>
 80086ec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80086f0:	6822      	ldr	r2, [r4, #0]
 80086f2:	3b00      	subs	r3, #0
 80086f4:	bf18      	it	ne
 80086f6:	2301      	movne	r3, #1
 80086f8:	0692      	lsls	r2, r2, #26
 80086fa:	d430      	bmi.n	800875e <_printf_common+0xba>
 80086fc:	4641      	mov	r1, r8
 80086fe:	4638      	mov	r0, r7
 8008700:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008704:	47c8      	blx	r9
 8008706:	3001      	adds	r0, #1
 8008708:	d023      	beq.n	8008752 <_printf_common+0xae>
 800870a:	6823      	ldr	r3, [r4, #0]
 800870c:	6922      	ldr	r2, [r4, #16]
 800870e:	f003 0306 	and.w	r3, r3, #6
 8008712:	2b04      	cmp	r3, #4
 8008714:	bf14      	ite	ne
 8008716:	2500      	movne	r5, #0
 8008718:	6833      	ldreq	r3, [r6, #0]
 800871a:	f04f 0600 	mov.w	r6, #0
 800871e:	bf08      	it	eq
 8008720:	68e5      	ldreq	r5, [r4, #12]
 8008722:	f104 041a 	add.w	r4, r4, #26
 8008726:	bf08      	it	eq
 8008728:	1aed      	subeq	r5, r5, r3
 800872a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800872e:	bf08      	it	eq
 8008730:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008734:	4293      	cmp	r3, r2
 8008736:	bfc4      	itt	gt
 8008738:	1a9b      	subgt	r3, r3, r2
 800873a:	18ed      	addgt	r5, r5, r3
 800873c:	42b5      	cmp	r5, r6
 800873e:	d11a      	bne.n	8008776 <_printf_common+0xd2>
 8008740:	2000      	movs	r0, #0
 8008742:	e008      	b.n	8008756 <_printf_common+0xb2>
 8008744:	2301      	movs	r3, #1
 8008746:	4652      	mov	r2, sl
 8008748:	4641      	mov	r1, r8
 800874a:	4638      	mov	r0, r7
 800874c:	47c8      	blx	r9
 800874e:	3001      	adds	r0, #1
 8008750:	d103      	bne.n	800875a <_printf_common+0xb6>
 8008752:	f04f 30ff 	mov.w	r0, #4294967295
 8008756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800875a:	3501      	adds	r5, #1
 800875c:	e7c1      	b.n	80086e2 <_printf_common+0x3e>
 800875e:	2030      	movs	r0, #48	@ 0x30
 8008760:	18e1      	adds	r1, r4, r3
 8008762:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008766:	1c5a      	adds	r2, r3, #1
 8008768:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800876c:	4422      	add	r2, r4
 800876e:	3302      	adds	r3, #2
 8008770:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008774:	e7c2      	b.n	80086fc <_printf_common+0x58>
 8008776:	2301      	movs	r3, #1
 8008778:	4622      	mov	r2, r4
 800877a:	4641      	mov	r1, r8
 800877c:	4638      	mov	r0, r7
 800877e:	47c8      	blx	r9
 8008780:	3001      	adds	r0, #1
 8008782:	d0e6      	beq.n	8008752 <_printf_common+0xae>
 8008784:	3601      	adds	r6, #1
 8008786:	e7d9      	b.n	800873c <_printf_common+0x98>

08008788 <_printf_i>:
 8008788:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800878c:	7e0f      	ldrb	r7, [r1, #24]
 800878e:	4691      	mov	r9, r2
 8008790:	2f78      	cmp	r7, #120	@ 0x78
 8008792:	4680      	mov	r8, r0
 8008794:	460c      	mov	r4, r1
 8008796:	469a      	mov	sl, r3
 8008798:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800879a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800879e:	d807      	bhi.n	80087b0 <_printf_i+0x28>
 80087a0:	2f62      	cmp	r7, #98	@ 0x62
 80087a2:	d80a      	bhi.n	80087ba <_printf_i+0x32>
 80087a4:	2f00      	cmp	r7, #0
 80087a6:	f000 80d3 	beq.w	8008950 <_printf_i+0x1c8>
 80087aa:	2f58      	cmp	r7, #88	@ 0x58
 80087ac:	f000 80ba 	beq.w	8008924 <_printf_i+0x19c>
 80087b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80087b4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80087b8:	e03a      	b.n	8008830 <_printf_i+0xa8>
 80087ba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80087be:	2b15      	cmp	r3, #21
 80087c0:	d8f6      	bhi.n	80087b0 <_printf_i+0x28>
 80087c2:	a101      	add	r1, pc, #4	@ (adr r1, 80087c8 <_printf_i+0x40>)
 80087c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80087c8:	08008821 	.word	0x08008821
 80087cc:	08008835 	.word	0x08008835
 80087d0:	080087b1 	.word	0x080087b1
 80087d4:	080087b1 	.word	0x080087b1
 80087d8:	080087b1 	.word	0x080087b1
 80087dc:	080087b1 	.word	0x080087b1
 80087e0:	08008835 	.word	0x08008835
 80087e4:	080087b1 	.word	0x080087b1
 80087e8:	080087b1 	.word	0x080087b1
 80087ec:	080087b1 	.word	0x080087b1
 80087f0:	080087b1 	.word	0x080087b1
 80087f4:	08008937 	.word	0x08008937
 80087f8:	0800885f 	.word	0x0800885f
 80087fc:	080088f1 	.word	0x080088f1
 8008800:	080087b1 	.word	0x080087b1
 8008804:	080087b1 	.word	0x080087b1
 8008808:	08008959 	.word	0x08008959
 800880c:	080087b1 	.word	0x080087b1
 8008810:	0800885f 	.word	0x0800885f
 8008814:	080087b1 	.word	0x080087b1
 8008818:	080087b1 	.word	0x080087b1
 800881c:	080088f9 	.word	0x080088f9
 8008820:	6833      	ldr	r3, [r6, #0]
 8008822:	1d1a      	adds	r2, r3, #4
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	6032      	str	r2, [r6, #0]
 8008828:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800882c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008830:	2301      	movs	r3, #1
 8008832:	e09e      	b.n	8008972 <_printf_i+0x1ea>
 8008834:	6833      	ldr	r3, [r6, #0]
 8008836:	6820      	ldr	r0, [r4, #0]
 8008838:	1d19      	adds	r1, r3, #4
 800883a:	6031      	str	r1, [r6, #0]
 800883c:	0606      	lsls	r6, r0, #24
 800883e:	d501      	bpl.n	8008844 <_printf_i+0xbc>
 8008840:	681d      	ldr	r5, [r3, #0]
 8008842:	e003      	b.n	800884c <_printf_i+0xc4>
 8008844:	0645      	lsls	r5, r0, #25
 8008846:	d5fb      	bpl.n	8008840 <_printf_i+0xb8>
 8008848:	f9b3 5000 	ldrsh.w	r5, [r3]
 800884c:	2d00      	cmp	r5, #0
 800884e:	da03      	bge.n	8008858 <_printf_i+0xd0>
 8008850:	232d      	movs	r3, #45	@ 0x2d
 8008852:	426d      	negs	r5, r5
 8008854:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008858:	230a      	movs	r3, #10
 800885a:	4859      	ldr	r0, [pc, #356]	@ (80089c0 <_printf_i+0x238>)
 800885c:	e011      	b.n	8008882 <_printf_i+0xfa>
 800885e:	6821      	ldr	r1, [r4, #0]
 8008860:	6833      	ldr	r3, [r6, #0]
 8008862:	0608      	lsls	r0, r1, #24
 8008864:	f853 5b04 	ldr.w	r5, [r3], #4
 8008868:	d402      	bmi.n	8008870 <_printf_i+0xe8>
 800886a:	0649      	lsls	r1, r1, #25
 800886c:	bf48      	it	mi
 800886e:	b2ad      	uxthmi	r5, r5
 8008870:	2f6f      	cmp	r7, #111	@ 0x6f
 8008872:	6033      	str	r3, [r6, #0]
 8008874:	bf14      	ite	ne
 8008876:	230a      	movne	r3, #10
 8008878:	2308      	moveq	r3, #8
 800887a:	4851      	ldr	r0, [pc, #324]	@ (80089c0 <_printf_i+0x238>)
 800887c:	2100      	movs	r1, #0
 800887e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008882:	6866      	ldr	r6, [r4, #4]
 8008884:	2e00      	cmp	r6, #0
 8008886:	bfa8      	it	ge
 8008888:	6821      	ldrge	r1, [r4, #0]
 800888a:	60a6      	str	r6, [r4, #8]
 800888c:	bfa4      	itt	ge
 800888e:	f021 0104 	bicge.w	r1, r1, #4
 8008892:	6021      	strge	r1, [r4, #0]
 8008894:	b90d      	cbnz	r5, 800889a <_printf_i+0x112>
 8008896:	2e00      	cmp	r6, #0
 8008898:	d04b      	beq.n	8008932 <_printf_i+0x1aa>
 800889a:	4616      	mov	r6, r2
 800889c:	fbb5 f1f3 	udiv	r1, r5, r3
 80088a0:	fb03 5711 	mls	r7, r3, r1, r5
 80088a4:	5dc7      	ldrb	r7, [r0, r7]
 80088a6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80088aa:	462f      	mov	r7, r5
 80088ac:	42bb      	cmp	r3, r7
 80088ae:	460d      	mov	r5, r1
 80088b0:	d9f4      	bls.n	800889c <_printf_i+0x114>
 80088b2:	2b08      	cmp	r3, #8
 80088b4:	d10b      	bne.n	80088ce <_printf_i+0x146>
 80088b6:	6823      	ldr	r3, [r4, #0]
 80088b8:	07df      	lsls	r7, r3, #31
 80088ba:	d508      	bpl.n	80088ce <_printf_i+0x146>
 80088bc:	6923      	ldr	r3, [r4, #16]
 80088be:	6861      	ldr	r1, [r4, #4]
 80088c0:	4299      	cmp	r1, r3
 80088c2:	bfde      	ittt	le
 80088c4:	2330      	movle	r3, #48	@ 0x30
 80088c6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80088ca:	f106 36ff 	addle.w	r6, r6, #4294967295
 80088ce:	1b92      	subs	r2, r2, r6
 80088d0:	6122      	str	r2, [r4, #16]
 80088d2:	464b      	mov	r3, r9
 80088d4:	4621      	mov	r1, r4
 80088d6:	4640      	mov	r0, r8
 80088d8:	f8cd a000 	str.w	sl, [sp]
 80088dc:	aa03      	add	r2, sp, #12
 80088de:	f7ff fee1 	bl	80086a4 <_printf_common>
 80088e2:	3001      	adds	r0, #1
 80088e4:	d14a      	bne.n	800897c <_printf_i+0x1f4>
 80088e6:	f04f 30ff 	mov.w	r0, #4294967295
 80088ea:	b004      	add	sp, #16
 80088ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088f0:	6823      	ldr	r3, [r4, #0]
 80088f2:	f043 0320 	orr.w	r3, r3, #32
 80088f6:	6023      	str	r3, [r4, #0]
 80088f8:	2778      	movs	r7, #120	@ 0x78
 80088fa:	4832      	ldr	r0, [pc, #200]	@ (80089c4 <_printf_i+0x23c>)
 80088fc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008900:	6823      	ldr	r3, [r4, #0]
 8008902:	6831      	ldr	r1, [r6, #0]
 8008904:	061f      	lsls	r7, r3, #24
 8008906:	f851 5b04 	ldr.w	r5, [r1], #4
 800890a:	d402      	bmi.n	8008912 <_printf_i+0x18a>
 800890c:	065f      	lsls	r7, r3, #25
 800890e:	bf48      	it	mi
 8008910:	b2ad      	uxthmi	r5, r5
 8008912:	6031      	str	r1, [r6, #0]
 8008914:	07d9      	lsls	r1, r3, #31
 8008916:	bf44      	itt	mi
 8008918:	f043 0320 	orrmi.w	r3, r3, #32
 800891c:	6023      	strmi	r3, [r4, #0]
 800891e:	b11d      	cbz	r5, 8008928 <_printf_i+0x1a0>
 8008920:	2310      	movs	r3, #16
 8008922:	e7ab      	b.n	800887c <_printf_i+0xf4>
 8008924:	4826      	ldr	r0, [pc, #152]	@ (80089c0 <_printf_i+0x238>)
 8008926:	e7e9      	b.n	80088fc <_printf_i+0x174>
 8008928:	6823      	ldr	r3, [r4, #0]
 800892a:	f023 0320 	bic.w	r3, r3, #32
 800892e:	6023      	str	r3, [r4, #0]
 8008930:	e7f6      	b.n	8008920 <_printf_i+0x198>
 8008932:	4616      	mov	r6, r2
 8008934:	e7bd      	b.n	80088b2 <_printf_i+0x12a>
 8008936:	6833      	ldr	r3, [r6, #0]
 8008938:	6825      	ldr	r5, [r4, #0]
 800893a:	1d18      	adds	r0, r3, #4
 800893c:	6961      	ldr	r1, [r4, #20]
 800893e:	6030      	str	r0, [r6, #0]
 8008940:	062e      	lsls	r6, r5, #24
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	d501      	bpl.n	800894a <_printf_i+0x1c2>
 8008946:	6019      	str	r1, [r3, #0]
 8008948:	e002      	b.n	8008950 <_printf_i+0x1c8>
 800894a:	0668      	lsls	r0, r5, #25
 800894c:	d5fb      	bpl.n	8008946 <_printf_i+0x1be>
 800894e:	8019      	strh	r1, [r3, #0]
 8008950:	2300      	movs	r3, #0
 8008952:	4616      	mov	r6, r2
 8008954:	6123      	str	r3, [r4, #16]
 8008956:	e7bc      	b.n	80088d2 <_printf_i+0x14a>
 8008958:	6833      	ldr	r3, [r6, #0]
 800895a:	2100      	movs	r1, #0
 800895c:	1d1a      	adds	r2, r3, #4
 800895e:	6032      	str	r2, [r6, #0]
 8008960:	681e      	ldr	r6, [r3, #0]
 8008962:	6862      	ldr	r2, [r4, #4]
 8008964:	4630      	mov	r0, r6
 8008966:	f000 f859 	bl	8008a1c <memchr>
 800896a:	b108      	cbz	r0, 8008970 <_printf_i+0x1e8>
 800896c:	1b80      	subs	r0, r0, r6
 800896e:	6060      	str	r0, [r4, #4]
 8008970:	6863      	ldr	r3, [r4, #4]
 8008972:	6123      	str	r3, [r4, #16]
 8008974:	2300      	movs	r3, #0
 8008976:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800897a:	e7aa      	b.n	80088d2 <_printf_i+0x14a>
 800897c:	4632      	mov	r2, r6
 800897e:	4649      	mov	r1, r9
 8008980:	4640      	mov	r0, r8
 8008982:	6923      	ldr	r3, [r4, #16]
 8008984:	47d0      	blx	sl
 8008986:	3001      	adds	r0, #1
 8008988:	d0ad      	beq.n	80088e6 <_printf_i+0x15e>
 800898a:	6823      	ldr	r3, [r4, #0]
 800898c:	079b      	lsls	r3, r3, #30
 800898e:	d413      	bmi.n	80089b8 <_printf_i+0x230>
 8008990:	68e0      	ldr	r0, [r4, #12]
 8008992:	9b03      	ldr	r3, [sp, #12]
 8008994:	4298      	cmp	r0, r3
 8008996:	bfb8      	it	lt
 8008998:	4618      	movlt	r0, r3
 800899a:	e7a6      	b.n	80088ea <_printf_i+0x162>
 800899c:	2301      	movs	r3, #1
 800899e:	4632      	mov	r2, r6
 80089a0:	4649      	mov	r1, r9
 80089a2:	4640      	mov	r0, r8
 80089a4:	47d0      	blx	sl
 80089a6:	3001      	adds	r0, #1
 80089a8:	d09d      	beq.n	80088e6 <_printf_i+0x15e>
 80089aa:	3501      	adds	r5, #1
 80089ac:	68e3      	ldr	r3, [r4, #12]
 80089ae:	9903      	ldr	r1, [sp, #12]
 80089b0:	1a5b      	subs	r3, r3, r1
 80089b2:	42ab      	cmp	r3, r5
 80089b4:	dcf2      	bgt.n	800899c <_printf_i+0x214>
 80089b6:	e7eb      	b.n	8008990 <_printf_i+0x208>
 80089b8:	2500      	movs	r5, #0
 80089ba:	f104 0619 	add.w	r6, r4, #25
 80089be:	e7f5      	b.n	80089ac <_printf_i+0x224>
 80089c0:	08008cda 	.word	0x08008cda
 80089c4:	08008ceb 	.word	0x08008ceb

080089c8 <memmove>:
 80089c8:	4288      	cmp	r0, r1
 80089ca:	b510      	push	{r4, lr}
 80089cc:	eb01 0402 	add.w	r4, r1, r2
 80089d0:	d902      	bls.n	80089d8 <memmove+0x10>
 80089d2:	4284      	cmp	r4, r0
 80089d4:	4623      	mov	r3, r4
 80089d6:	d807      	bhi.n	80089e8 <memmove+0x20>
 80089d8:	1e43      	subs	r3, r0, #1
 80089da:	42a1      	cmp	r1, r4
 80089dc:	d008      	beq.n	80089f0 <memmove+0x28>
 80089de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80089e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80089e6:	e7f8      	b.n	80089da <memmove+0x12>
 80089e8:	4601      	mov	r1, r0
 80089ea:	4402      	add	r2, r0
 80089ec:	428a      	cmp	r2, r1
 80089ee:	d100      	bne.n	80089f2 <memmove+0x2a>
 80089f0:	bd10      	pop	{r4, pc}
 80089f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80089f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80089fa:	e7f7      	b.n	80089ec <memmove+0x24>

080089fc <_sbrk_r>:
 80089fc:	b538      	push	{r3, r4, r5, lr}
 80089fe:	2300      	movs	r3, #0
 8008a00:	4d05      	ldr	r5, [pc, #20]	@ (8008a18 <_sbrk_r+0x1c>)
 8008a02:	4604      	mov	r4, r0
 8008a04:	4608      	mov	r0, r1
 8008a06:	602b      	str	r3, [r5, #0]
 8008a08:	f7f8 fe02 	bl	8001610 <_sbrk>
 8008a0c:	1c43      	adds	r3, r0, #1
 8008a0e:	d102      	bne.n	8008a16 <_sbrk_r+0x1a>
 8008a10:	682b      	ldr	r3, [r5, #0]
 8008a12:	b103      	cbz	r3, 8008a16 <_sbrk_r+0x1a>
 8008a14:	6023      	str	r3, [r4, #0]
 8008a16:	bd38      	pop	{r3, r4, r5, pc}
 8008a18:	2000194c 	.word	0x2000194c

08008a1c <memchr>:
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	b510      	push	{r4, lr}
 8008a20:	b2c9      	uxtb	r1, r1
 8008a22:	4402      	add	r2, r0
 8008a24:	4293      	cmp	r3, r2
 8008a26:	4618      	mov	r0, r3
 8008a28:	d101      	bne.n	8008a2e <memchr+0x12>
 8008a2a:	2000      	movs	r0, #0
 8008a2c:	e003      	b.n	8008a36 <memchr+0x1a>
 8008a2e:	7804      	ldrb	r4, [r0, #0]
 8008a30:	3301      	adds	r3, #1
 8008a32:	428c      	cmp	r4, r1
 8008a34:	d1f6      	bne.n	8008a24 <memchr+0x8>
 8008a36:	bd10      	pop	{r4, pc}

08008a38 <memcpy>:
 8008a38:	440a      	add	r2, r1
 8008a3a:	4291      	cmp	r1, r2
 8008a3c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008a40:	d100      	bne.n	8008a44 <memcpy+0xc>
 8008a42:	4770      	bx	lr
 8008a44:	b510      	push	{r4, lr}
 8008a46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a4a:	4291      	cmp	r1, r2
 8008a4c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a50:	d1f9      	bne.n	8008a46 <memcpy+0xe>
 8008a52:	bd10      	pop	{r4, pc}

08008a54 <_realloc_r>:
 8008a54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a58:	4680      	mov	r8, r0
 8008a5a:	4615      	mov	r5, r2
 8008a5c:	460c      	mov	r4, r1
 8008a5e:	b921      	cbnz	r1, 8008a6a <_realloc_r+0x16>
 8008a60:	4611      	mov	r1, r2
 8008a62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a66:	f7ff bc39 	b.w	80082dc <_malloc_r>
 8008a6a:	b92a      	cbnz	r2, 8008a78 <_realloc_r+0x24>
 8008a6c:	f7ff fbcc 	bl	8008208 <_free_r>
 8008a70:	2400      	movs	r4, #0
 8008a72:	4620      	mov	r0, r4
 8008a74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a78:	f000 f81a 	bl	8008ab0 <_malloc_usable_size_r>
 8008a7c:	4285      	cmp	r5, r0
 8008a7e:	4606      	mov	r6, r0
 8008a80:	d802      	bhi.n	8008a88 <_realloc_r+0x34>
 8008a82:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008a86:	d8f4      	bhi.n	8008a72 <_realloc_r+0x1e>
 8008a88:	4629      	mov	r1, r5
 8008a8a:	4640      	mov	r0, r8
 8008a8c:	f7ff fc26 	bl	80082dc <_malloc_r>
 8008a90:	4607      	mov	r7, r0
 8008a92:	2800      	cmp	r0, #0
 8008a94:	d0ec      	beq.n	8008a70 <_realloc_r+0x1c>
 8008a96:	42b5      	cmp	r5, r6
 8008a98:	462a      	mov	r2, r5
 8008a9a:	4621      	mov	r1, r4
 8008a9c:	bf28      	it	cs
 8008a9e:	4632      	movcs	r2, r6
 8008aa0:	f7ff ffca 	bl	8008a38 <memcpy>
 8008aa4:	4621      	mov	r1, r4
 8008aa6:	4640      	mov	r0, r8
 8008aa8:	f7ff fbae 	bl	8008208 <_free_r>
 8008aac:	463c      	mov	r4, r7
 8008aae:	e7e0      	b.n	8008a72 <_realloc_r+0x1e>

08008ab0 <_malloc_usable_size_r>:
 8008ab0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ab4:	1f18      	subs	r0, r3, #4
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	bfbc      	itt	lt
 8008aba:	580b      	ldrlt	r3, [r1, r0]
 8008abc:	18c0      	addlt	r0, r0, r3
 8008abe:	4770      	bx	lr

08008ac0 <_init>:
 8008ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ac2:	bf00      	nop
 8008ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ac6:	bc08      	pop	{r3}
 8008ac8:	469e      	mov	lr, r3
 8008aca:	4770      	bx	lr

08008acc <_fini>:
 8008acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ace:	bf00      	nop
 8008ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ad2:	bc08      	pop	{r3}
 8008ad4:	469e      	mov	lr, r3
 8008ad6:	4770      	bx	lr
